{"version":3,"sources":["components/InvestigatorSettings.js","components/SettingsType.js","components/SettingsChaos.js","components/SettingsDraft.js","components/SettingsPhase.js","components/SettingsPhasedDraft.js","components/SettingsBuild.js","components/SettingsUpgrade.js","components/Settings.js","components/CardList.js","components/DraftArea.js","components/Draft.js","App.js","components/DraftData.js","components/DraftFilters.js","components/StandardChaos.js","components/SimpleDraft.js","AppContainer.js","index.js"],"names":["InvestigatorSettings","props","investigator","secondaryClass","selectedDeckSize","deckSize","cardData","handleChange","event","onChangeSetting","target","name","value","secondaryFactionList","deckSizeList","secondaryClassValue","deckSizeValue","investigatorID","Object","keys","filter","key","deckOptions","deck_options","i","length","faction_select","map","item","index","toUpperCase","slice","deck_size_select","skidsName","skidsOption","secondaryClassDiv","className","onChange","deckSizeDiv","SettingsType","style1","style2","handleClick","attributes","nodeValue","draftTab","backgroundColor","borderLeft","borderBottom","borderRight","style","onClick","SettingsChaos","SettingsDraft","type","min","max","step","draftCount","SettingsPhase","padding","phase","maxCards","draftCards","checked","draftUseLimited","SettingsPhasedDraft","limit2","limit3","limit4","warningText2","warningText3","warningStyle2","warningStyle3","warningStyle4","display","SettingsBuild","draftSettings","draftDescription","draftType","SettingsUpgrade","draftWeighting","draftXP","Settings","button","ready","CardList","cardList","updateCardOverlay","assetCount","eventCount","skillCount","otherCount","hand","hand2","arcane","arcane2","accessory","body","ally","tarot","otherasset","permanent","skill","other","onEnterCardLeft","cardArray","code","id","imagesrc","onEnterCardRight","onLeaveCard","forEach","type_code","push","count","slot","assetHeader","handHeader","handContents","sort","a","b","countStr","onPointerEnter","onPointerLeave","hand2Header","hand2Contents","arcaneHeader","arcaneContents","arcane2Header","arcane2Contents","accessoryHeader","accessoryContents","bodyHeader","bodyContents","allyHeader","allyContents","tarotHeader","tarotContents","otherassetHeader","otherassetContents","permanentHeader","permanentContents","eventHeader","eventContents","skillHeader","skillContents","otherHeader","otherContents","marginBottom","DraftArea","draftPool","draftCard","updateCardList","updateDraftPool","newList","findIndex","src","includes","updatedList","concat","images","imageSrc","alt","phaseText","Draft","draftProgress","resetApp","investigatorCardImage","investigatorCardImageBack","backimagesrc","draftContent","progress","App","contents","useState","overlayImage","updateOverlayImage","overlayPosition","updateOverlayPosition","overlay","fetchError","building","image","position","DrawCard","legal","randomCard","randomCode","Math","floor","random","FilterCards","upgrade","legalSets","filteredDeck","list","options","limit","testDeckOption","filterDeckForLimited","requirementOptions","joeRequiredCards","cardTraits","traits","search","RegExp","countDeck","requirement","trait","lolaRequiredCards","faction","faction_code","faction2_code","e1","e2","minCount","factionRequirement","minLevel","maxLevel","countDeckLimited","option","card","level","secondaryFaction","uses","text","f","ixp","undefined","xp","cardText","cardType","find","bonded_to","subtype_code","exceptional","restrictions","pack_code","optionLegal","not","limited","deck_limit","StandardChaos","filteredData","SimpleDraft","AppContainer","changeInvestigator","changeSecondaryClass","changeSelectedDeckSize","changeDeckSize","changeDraftTab","changeDraftType","changeDraftWeighting","changeDraftXP","changeDraftCount","changeDraftCards","changeDraftUseLimited","changeBuilding","newPhase","changeNewPhase","fetching","changeFetching","updateCardData","updateFetchError","changePhase","complete","changeComplete","draftProgressBuild","draftProgressUpgrade","doChangeDraftCount","newCount","doChangeDraftCards","newCards","doChangeDraftUseLimited","newUseLimited","cardXP","useEffect","fetch","then","res","json","catch","draftTarget","parseInt","pool","deck_requirements","size","classOptions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAqHeA,MAnHf,SAA8BC,GAAQ,IAC1BC,EAAuED,EAAvEC,aAAcC,EAAyDF,EAAzDE,eAAgBC,EAAyCH,EAAzCG,iBAAkBC,EAAuBJ,EAAvBI,SAAUC,EAAaL,EAAbK,SAElE,SAASC,EAAaC,GAClBP,EAAMQ,gBAAgBD,EAAME,OAAOC,KAAMH,EAAME,OAAOE,OAG1D,IAAIC,EAAuB,KACvBC,EAAe,KACfC,EAAsBZ,EACtBa,EAAgBZ,GAAsCC,EAE1D,GAAIC,EAQA,IAPA,IAAMW,EAAiBC,OAAOC,KAAKb,GAClCc,QAAO,SAAAC,GACJ,OAAQf,EAASe,GAAKV,OAAST,KAChC,GAEGoB,EAAchB,EAASW,GAAgBM,aAEpCC,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IAAK,CACzC,GAA4B,oBAAxBF,EAAYE,GAAGb,KAIfE,EAFaS,EAAYE,GAAGE,eAEAC,KAAI,SAACC,EAAMC,GACnC,OAAO,4BAAQjB,MAAOgB,EAAMP,IAAKQ,GAC5BD,EAAK,GAAGE,cAAgBF,EAAKG,MAAM,YAI3C,GAA4B,cAAxBT,EAAYE,GAAGb,KACxB,CAGIG,EAFaQ,EAAYE,GAAGQ,iBAERL,KAAI,SAACC,EAAMC,GAC3B,OAAO,4BAAQjB,MAAOgB,EAAMP,IAAKQ,GAC5BD,OAOrB,IAAIK,EAAY,WAChBA,GAAwB,UACxB,IAAMC,EAAc,4BAAQtB,MAAOqB,GAAYA,GAEzCE,EAAoBtB,EACtB,6BACI,2BAAOuB,UAAU,iBAAiBxB,MAAOG,GAAzC,oBACA,4BAAQqB,UAAU,iBAAiBzB,KAAK,iBAAiBC,MAAOG,EAAqBsB,SAAU9B,GAC1FM,IAIT,KAEMyB,EAAcxB,EACpB,6BACI,2BAAOsB,UAAU,WAAWxB,MAAOI,GAAnC,cACA,4BAAQoB,UAAU,WAAWzB,KAAK,mBAAmBC,MAAOI,EAAeqB,SAAU9B,GAChFO,IAIT,KAEJ,OACI,yBAAKsB,UAAU,YACX,oDACA,gDACA,4BAAQzB,KAAK,eAAeC,MAAOV,EAAcmC,SAAU9B,GACvD,4BAAQK,MAAM,gBAAd,gBACA,4BAAQA,MAAM,gBAAd,gBACCsB,EACD,4BAAQtB,MAAM,eAAd,eACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,mBAAd,mBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,kBAAd,kBACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,oBAAd,oBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,kBAAd,kBACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,oBAAd,oBACA,4BAAQA,MAAM,kBAAd,kBACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,gBAAd,iBAEHuB,EACAG,ICtEEC,MAxCf,SAAsBtC,GAClB,IAAIuC,EAAS,GACTC,EAAS,GAsBb,SAASC,EAAYlC,GACjBP,EAAMQ,gBAAgBD,EAAME,OAAOiC,WAAWhC,KAAKiC,UAAWpC,EAAME,OAAOiC,WAAW/B,MAAMgC,WAGhG,MAxBuB,eAAnB3C,EAAM4C,UACNL,EAAS,CACLM,gBAAiB,WAErBL,EAAS,CACLK,gBAAiB,UACjBC,WAAY,kBACZC,aAAc,qBAGlBR,EAAS,CACLM,gBAAiB,UACjBG,YAAa,kBACbD,aAAc,mBAElBP,EAAS,CACLK,gBAAiB,YASrB,yBAAKV,UAAU,cACX,yBAAKA,UAAU,cAAczB,KAAK,WAAWC,MAAM,aAAasC,MAAOV,EAAQW,QAAST,GAAxF,cAGA,yBAAKN,UAAU,cAAczB,KAAK,WAAWC,MAAM,UAAUsC,MAAOT,EAAQU,QAAST,GAArF,aCdGU,MAnBf,SAAuBnD,GACnB,OACI,yBAAKmC,UAAU,wBCaRiB,MAff,SAAuBpD,GAMnB,OACI,yBAAKmC,UAAU,sBACX,wDACA,2BAAOkB,KAAK,QAAQC,IAAI,IAAIC,IAAI,KAAKC,KAAK,IAAI7C,MAAOX,EAAMyD,WAAYtB,UAAU,SAASzB,KAAK,cAAc0B,SAPrH,SAAsB7B,GAClBP,EAAMQ,gBAAgBD,EAAME,OAAOC,KAAMH,EAAME,OAAOE,UAOlD,0BAAMwB,UAAU,eAAenC,EAAMyD,cCOlCC,MAjBf,SAAuB1D,GACnB,OACI,yBAAKmC,UAAU,cACX,wBAAIc,MAAO,CAACU,QAAS,cAArB,SAA0C3D,EAAM4D,OAChD,wDACA,2BAAOP,KAAK,QAAQC,IAAI,IAAIC,IAAI,KAAK5C,MAAOX,EAAMyD,WAAYtB,UAAU,SAASzB,KAAK,aAAa0B,SAAUpC,EAAMQ,kBACnH,0BAAM2B,UAAU,eAAenC,EAAMyD,YACrC,6BACA,iEACA,2BAAOJ,KAAK,QAAQC,IAAI,IAAIC,IAAKvD,EAAM6D,SAAUlD,MAAOX,EAAM8D,WAAY3B,UAAU,SAASzB,KAAK,aAAa0B,SAAUpC,EAAMQ,kBAC/H,0BAAM2B,UAAU,eAAenC,EAAM8D,YACrC,yEACA,2BAAOT,KAAK,WAAWU,QAAS/D,EAAMgE,gBAAiBtD,KAAK,kBAAkB0B,SAAUpC,EAAMQ,oBCwD3FyD,MAlEf,SAA6BjE,GACzB,IAAIkE,EAASlE,EAAMI,SAAWJ,EAAM8D,WAAW,GAC3CK,EAASD,EAASlE,EAAM8D,WAAW,GACnCM,EAASD,EAASnE,EAAM8D,WAAW,GAEnCO,EAAe,KACfC,EAAe,KACfC,EAAgB,GAChBC,EAAgB,GAChBC,EAAgB,GAuCpB,OArCIP,EAASlE,EAAM8D,WAAW,IACVO,EAAZH,EAAS,EAAkB,QAAUA,EACrB,KAEpBK,EAAgB,CAACG,QAAS,UAE1BH,EAAgB,CAACG,QAAS,QAG1BP,EAASnE,EAAM8D,WAAW,IACVQ,EAAZH,EAAS,EAAkB,QAAUA,EACrB,KAEpBK,EAAgB,CAACE,QAAS,SACtBP,EAAS,IAAGA,EAAS,IAEzBK,EAAgB,CAACE,QAAS,QAI1BD,EADAL,EAAS,EACO,CAACM,QAAS,SAEV,CAACA,QAAS,QAgB1B,yBAAKvC,UAAU,sBACX,kBAAC,EAAD,CAAeyB,MAAM,IAAIH,WAAYzD,EAAMyD,WAAW,GAAIK,WAAY9D,EAAM8D,WAAW,GAAIE,gBAAiBhE,EAAMgE,gBAAgB,GAAIH,SAAU7D,EAAMI,SAAUI,gBAdxK,SAAuBD,GACnBP,EAAMQ,gBAAgBD,EAAME,OAAOC,KAAO,IAAKH,EAAME,OAAOE,UAcxD,kBAAC,EAAD,CAAeiD,MAAM,IAAIH,WAAYzD,EAAMyD,WAAW,GAAIK,WAAY9D,EAAM8D,WAAW,GAAIE,gBAAiBhE,EAAMgE,gBAAgB,GAAIH,SAAU7D,EAAMI,SAAUI,gBAXxK,SAAuBD,GACnBP,EAAMQ,gBAAgBD,EAAME,OAAOC,KAAO,IAAKH,EAAME,OAAOE,UAWxD,kBAAC,EAAD,CAAeiD,MAAM,IAAIH,WAAYzD,EAAMyD,WAAW,GAAIK,WAAY9D,EAAM8D,WAAW,GAAIE,gBAAiBhE,EAAMgE,gBAAgB,GAAIH,SAAU7D,EAAMI,SAAUI,gBARxK,SAAuBD,GACnBP,EAAMQ,gBAAgBD,EAAME,OAAOC,KAAO,IAAKH,EAAME,OAAOE,UAQxD,yBAAKwB,UAAU,UAAUc,MAAOsB,GAC5B,uCADJ,IACqBF,EADrB,oCAGA,yBAAKlC,UAAU,UAAUc,MAAOuB,GAC5B,uCADJ,IACqBF,EADrB,oCAGA,yBAAKnC,UAAU,UAAUc,MAAOwB,GAC5B,uCADJ,cAC+BL,EAD/B,qCCKGO,MA9Df,SAAuB3E,GAKnB,IAAI4E,EACAC,EA0CJ,MAxCwB,UAApB7E,EAAM8E,WACNF,EAAgB,kBAAC,EAAD,CACZpE,gBAAiBR,EAAMQ,kBAE3BqE,EAAmB,yBAAK1C,UAAU,eAAf,gLAMM,UAApBnC,EAAM8E,WACXF,EAAgB,kBAAC,EAAD,CACZnB,WAAYzD,EAAMyD,WAAW,GAC7BjD,gBAAiBR,EAAMQ,kBAE3BqE,EAAmB,yBAAK1C,UAAU,eAAf,qMAMM,eAApBnC,EAAM8E,YACXF,EAAgB,kBAAC,EAAD,CACZnB,WAAYzD,EAAMyD,WAClBK,WAAY9D,EAAM8D,WAClBE,gBAAiBhE,EAAMgE,gBACvB5D,SAAUJ,EAAMI,SAChBI,gBAAiBR,EAAMQ,kBAE3BqE,EAAmB,yBAAK1C,UAAU,eAAf,8dAYnB,yBAAKA,UAAU,aACX,wCACA,4BAAQzB,KAAK,YAAYC,MAAOX,EAAM8E,UAAW1C,SAlDzD,SAAsB7B,GAClBP,EAAMQ,gBAAgBD,EAAME,OAAOC,KAAMH,EAAME,OAAOE,SAkD9C,4BAAQA,MAAM,SAAd,kBACA,4BAAQA,MAAM,SAAd,gBACA,4BAAQA,MAAM,cAAd,oBAEHiE,EACAC,ICjBEE,MAzCf,SAAyB/E,GACrB,SAASM,EAAaC,GAClBP,EAAMQ,gBAAgBD,EAAME,OAAOC,KAAMH,EAAME,OAAOE,OAG1D,IAAIiE,EAUA,MARoB,UAApB5E,EAAM8E,UAAuBF,EAAgB,kBAAC,EAAD,CACzCpE,gBAAiBR,EAAMQ,kBAEF,UAApBR,EAAM8E,YAAuBF,EAAgB,kBAAC,EAAD,CAC9CnB,WAAYzD,EAAMyD,WAAW,GAC7BjD,gBAAiBR,EAAMQ,mBAU3B,yBAAK2B,UAAU,aACX,wCACA,4BAAQzB,KAAK,YAAYC,MAAOX,EAAM8E,UAAW1C,SAAU9B,GACvD,4BAAQK,MAAM,SAAd,kBACA,4BAAQA,MAAM,SAAd,iBAEJ,6CACA,4BAAQD,KAAK,iBAAiBC,MAAOX,EAAMgF,eAAgB5C,SAAU9B,GACjE,4BAAQK,MAAM,OAAd,iBACA,4BAAQA,MAAM,UAAd,WACA,4BAAQA,MAAM,QAAd,mBAEJ,sCACA,2BAAOD,KAAK,UAAU2C,KAAK,SAAS1C,MAAOX,EAAMiF,QAAS3B,IAAI,IAAIlB,SAAU9B,IAC3EsE,ICMEM,MAzCf,SAAkBlF,GAKd,IAAM4E,EAAmC,eAAnB5E,EAAM4C,SACxB,kBAAC,EAAD,CACIkC,UAAW9E,EAAM8E,UACjBrB,WAAYzD,EAAMyD,WAClBK,WAAY9D,EAAM8D,WAClBE,gBAAiBhE,EAAMgE,gBACvB5D,SAAUJ,EAAMI,SAChBI,gBAAiBR,EAAMQ,kBAE3B,kBAAC,EAAD,CACIsE,UAAW9E,EAAM8E,UACjBE,eAAgBhF,EAAMgF,eACtBC,QAASjF,EAAMiF,QACfxB,WAAYzD,EAAMyD,WAClBK,WAAY9D,EAAM8D,WAClB1D,SAAUJ,EAAMI,SAChBI,gBAAiBR,EAAMQ,kBAGzB2E,EAASnF,EAAMoF,MACrB,4BAAQjD,UAAU,eAAee,QAxBjC,SAAqB3C,GACjBP,EAAMQ,gBAAgB,YAAY,KAuBtC,SACA,4BAAQ2B,UAAU,kBAAlB,cAEA,OACI,yBAAKA,UAAU,YACX,kBAAC,EAAD,CAAcS,SAAU5C,EAAM4C,SAAUpC,gBAAiBR,EAAMQ,kBAC/D,6CACA,4BAAKR,EAAM4C,UACVgC,EACAO,ICuKEE,MA7Mf,SAAkBrF,GAAQ,IACdsF,EAA0CtF,EAA1CsF,SAAUjF,EAAgCL,EAAhCK,SAAUkF,EAAsBvF,EAAtBuF,kBAExBC,EAAa,EACbC,EAAa,EACbC,EAAa,EACbC,EAAa,EACXC,EAAO,GACPC,EAAQ,GACRC,EAAS,GACTC,EAAU,GACVC,EAAY,GACZC,EAAO,GACPC,EAAO,GACPC,EAAQ,GACRC,EAAa,GACbC,EAAY,GACZ9F,EAAQ,GACR+F,EAAQ,GACRC,EAAQ,GA8Bd,SAASC,EAAgBjG,GACrB,IAAMkG,EAAYpG,EAASc,QAAO,SAAAQ,GAAI,OAAIA,EAAK+E,OAASnG,EAAME,OAAOkG,MAErE,GAAIF,GAAaA,EAAUjF,OAAS,EAAG,CACnC,IAAMoF,EAAW,0BAA4BH,EAAU,GAAGG,SAE1DrB,EAAkBqB,EAAU,UAIpC,SAASC,EAAiBtG,GACtB,IAAMkG,EAAYpG,EAASc,QAAO,SAAAQ,GAAI,OAAIA,EAAK+E,OAASnG,EAAME,OAAOkG,MAErE,GAAIF,GAAaA,EAAUjF,OAAS,EAAG,CACnC,IAAMoF,EAAW,0BAA4BH,EAAU,GAAGG,SAE1DrB,EAAkBqB,EAAU,SAIpC,SAASE,EAAYvG,GACjBgF,EAAkB,KAAM,QAjD5BD,EAASyB,SAAQ,SAAApF,GACU,UAAnBA,EAAKqF,WACLzG,EAAM0G,KAAKtF,GACX8D,GAAc9D,EAAKuF,OAEK,UAAnBvF,EAAKqF,WACVV,EAAMW,KAAKtF,GACX+D,GAAc/D,EAAKuF,OAEK,UAAnBvF,EAAKqF,WACNrF,EAAK0E,UAAWA,EAAUY,KAAKtF,GACZ,SAAdA,EAAKwF,KAAiBvB,EAAKqB,KAAKtF,GAClB,YAAdA,EAAKwF,KAAoBtB,EAAMoB,KAAKtF,GACtB,WAAdA,EAAKwF,KAAmBrB,EAAOmB,KAAKtF,GACtB,cAAdA,EAAKwF,KAAsBpB,EAAQkB,KAAKtF,GAC1B,cAAdA,EAAKwF,KAAsBnB,EAAUiB,KAAKtF,GAC5B,SAAdA,EAAKwF,KAAiBlB,EAAKgB,KAAKtF,GAClB,SAAdA,EAAKwF,KAAiBjB,EAAKe,KAAKtF,GAClB,UAAdA,EAAKwF,KAAkBhB,EAAMc,KAAKtF,GACtCyE,EAAWa,KAAKtF,GACrB6D,GAAc7D,EAAKuF,QAGnBX,EAAMU,KAAKtF,GACXgE,GAAchE,EAAKuF,UA4B3B,IAAME,EAAc5B,EAAa,EAAI,uCAAaA,EAAb,KAAiC,KAEhE6B,EAAazB,EAAKpE,OAAS,EAAI,uBAAGW,UAAU,eAAb,QAAsC,KACrEmF,EAAe1B,EAAK2B,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9G,KAAO+G,EAAE/G,KAAQ,GAAK,KAAGgB,KAAI,SAACC,EAAMC,GAC5E,IAAM8F,EAAW/F,EAAKuF,MAAQ,EAAI,KAAOvF,EAAKuF,MAAQ,KAEtD,OAAO,uBAAGP,GAAIhF,EAAKP,IAAKuG,eAAgBnB,EAAiBoB,eAAgBd,EAAa1F,IAAKQ,GAAQD,EAAKjB,KAAMgH,MAG5GG,EAAchC,EAAMrE,OAAS,EAAI,uBAAGW,UAAU,eAAb,WAAyC,KAC1E2F,EAAgBjC,EAAM0B,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9G,KAAO+G,EAAE/G,KAAQ,GAAK,KAAGgB,KAAI,SAACC,EAAMC,GAC9E,IAAM8F,EAAW/F,EAAKuF,MAAQ,EAAI,KAAOvF,EAAKuF,MAAQ,KAEtD,OAAO,uBAAGP,GAAIhF,EAAKP,IAAKuG,eAAgBnB,EAAiBoB,eAAgBd,EAAa1F,IAAKQ,GAAQD,EAAKjB,KAAMgH,MAG5GK,EAAejC,EAAOtE,OAAS,EAAI,uBAAGW,UAAU,eAAb,UAAwC,KAC3E6F,EAAiBlC,EAAOyB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9G,KAAO+G,EAAE/G,KAAQ,GAAK,KAAGgB,KAAI,SAACC,EAAMC,GAChF,IAAM8F,EAAW/F,EAAKuF,MAAQ,EAAI,KAAOvF,EAAKuF,MAAQ,KAEtD,OAAO,uBAAGP,GAAIhF,EAAKP,IAAKuG,eAAgBnB,EAAiBoB,eAAgBd,EAAa1F,IAAKQ,GAAQD,EAAKjB,KAAMgH,MAG5GO,EAAgBlC,EAAQvE,OAAS,EAAI,uBAAGW,UAAU,eAAb,aAA2C,KAChF+F,EAAkBnC,EAAQwB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9G,KAAO+G,EAAE/G,KAAQ,GAAK,KAAGgB,KAAI,SAACC,EAAMC,GAClF,IAAM8F,EAAW/F,EAAKuF,MAAQ,EAAI,KAAOvF,EAAKuF,MAAQ,KAEtD,OAAO,uBAAGP,GAAIhF,EAAKP,IAAKuG,eAAgBnB,EAAiBoB,eAAgBd,EAAa1F,IAAKQ,GAAQD,EAAKjB,KAAMgH,MAG5GS,EAAkBnC,EAAUxE,OAAS,EAAI,uBAAGW,UAAU,eAAb,aAA2C,KACpFiG,EAAoBpC,EAAUuB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9G,KAAO+G,EAAE/G,KAAQ,GAAK,KAAGgB,KAAI,SAACC,EAAMC,GACtF,IAAM8F,EAAW/F,EAAKuF,MAAQ,EAAI,KAAOvF,EAAKuF,MAAQ,KAEtD,OAAO,uBAAGP,GAAIhF,EAAKP,IAAKuG,eAAgBnB,EAAiBoB,eAAgBd,EAAa1F,IAAKQ,GAAQD,EAAKjB,KAAMgH,MAG5GW,EAAapC,EAAKzE,OAAS,EAAI,uBAAGW,UAAU,eAAb,QAAsC,KACrEmG,EAAerC,EAAKsB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9G,KAAO+G,EAAE/G,KAAQ,GAAK,KAAGgB,KAAI,SAACC,EAAMC,GAC5E,IAAM8F,EAAW/F,EAAKuF,MAAQ,EAAI,KAAOvF,EAAKuF,MAAQ,KAEtD,OAAO,uBAAGP,GAAIhF,EAAKP,IAAKuG,eAAgBnB,EAAiBoB,eAAgBd,EAAa1F,IAAKQ,GAAQD,EAAKjB,KAAMgH,MAG5Ga,EAAarC,EAAK1E,OAAS,EAAI,uBAAGW,UAAU,eAAb,QAAsC,KACrEqG,EAAetC,EAAKqB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9G,KAAO+G,EAAE/G,KAAQ,GAAK,KAAGgB,KAAI,SAACC,EAAMC,GAC5E,IAAM8F,EAAW/F,EAAKuF,MAAQ,EAAI,KAAOvF,EAAKuF,MAAQ,KAEtD,OAAO,uBAAGP,GAAIhF,EAAKP,IAAKuG,eAAgBnB,EAAiBoB,eAAgBd,EAAa1F,IAAKQ,GAAQD,EAAKjB,KAAMgH,MAG5Ge,EAActC,EAAM3E,OAAS,EAAI,uBAAGW,UAAU,eAAb,SAAuC,KACxEuG,EAAgBvC,EAAMoB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9G,KAAO+G,EAAE/G,KAAQ,GAAK,KAAGgB,KAAI,SAACC,EAAMC,GAC9E,IAAM8F,EAAW/F,EAAKuF,MAAQ,EAAI,KAAOvF,EAAKuF,MAAQ,KAEtD,OAAO,uBAAGP,GAAIhF,EAAKP,IAAKuG,eAAgBnB,EAAiBoB,eAAgBd,EAAa1F,IAAKQ,GAAQD,EAAKjB,KAAMgH,MAG5GiB,EAAmBvC,EAAW5E,OAAS,EAAI,uBAAGW,UAAU,eAAb,SAAuC,KAClFyG,EAAqBxC,EAAWmB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9G,KAAO+G,EAAE/G,KAAQ,GAAK,KAAGgB,KAAI,SAACC,EAAMC,GACxF,IAAM8F,EAAW/F,EAAKuF,MAAQ,EAAI,KAAOvF,EAAKuF,MAAQ,KAEtD,OAAO,uBAAGP,GAAIhF,EAAKP,IAAKuG,eAAgBnB,EAAiBoB,eAAgBd,EAAa1F,IAAKQ,GAAQD,EAAKjB,KAAMgH,MAG5GmB,EAAkBxC,EAAU7E,OAAS,EAAI,uBAAGW,UAAU,eAAb,aAA2C,KACpF2G,EAAoBzC,EAAUkB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9G,KAAO+G,EAAE/G,KAAQ,GAAK,KAAGgB,KAAI,SAACC,EAAMC,GACtF,IAAM8F,EAAW/F,EAAKuF,MAAQ,EAAI,KAAOvF,EAAKuF,MAAQ,KAEtD,OAAO,uBAAGP,GAAIhF,EAAKP,IAAKuG,eAAgBnB,EAAiBoB,eAAgBd,EAAa1F,IAAKQ,GAAQD,EAAKjB,KAAMgH,MAG5GqB,EAActD,EAAa,EAAI,uCAAaA,EAAb,KAAiC,KAChEuD,EAAgBzI,EAAMgH,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9G,KAAO+G,EAAE/G,KAAQ,GAAK,KAAGgB,KAAI,SAACC,EAAMC,GAC9E,IAAM8F,EAAW/F,EAAKuF,MAAQ,EAAI,KAAOvF,EAAKuF,MAAQ,KACtD,OAAO,uBAAGP,GAAIhF,EAAKP,IAAKuG,eAAgBd,EAAkBe,eAAgBd,EAAa1F,IAAKQ,GAAQD,EAAKjB,KAAMgH,MAG7GuB,EAAcvD,EAAa,EAAI,uCAAaA,EAAb,KAAiC,KAChEwD,EAAgB5C,EAAMiB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9G,KAAO+G,EAAE/G,KAAQ,GAAK,KAAGgB,KAAI,SAACC,EAAMC,GAC9E,IAAM8F,EAAW/F,EAAKuF,MAAQ,EAAI,KAAOvF,EAAKuF,MAAQ,KAEtD,OAAO,uBAAGP,GAAIhF,EAAKP,IAAKuG,eAAgBd,EAAkBe,eAAgBd,EAAa1F,IAAKQ,GAAQD,EAAKjB,KAAMgH,MAG7GyB,EAAcxD,EAAa,EAAI,sCAAYA,EAAZ,KAAgC,KAC/DyD,EAAgB7C,EAAMgB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE9G,KAAO+G,EAAE/G,KAAQ,GAAK,KAAGgB,KAAI,SAACC,EAAMC,GAC9E,IAAM8F,EAAW/F,EAAKuF,MAAQ,EAAI,KAAOvF,EAAKuF,MAAQ,KAEtD,OAAO,uBAAGP,GAAIhF,EAAKP,IAAKuG,eAAgBd,EAAkBe,eAAgBd,EAAa1F,IAAKQ,GAAQD,EAAKjB,KAAMgH,MAGnH,OACI,yBAAKvF,UAAU,YACX,wBAAIc,MAAO,CAACoG,aAAc,UAA1B,aACA,yBAAKlH,UAAU,iBACX,yBAAKA,UAAU,QACViF,EACAC,EACAC,EACAO,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEL,yBAAK3G,UAAU,QACV4G,EACAC,EACAC,EACAC,EACAC,EACAC,MCjKNE,MArCf,SAAmBtJ,GAAQ,IACfyD,EAAkGzD,EAAlGyD,WAAY8F,EAAsFvJ,EAAtFuJ,UAAWC,EAA2ExJ,EAA3EwJ,UAAW1E,EAAgE9E,EAAhE8E,UAAWlB,EAAqD5D,EAArD4D,MAAO0B,EAA8CtF,EAA9CsF,SAAUmE,EAAoCzJ,EAApCyJ,eAAgBC,EAAoB1J,EAApB0J,gBAElFC,EAAU,GAGd,SAASlH,EAAYlC,GACjB,IAAMqB,EAAQ2H,EAAUK,WAAU,SAAAjI,GAC9B,OAAOpB,EAAME,OAAOoJ,IAAIC,SAASnI,EAAKiF,aAGpCmD,EAAcP,EAAUD,EAAU3H,GAAQ+H,GAEhDF,EAAeM,GACfL,EAAgB,IAVpBC,EAAUA,EAAQK,OAAO1E,GAezB,IAFA,IAAI2E,EAAS,GAEJ1I,EAAI,EAAGA,EAAIkC,EAAYlC,IAAK,CACjC,IAAM2I,EAAW,2BAA6BX,EAAUhI,GAAGqF,SAC3DqD,EAAOhD,KAAK,yBAAK9E,UAAU,aAAaf,IAAKG,GAAG,yBAAKY,UAAU,cAAc0H,IAAKK,EAAUC,IAAKZ,EAAUhI,GAAGb,KAAMwC,QAAST,MAGjI,IAAM2H,EAA0B,eAAdtF,EAA6B,YAAclB,EAAQ,KAErE,OACI,yBAAKzB,UAAU,YACX,oCAAUiI,GACV,yBAAKjI,UAAU,mBACV8H,GAEL,0DC4BGI,MAzDf,SAAerK,GAAQ,IACXC,EAAmMD,EAAnMC,aAAcG,EAAqLJ,EAArLI,SAAUwC,EAA2K5C,EAA3K4C,SAAUqC,EAAiKjF,EAAjKiF,QAASxB,EAAwJzD,EAAxJyD,WAAY6G,EAA4ItK,EAA5IsK,cAAexF,EAA6H9E,EAA7H8E,UAAWlB,EAAkH5D,EAAlH4D,MAAO0B,EAA2GtF,EAA3GsF,SAAUiE,EAAiGvJ,EAAjGuJ,UAAWlJ,EAAsFL,EAAtFK,SAAUmJ,EAA4ExJ,EAA5EwJ,UAAWC,EAAiEzJ,EAAjEyJ,eAAgBC,EAAiD1J,EAAjD0J,gBAAiBa,EAAgCvK,EAAhCuK,SAAUhF,EAAsBvF,EAAtBuF,kBAEjLiF,EAAwB,KACxBC,EAA4B,KAEhC,GAAIpK,EAAU,CACV,IAAMW,EAAiBC,OAAOC,KAAKb,GAClCc,QAAO,SAAAC,GACJ,OAAQf,EAASe,GAAKV,OAAST,KAChC,GAEG2G,EAAW,2BAA6BvG,EAASW,GAAgB4F,SACjE8D,EAAe,2BAA6BrK,EAASW,GAAgB0J,aAC3EF,EAAwB,yBAAKrI,UAAU,qBAAqB0H,IAAKjD,EAAUuD,IAAKnK,EAAMC,eACtFwK,EAA4B,yBAAKtI,UAAU,qBAAqB0H,IAAKa,EAAcP,IAAKnK,EAAMC,aAAe,YAGjH,IAAI0K,EAAe,KAEfpB,EAAU/H,OAAS,IACnBmJ,EAAe,kBAAC,EAAD,CACXlH,WAAYA,EACZ+F,UAAWA,EACX5F,MAAOA,EACPkB,UAAWA,EACXyE,UAAWA,EACXjE,SAAUA,EACVmE,eAAgBA,EAChBC,gBAAiBA,KAIzB,IAAMkB,EAAwB,eAAbhI,EACb,2BAAG,sCAAe0H,EAAlB,IAAkClK,GAClC,2BAAG,mCAAYkK,EAAf,IAA+BrF,GAEnC,OACI,6BACI,yBAAK9C,UAAU,YACX,4BAAKlC,GACL,6BACCuK,EACAC,EACAG,GAEJD,EACD,kBAAC,EAAD,CACIrF,SAAUA,EACVjF,SAAUA,EACVkF,kBAAmBA,IAEvB,4BAAQrC,QAASqH,GAAjB,aCmCGM,MAnFf,SAAa7K,GACT,IAAI8K,EAAW,KADC,EAG2BC,mBAAS,MAHpC,mBAGTC,EAHS,KAGKC,EAHL,OAIiCF,mBAAS,SAJ1C,mBAITG,EAJS,KAIQC,EAJR,KAWZC,EAAU,KA6Dd,OA3DIJ,IACAI,EAAU,yBAAKjJ,UAAW,gBAAgB+I,GAAiB,yBAAKrB,IAAKmB,EAAcb,IAAI,OAIvFW,EADA9K,EAAMqL,WAEF,6CAICrL,EAAMsL,SAEP,kBAAC,EAAD,CACIxG,UAAW9E,EAAM8E,UACjBlC,SAAU5C,EAAM4C,SAChB3C,aAAcD,EAAMC,aACpBC,eAAgBF,EAAME,eACtBE,SAAUJ,EAAMI,SAChB6E,QAASjF,EAAMiF,QACfxB,WAAYzD,EAAMyD,WAAWzD,EAAM4D,MAAM,GACzCE,WAAY9D,EAAM8D,WAAW9D,EAAM4D,MAAM,GACzC0G,cAAetK,EAAMsK,cACrB1G,MAAO5D,EAAM4D,MACb0B,SAAUtF,EAAMsF,SAChBjF,SAAUL,EAAMK,SAChBkJ,UAAWvJ,EAAMuJ,UACjBC,UAAWxJ,EAAMwJ,UACjBC,eAAgBzJ,EAAMyJ,eACtBC,gBAAiB1J,EAAM0J,gBACvBnE,kBApCZ,SAA2BgG,EAAOC,GAC9BP,EAAmBM,GACnBJ,EAAsBK,IAmCdjB,SAAUvK,EAAMuK,WAKxB,6BACI,kBAAC,EAAD,CACItK,aAAcD,EAAMC,aACpBC,eAAgBF,EAAME,eACtBC,iBAAkBH,EAAMG,iBACxBC,SAAUJ,EAAMI,SAChBC,SAAUL,EAAMK,SAChBG,gBAAiBR,EAAMM,eAE3B,kBAAC,EAAD,CACIsC,SAAU5C,EAAM4C,SAChBkC,UAAW9E,EAAM8E,UACjBE,eAAgBhF,EAAMgF,eACtBC,QAASjF,EAAMiF,QACfxB,WAAYzD,EAAMyD,WAClBK,WAAY9D,EAAM8D,WAClBE,gBAAiBhE,EAAMgE,gBACvB5D,SAAUJ,EAAMI,SAChBgF,MAAOpF,EAAMoF,MACb5E,gBAAiBR,EAAMM,gBAM/B,yBAAK6B,UAAU,OACX,4BAAQA,UAAU,cAAlB,eAGC2I,EACAM,ICrEEK,MAlBf,SAAkBpL,EAAUkJ,GACxB,IAAImC,GAAQ,EACRC,EAAa,KAEjB,GAAuB,GAAnBtL,EAASmB,OAAa,OAAO,KAEjC,IANmC,iBAS/B,IAAMoK,GAFND,EAAatL,EAASwL,KAAKC,MAAMD,KAAKE,SAAW1L,EAASmB,UAE5BkF,MACP6C,GAAaA,EAAU/H,OAAS,EAAK+H,EAAUK,WAAU,SAAAjI,GAAI,OAAIA,EAAK+E,OAASkF,MAAe,GAEjG,IAAGF,GAAQ,KAN3BA,GAAQ,IAShB,OAAOC,GCiWIK,MA/Sf,SAAqBhM,GAAQ,IACjBC,EAAkGD,EAAlGC,aAAcC,EAAoFF,EAApFE,eAAgBG,EAAoEL,EAApEK,SAAUiF,EAA0DtF,EAA1DsF,SAAUlF,EAAgDJ,EAAhDI,SAAU6L,EAAsCjM,EAAtCiM,QAASjI,EAA6BhE,EAA7BgE,gBAAiBiB,EAAYjF,EAAZiF,QAExFiH,EAAY,CAAE,KAAQ,EACvB,IAAO,EAAG,IAAO,EAAG,KAAQ,EAAG,KAAQ,EAAG,IAAO,EAAG,IAAO,EAAG,MAAS,EACvE,IAAO,EAAG,KAAQ,EAAG,IAAO,EAAG,KAAQ,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EACrE,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,KAAQ,EAAG,KAAQ,EAAG,KAAQ,EAAG,IAAO,EACtE,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EACnE,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EACnE,OAAU,EAAG,MAAS,EAAG,MAAS,EAClC,MAAU,GAETlL,EAAiBC,OAAOC,KAAKb,GAClCc,QAAO,SAAAC,GACJ,OAAOf,EAASe,GAAKV,OAAST,KAC/B,GAEGoB,EAAchB,EAASW,GAAgBM,aAEvC6K,EAoJN,SAA8BC,EAAMC,GAChC,IAAKD,EAAM,MAAO,GAElB,IAAID,EAAe,GAgBnB,OAdAC,EAAKrF,SAAQ,SAAApF,GAGT,IAFA,IAAI+J,GAAQ,EAEHnK,EAAI,EAAGA,EAAI8K,EAAQ7K,OAAQD,IAAK,CACrC,IAAI8K,EAAQ9K,GAAG+K,MAEKC,EAAe5K,EAAM0K,EAAQ9K,MAEhCmK,GAAQ,GAGxBA,GAAOS,EAAalF,KAAKtF,MAG3BwK,EAvKUK,CAAqBlH,EAAUjE,GAGhDoL,EAAqB,KAEzB,GAAqB,gBAAjBxM,EAAgC,CAChC,IAAMyM,EAAmBpH,EAASnE,QAAO,SAAAQ,GACrC,IAAMgL,EAAahL,EAAKiL,OAExB,SAAID,GAAcA,EAAWE,OAAO,IAAIC,OAAO,UAAW,OAAS,MAMnE1M,EAAW2M,EAAUzH,GAAYyH,EAAUL,IAAqB,KAChED,EAAqB,CAAC,CAClBO,YAAa,GACbC,MAAO,kBAId,GAAqB,eAAjBhN,EAA+B,CAkBpC,IAjBA,IAAMiN,EAAoB,CAAC,WAAY,SAAU,QAAS,SAAU,YAAYxL,KAAI,SAAAyL,GAChF,MAAO,CACHA,QAASA,EACTjG,MAAO6F,EAAUzH,EAASnE,QAAO,SAAAQ,GAC7B,OAAIA,EAAKyL,eAAiBD,GAGtBxL,EAAK0L,gBAAkBF,UAOpC5F,MAAK,SAAC+F,EAAIC,GAAL,OAAYA,EAAGrG,MAAQoG,EAAGpG,SAE9BA,EAAQ,EACH3F,EAAI,EAAGA,EAAI,EAAGA,IACnB2F,GAAS2E,KAAKvI,IAAI,EAAG4J,EAAkB3L,GAAG2F,OAG9C,GAAI9G,EAAW2M,EAAUzH,GAAY4B,GAAS,GAAI,CAI9C,IAHA,IAAMsG,EAAWN,EAAkB,GAAGhG,MAElCuG,EAAqB,GAChBlM,EAAI,EAAGA,EAAI,EAAGA,IACf2L,EAAkB3L,GAAG2F,MAAQ,GAAKgG,EAAkB3L,GAAG2F,OAASsG,GAAUC,EAAmBxG,KAAKiG,EAAkB3L,GAAG4L,SAG/HV,EAAqB,CAAC,CAClBO,YAAa,EACbG,QAASM,KAKrB,IAAIC,EAAW,EACXC,EAAW,EA8Gf,SAASZ,EAAUX,GACf,IAAIlF,EAAQ,EAQZ,OANIkF,GACAA,EAAKrF,SAAQ,SAAApF,GACJA,EAAK0E,YAAWa,GAASvF,EAAKuF,UAIpCA,EAGX,SAAS0G,EAAiBxB,EAAMyB,GAC5B,IAAI3G,EAAQ,EAUZ,OARIkF,GACAA,EAAKrF,SAAQ,SAAApF,GACL4K,EAAe5K,EAAMkM,KACrB3G,GAASvF,EAAKuF,UAKnBA,EAGX,SAASqF,EAAeuB,EAAMD,GAE1B,IAAIE,GAAQ,EACRZ,GAAU,EACVa,GAAmB,EACnBf,GAAQ,EACRgB,GAAO,EACP5K,GAAO,EACP6K,GAAO,EAaX,GAXoB,oBAAhBL,EAAOnN,OACPsN,GAAmB,EAEfF,EAAKV,eAAiBlN,IACtB8N,GAAmB,GAEnBF,EAAKT,gBAAkBnN,IACvB8N,GAAmB,IAIvBH,EAAOV,QAAS,CAChBA,GAAU,EAEV,IAAK,IAAIgB,EAAI,EAAGA,EAAIN,EAAOV,QAAQ3L,OAAQ2M,IACnCL,EAAKV,eAAiBS,EAAOV,QAAQgB,KACrChB,GAAU,GAEVW,EAAKT,gBAAkBQ,EAAOV,QAAQgB,KACtChB,GAAU,GAKtB,GAAIU,EAAOE,MAAO,CACdA,GAAQ,EAER,IAAMzK,EAAMuK,EAAOE,MAAMzK,IACnBC,EAAMsK,EAAOE,MAAMxK,IAEnB6K,OAAkBC,IAAZP,EAAKQ,GAAmB,EAAIR,EAAKQ,GAEzCF,GAAO9K,GAAO8K,GAAO7K,IAAKwK,GAAQ,GAG1C,GAAIF,EAAOZ,MAAO,CAGdA,GAAQ,EAER,IAAMN,EAAamB,EAAKlB,OAEpBD,GAAcA,EAAWE,OAAO,IAAIC,OAAOe,EAAOZ,MAAO,OAAS,IAClEA,GAAQ,GAGhB,GAAIY,EAAOI,KAAM,CACbA,GAAO,EAEP,IAAMM,EAAWT,EAAKI,KAElBK,GAAYA,EAAS1B,OAAO,IAAIC,OAAO,oBAAsBe,EAAOI,KAAK,GAAK,MAAO,OAAS,IAC9FA,GAAO,GAGf,GAAIJ,EAAOxK,KAAM,CACbA,GAAO,EAEP,IAAMmL,EAAWV,EAAK9G,UAElBwH,GAAYX,EAAOxK,KAAKoL,MAAK,SAAA9M,GAAI,OAAIA,IAAS6M,OAC9CnL,GAAO,GAWf,OARIwK,EAAOK,OACPA,GAAO,EAEHJ,EAAKI,MAAQJ,EAAKI,KAAKrB,OAAO,IAAIC,OAAOe,EAAOK,KAAM,OAAS,IAC/DA,GAAO,IAIRf,GAAWY,GAASd,GAASgB,GAAQ5K,GAAQ2K,GAAoBE,EAG5E,OA3NIjC,IACAyB,EAAW,EACXC,EAAW1I,GAGM5E,EAASc,QAAO,SAAA2M,GACjC,GAAuB,iBAAnBA,EAAK9G,UAA8B,OAAO,EAC9C,GAAuB,UAAnB8G,EAAK9G,UAAuB,OAAO,EACvC,GAAuB,aAAnB8G,EAAK9G,UAA0B,OAAO,EAC1C,GAAuB,UAAnB8G,EAAK9G,UAAuB,OAAO,EACvC,GAAuB,cAAnB8G,EAAK9G,UAA2B,OAAO,EAC3C,GAAI8G,EAAKY,UAAW,OAAO,EAE3B,GAAIZ,EAAKa,aAAc,OAAO,EAE9B,IAAIL,EAAK,EAIT,GAHIR,EAAKQ,KAAIA,EAAKR,EAAKQ,IACnBR,EAAKc,cAAaN,GAAM,GAExBA,EAAKZ,EAAU,OAAO,EAC1B,GAAIY,EAAKX,EAAU,OAAO,EAK1B,GAAIG,EAAKe,cAAgBf,EAAKe,aAAa5O,aAAc,OAAO,EAChE,IAAKiM,EAAU4B,EAAKgB,WAAY,OAAO,EAIvC,IADA,IAAIpD,GAAQ,EACHnK,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IACpC,IAAIF,EAAYE,GAAGyL,YAAnB,CAEA,IAAI+B,GAAc,EAElB,GAAIxC,EAAeuB,EAAMzM,EAAYE,IAGjC,GAFAwN,GAAc,EAEV1N,EAAYE,GAAGyN,IAEfD,GAAc,OAEb,GAAI1N,EAAYE,GAAG+K,MAAO,CAC3B,GAAKtI,EAEc4J,EAAiBzB,EAAc9K,EAAYE,KAE5CF,EAAYE,GAAG+K,QAEzByC,GAAc,QANAA,GAAc,EAYxCA,IAAarD,GAAQ,GAG7B,IAAKA,EAAO,OAAO,EAGnB,IAAIuD,GAAU,EAWd,GATA3J,EAASyB,SAAQ,SAAApF,GACTA,EAAKjB,OAASoN,EAAKpN,MACfiB,EAAKuF,OAAS4G,EAAKoB,aAEnBD,GAAU,MAKlBA,EAAS,OAAO,EAGpB,GAAIxC,EACA,IAAK,IAAIlL,EAAI,EAAGA,EAAIkL,EAAmBjL,OAAQD,IAC3C,IAAKgL,EAAeuB,EAAMrB,EAAmBlL,IACzC,OAAO,EAKnB,OAAO,MCnMA4N,MA/Bf,SAAuBnP,GAAQ,IACnB8D,EAAkD9D,EAAlD8D,WAAY0F,EAAsCxJ,EAAtCwJ,UAAWlE,EAA2BtF,EAA3BsF,SAAUrF,EAAiBD,EAAjBC,aACrC0J,EAAU,GAEdA,EAAUA,EAAQK,OAAO1E,GAIzB,IAFA,IAAIgF,EAAgB,EAEbA,EAAgBxG,GAAY,CAG/B9D,EAAMsF,SAAWqE,EACjB,IAAIyF,EAAepD,EAAYhM,GAEzB8N,EAAOrC,EAAS2D,GAEtBzF,EAAUH,EAAUsE,EAAMnE,GAIrBmE,EAAKzH,WAAWiE,IAEA,gBAAjBrK,GAAmD,eAAjBA,IAClCD,EAAMsF,SAAWqE,EACjByF,EAAepD,EAAYhM,IAInC,OAAO2J,GCXI0F,MAjBf,SAAqBrP,GAQjB,IARyB,IACjByD,EAAezD,EAAfyD,WAGF2L,EAAepD,EAAYhM,GAE7BuJ,EAAY,GAEPhI,EAAI,EAAGA,EAAIkC,EAAYlC,IAAK,CACjC,IAAMuM,EAAOrC,EAAS2D,EAAc7F,GAEpCA,EAAUtC,KAAK6G,GAGnB,OAAOvE,GCsVI+F,MAjWf,WAAyB,IAAD,EACuBvE,mBAAS,gBADhC,mBACb9K,EADa,KACCsP,EADD,OAE2BxE,mBAAS,MAFpC,mBAEb7K,EAFa,KAEGsP,EAFH,OAG+BzE,mBAAS,MAHxC,mBAGb5K,EAHa,KAGKsP,EAHL,OAIe1E,mBAAS,MAJxB,mBAIb3K,EAJa,KAIHsP,EAJG,OAKe3E,mBAAS,cALxB,mBAKbnI,EALa,KAKH+M,EALG,OAMiB5E,mBAAS,SAN1B,mBAMbjG,EANa,KAMF8K,EANE,OAO2B7E,mBAAS,UAPpC,mBAOb/F,EAPa,KAOG6K,EAPH,OAQa9E,mBAAS,GARtB,mBAQb9F,EARa,KAQJ6K,EARI,OASmB/E,mBAAS,CAAC,EAAG,EAAG,IATnC,mBASbtH,EATa,KASDsM,EATC,OAUmBhF,mBAAS,CAAC,GAAI,GAAI,KAVrC,mBAUbjH,EAVa,KAUDkM,EAVC,OAW6BjF,mBAAS,EAAC,GAAM,GAAM,IAXnD,mBAWb/G,EAXa,KAWIiM,EAXJ,OAYelF,oBAAS,GAZxB,mBAYbO,EAZa,KAYH4E,EAZG,QAaenF,oBAAS,GAbxB,qBAaboF,GAba,MAaHC,GAbG,SAcerF,oBAAS,GAdxB,qBAcbsF,GAda,MAcHC,GAdG,SAeevF,mBAAS,MAfxB,qBAeb1K,GAfa,MAeHkQ,GAfG,SAgBmBxF,oBAAS,GAhB5B,qBAgBbM,GAhBa,MAgBDmF,GAhBC,SAiBezF,mBAAS,IAjBxB,qBAiBbzF,GAjBa,MAiBHmE,GAjBG,SAkBiBsB,mBAAS,IAlB1B,qBAkBbxB,GAlBa,MAkBFG,GAlBE,SAmBSqB,mBAAS,GAnBlB,qBAmBbnH,GAnBa,MAmBN6M,GAnBM,SAoBe1F,oBAAS,GApBxB,qBAoBb2F,GApBa,MAoBHC,GApBG,MAuBhBC,GAAqB,EACrBC,GAAuB,EAE3B,GAAIvL,GACA,IAAK,IAAI3D,MAAQ2D,GAERA,GAAS3D,IAAM0E,YAAWuK,IAAsBtL,GAAS3D,IAAMuF,OACpE2J,IAAwBvL,GAAS3D,IAAM2M,GAAKhJ,GAAS3D,IAAMuF,MAoOnE,SAAS4J,GAAmBlP,EAAOjB,GAC/B,IAAIoQ,EAAW,IACfA,EAAWA,EAAS/G,OAAOvG,IAClB7B,EAAM,GAAKjB,EACpBoP,EAAiBgB,GAGrB,SAASC,GAAmBpP,EAAOjB,GAC/B,IAAIsQ,EAAW,IACfA,EAAWA,EAASjH,OAAOlG,IAClBlC,EAAM,GAAKjB,EACpBqP,EAAiBiB,GAGrB,SAASC,GAAwBtP,EAAOjB,GACpC,IAAIwQ,EAAgB,IACpBA,EAAgBA,EAAcnH,OAAOhG,IACvBpC,EAAM,IAAMoC,EAAgBpC,EAAM,GAChDqO,EAAsBkB,GAG1B,SAAS3H,GAAUsE,EAAM1B,GACrB,IAAIgF,EAAS,GAETtD,EAAKQ,KACL8C,EAAStD,EAAKQ,GACVR,EAAKc,cAAawC,GAAU,IAGhChF,IACsBA,EAAK5K,OAAS,EAAI4K,EAAKxC,WAAU,SAAAjI,GAAI,OAAIA,EAAKP,MAAQ0M,EAAKpH,SAAS,IAErE,EACjB0F,EAAK1K,KAAI,SAAAC,GACL,OAAIA,EAAKjB,OAASoN,EAAKpN,MACnBiB,EAAKuF,MAAQvF,EAAKuF,MAAQ,EACnBvF,GAGJA,KAIXyK,EAAKnF,KAAK,CAAEvG,KAAMoN,EAAKpN,KAAMU,IAAK0M,EAAKpH,KAAMM,UAAW8G,EAAK9G,UAAWG,KAAM2G,EAAK3G,KAAMiG,aAAcU,EAAKV,aAAcC,cAAeS,EAAKT,cAAeT,OAAQkB,EAAKlB,OAAQ0B,GAAI8C,EAAQ/K,UAAWyH,EAAKzH,UAAWa,MAAO,IAIpOkF,EAAO,CAAC,CAAE1L,KAAMoN,EAAKpN,KAAMU,IAAK0M,EAAKpH,KAAMM,UAAW8G,EAAK9G,UAAWG,KAAM2G,EAAK3G,KAAMiG,aAAcU,EAAKV,aAAcC,cAAeS,EAAKT,cAAeT,OAAQkB,EAAKlB,OAAQ0B,GAAI8C,EAAQ/K,UAAWyH,EAAKzH,UAAWa,MAAO,IAGlO,OAAOkF,EAlRXiF,qBAAU,kBAGNf,IAAe,QAEfgB,MAAM,8EAELC,MAAK,SAAAC,GACF,OAAOA,EAAIC,UAEdF,MAAK,SAAAC,GACFjB,GAAeiB,GACflB,IAAe,MAElBoB,OAAM,kBAAMlB,IAAiB,QAdL,IAiB7Ba,qBAAU,WACN,GAAI/F,IAAaoF,GAAU,CACvB,IAAMpG,EAA8B,eAAb1H,EAA6BgO,GAAqBC,GACrEc,EAAc,EAElB,GAAiB,eAAb/O,EACA,GAAkB,eAAdkC,EAA4B,CAC5B,GAAIlB,GAAQ,EAAG+N,EAAcvR,OACxB,IAAK,IAAImB,EAAI,EAAGA,EAAIqC,GAAOrC,IAAKoQ,GAAeC,SAAS9N,EAAWvC,GAAI,IAExEoQ,EAAcvR,IAAUuR,EAAcvR,QAG1CuR,EAAcvR,OAKlBuR,EAAc1M,EAGlB,GAAIkL,IACA,GAAkB,UAAdrL,EAAuB,CAEvB,IAAMsH,EAAO+C,EAAc,CACvBlP,aAAcA,EACdC,eAAgBA,EAChBE,SAAUA,EACV0D,WAAY1D,EACZ6E,QAASA,EAAUqF,EACnB2B,QAAuB,YAAbrJ,EACV0C,SAAUA,GACVjF,SAAUA,GACVmJ,UAAWA,KAGfC,GAAe2C,GACfgE,IAAe,GACfO,IAAe,QAEd,GAAIrG,EAAgBqH,EACrB,GAA2B,GAAvBlO,EAAWG,GAAM,GAAS,CAC1B,IAAMwI,EAAO+C,EAAc,CACvBlP,aAAcA,EACdC,eAAgBA,EAChBE,SAAUA,EACV0D,WAAY6N,EAAcrH,EAC1BrF,QAASA,EAAUqF,EACnB2B,QAAuB,YAAbrJ,EACV0C,SAAUA,GACVjF,SAAUA,GACVmJ,UAAWA,KAGfC,GAAe2C,GACfqE,GAAY7M,GAAQ,OAEnB,CACD,IAAMiO,EAAOxC,EAAY,CACrBpP,aAAcA,EACdC,eAAgBA,EAChBE,SAAUA,EACVqD,WAAYA,EAAWG,GAAM,GAC7BI,gBAAiBA,EAAgBJ,GAAM,GACvCqB,QAASA,EAAUqF,EACnB2B,QAAuB,YAAbrJ,EACV0C,SAAUA,GACVjF,SAAUA,GACVmJ,UAAWA,KAGfE,GAAgBmI,GAChBzB,IAAe,SAKvB,GAAI7G,GAAU/H,OAAS,EACnB,GAAkB,UAAdsD,EACA,GAAIwF,EAAgBqH,EAAa,CAC7B,IAAME,EAAOxC,EAAY,CACrBpP,aAAcA,EACdC,eAAgBA,EAChBE,SAAUA,EACVqD,WAAYA,EAAWG,GAAM,GAC7BI,gBAAiBA,EAAgBJ,GAAM,GACvCqB,QAASA,EAAUqF,EACnB2B,QAAuB,YAAbrJ,EACV0C,SAAUA,GACVjF,SAAUA,GACVmJ,UAAWA,KAGfE,GAAgBmI,QAGhBlB,IAAe,QAInB,GAAIrG,EAAgBqH,EAAa,CAC7B,IAAME,EAAOxC,EAAY,CACrBpP,aAAcA,EACdC,eAAgBA,EAChBE,SAAUA,EACVqD,WAAYA,EAAWG,GAAM,GAC7BI,gBAAiBA,EAAgBJ,GAAM,GACvCqB,QAASA,EAAUqF,EACnB2B,QAAuB,YAAbrJ,EACV0C,SAAUA,GACVjF,SAAUA,GACVmJ,UAAWA,KAGfE,GAAgBmI,QAGhB,GAAIjO,IAAS,EAAG,CACZ,GAAI0G,EAAgBlK,EAAU,CAC1B,IAAMgM,EAAO+C,EAAc,CACvBlP,aAAcA,EACdC,eAAgBA,EAChBE,SAAUA,EACV0D,WAAY1D,EAAWkK,EACvBrF,QAASA,EAAUqF,EACnB2B,QAAuB,YAAbrJ,EACV0C,SAAUA,GACVjF,SAAUA,GACVmJ,UAAWA,KAGfC,GAAe2C,GAGnBuE,IAAe,QAGfF,GAAY7M,GAAQ,GACpBwM,IAAe,MAOxC,CAAC9E,EAAUoF,GAAUP,GAAUrL,EAAW8L,GAAoBC,GAAsBzQ,EAAUH,EAAcqF,GAAUjF,GAAUoD,EAAYO,EAAiBJ,GAAOE,EAAYyF,GAAW3G,EAAUqC,IA6HxM,IAAMG,GAAQ/E,KAAagQ,KAAahF,GAExC,OACI,kBAAC,EAAD,CACApL,aAAcA,EACdC,eAAgBA,EAChBC,iBAAkBA,EAClBC,SAAUA,EACVwC,SAAUA,EACVkC,UAAWA,EACXE,eAAgBA,EAChBC,QAASA,EACTxB,WAAYA,EACZK,WAAYA,EACZE,gBAAiBA,EACjBsG,cAA4B,eAAb1H,EAA4BgO,GAAqBC,GAChEzL,MAAOA,GACPkG,SAAUA,EACVD,WAAYA,GACZzH,MAAOA,GACP0B,SAAUA,GACViE,UAAWA,GACXlJ,SAAUA,GACVC,aAlJJ,SAAsBI,EAAMC,GACxB,GAAa,iBAATD,GAGA,GAFA6O,EAAmB5O,GAEfN,KAAaF,EAAkB,CAC/B,IAAMa,EAAiBC,OAAOC,KAAKb,IAClCc,QAAO,SAAAC,GACJ,OAAQf,GAASe,GAAKV,OAASC,KAChC,GAEH+O,EAAerP,GAASW,GAAgB8Q,kBAAkBC,MAE1D,IAAMC,EAAe3R,GAASW,GAAgBM,aAAaH,QAAO,SAAAQ,GAAI,MAAkB,oBAAdA,EAAKjB,QAE3EsR,EAAaxQ,OAAS,GACtBgO,EAAqBwC,EAAa,GAAGvQ,eAAe,UAI3D,GAAa,mBAATf,EAA2B8O,EAAqB7O,QACpD,GAAa,qBAATD,EACL+O,EAAuB9O,GACvB+O,EAAe/O,QAEd,GAAa,aAATD,EAAqBiP,EAAehP,QACxC,GAAa,cAATD,EAAsBkP,EAAgBjP,QAC1C,GAAa,mBAATD,EAA2BmP,EAAqBlP,QACpD,GAAa,YAATD,EAAoBoP,EAAcnP,QACtC,GAAa,gBAATD,EAAwBoQ,GAAmB,EAAGnQ,QAClD,GAAa,gBAATD,EAAwBoQ,GAAmB,EAAGnQ,QAClD,GAAa,gBAATD,EAAwBoQ,GAAmB,EAAGnQ,QAClD,GAAa,gBAATD,EAAwBsQ,GAAmB,EAAGrQ,QAClD,GAAa,gBAATD,EAAwBsQ,GAAmB,EAAGrQ,QAClD,GAAa,gBAATD,EAAwBsQ,GAAmB,EAAGrQ,QAClD,GAAa,qBAATD,EAA6BwQ,GAAwB,EAAGvQ,QAC5D,GAAa,qBAATD,EAA6BwQ,GAAwB,EAAGvQ,QAC5D,GAAa,qBAATD,EAA6BwQ,GAAwB,EAAGvQ,QAC5D,GAAa,aAATD,EAAqB,CAC1B,GAAa,GAATC,GAAiBN,GAAU,CAC3B,IAAMW,EAAiBC,OAAOC,KAAKb,IAClCc,QAAO,SAAAC,GACJ,OAAQf,GAASe,GAAKV,OAAST,KAChC,GAMH,GAJKE,GACDuP,EAAerP,GAASW,GAAgB8Q,kBAAkBC,OAGzD7R,EAAgB,CACjB,IAAM8R,EAAe3R,GAASW,GAAgBM,aAAaH,QAAO,SAAAQ,GAAI,MAAkB,oBAAdA,EAAKjB,QAE3EsR,EAAaxQ,OAAS,GACtBgO,EAAqBwC,EAAa,GAAGvQ,eAAe,KAIhEyO,EAAevP,KA2FnB6I,UAAWA,GACXC,eAAgBA,GAChBC,gBAAiBA,GACjBa,SArCJ,WACI2F,GAAe,GAEfE,IAAe,GACf3G,GAAe,IACfC,GAAgB,IAChB+G,GAAY,GACZE,IAAe,OC9TvBsB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.0b38bc38.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction InvestigatorSettings(props) {\n    const { investigator, secondaryClass, selectedDeckSize, deckSize, cardData } = props\n\n    function handleChange(event) {\n        props.onChangeSetting(event.target.name, event.target.value)\n    }\n\n    let secondaryFactionList = null\n    let deckSizeList = null\n    let secondaryClassValue = secondaryClass\n    let deckSizeValue = selectedDeckSize ? selectedDeckSize : deckSize\n\n    if (cardData) {\n        const investigatorID = Object.keys(cardData)\n        .filter(key => {\n            return  cardData[key].name === investigator\n        })[0]\n\n        const deckOptions = cardData[investigatorID].deck_options\n\n        for (let i = 0; i < deckOptions.length; i++) {\n            if (deckOptions[i].name === 'Secondary Class')\n            {\n                const list = deckOptions[i].faction_select\n\n                secondaryFactionList = list.map((item, index) => {\n                    return <option value={item} key={index}>\n                        {item[0].toUpperCase() + item.slice(1)}\n                        </option>\n                })\n            }\n            else if (deckOptions[i].name === 'Deck Size')\n            {\n                const list = deckOptions[i].deck_size_select\n\n                deckSizeList = list.map((item, index) => {\n                    return <option value={item} key={index}>\n                        {item}\n                        </option>\n                })\n            }\n        }\n    }\n\n    let skidsName = '\"Skids\" '\n    skidsName = skidsName + \"O'Toole\"\n    const skidsOption = <option value={skidsName}>{skidsName}</option>\n\n    const secondaryClassDiv = secondaryFactionList ?\n        <div>\n            <label className=\"secondaryClass\" value={secondaryClassValue}>Secondary class:</label>\n            <select className=\"secondaryClass\" name=\"secondaryClass\" value={secondaryClassValue} onChange={handleChange}>\n                {secondaryFactionList}\n            </select>\n        </div>\n        :\n        null\n\n        const deckSizeDiv = deckSizeList ?\n        <div>\n            <label className=\"deckSize\" value={deckSizeValue}>Deck size:</label>\n            <select className=\"deckSize\" name=\"selectedDeckSize\" value={deckSizeValue} onChange={handleChange}>\n                {deckSizeList}\n            </select>\n        </div>\n        :\n        null\n\n    return (\n        <div className=\"settings\">\n            <h3>Investigator Options</h3>\n            <label>Investigator:</label>\n            <select name=\"investigator\" value={investigator} onChange={handleChange}>\n                <option value=\"Roland Banks\">Roland Banks</option>\n                <option value=\"Daisy Walker\">Daisy Walker</option>\n                {skidsOption}\n                <option value=\"Agnes Baker\">Agnes Baker</option>\n                <option value=\"Wendy Adams\">Wendy Adams</option>\n                <option value=\"Zoey Samaras\">Zoey Samaras</option>\n                <option value=\"Rex Murphy\">Rex Murphy</option>\n                <option value=\"Jenny Barnes\">Jenny Barnes</option>\n                <option value=\"Jim Culver\">Jim Culver</option>\n                <option value='\"Ashcan\" Pete'>\"Ashcan\" Pete</option>\n                <option value=\"Mark Harrigan\">Mark Harrigan</option>\n                <option value=\"Minh Thi Phan\">Minh Thi Phan</option>\n                <option value=\"Sefina Rousseau\">Sefina Rousseau</option>\n                <option value=\"Akachi Onyele\">Akachi Onyele</option>\n                <option value=\"William Yorick\">William Yorick</option>\n                <option value=\"Lola Hayes\">Lola Hayes</option>\n                <option value=\"Leo Anderson\">Leo Anderson</option>\n                <option value=\"Ursula Downs\">Ursula Downs</option>\n                <option value=\"Finn Edwards\">Finn Edwards</option>\n                <option value=\"Father Mateo\">Father Mateo</option>\n                <option value=\"Calvin Wright\">Calvin Wright</option>\n                <option value=\"Carolyn Fern\">Carolyn Fern</option>\n                <option value=\"Joe Diamond\">Joe Diamond</option>\n                <option value=\"Preston Fairmont\">Preston Fairmont</option>\n                <option value=\"Diana Stanley\">Diana Stanley</option>\n                <option value=\"Rita Young\">Rita Young</option>\n                <option value=\"Marie Lambeau\">Marie Lambeau</option>\n                <option value=\"Tommy Muldoon\">Tommy Muldoon</option>\n                <option value=\"Mandy Thompson\">Mandy Thompson</option>\n                <option value=\"Tony Morgan\">Tony Morgan</option>\n                <option value=\"Luke Robinson\">Luke Robinson</option>\n                <option value=\"Patrice Hathaway\">Patrice Hathaway</option>\n                <option value=\"Norman Withers\">Norman Withers</option>\n                <option value=\"Silas Marsh\">Silas Marsh</option>\n                <option value=\"Dexter Drake\">Dexter Drake</option>\n            </select>\n            {secondaryClassDiv}\n            {deckSizeDiv}\n        </div>\n    )\n}\n\nexport default InvestigatorSettings","import React from 'react'\n\nfunction SettingsType(props) {\n    let style1 = {}\n    let style2 = {}\n\n    if (props.draftTab === 'Build Deck') {\n        style1 = {\n            backgroundColor: \"#ebebeb\"\n        }\n        style2 = {\n            backgroundColor: \"#bababa\",\n            borderLeft: \"black 2px solid\",\n            borderBottom: \"black 2px solid\"\n        }\n    } else {\n        style1 = {\n            backgroundColor: \"#bababa\",\n            borderRight: \"black 2px solid\",\n            borderBottom: \"black 2px solid\"\n        }\n        style2 = {\n            backgroundColor: \"#ebebeb\"\n        }\n    }\n\n    function handleClick(event) {\n        props.onChangeSetting(event.target.attributes.name.nodeValue, event.target.attributes.value.nodeValue)\n    }\n\n    return (\n        <div className='draft-type'>\n            <div className='type-button' name='draftTab' value='Build Deck' style={style1} onClick={handleClick}>\n                Build Deck\n            </div>\n            <div className='type-button' name='draftTab' value='Upgrade' style={style2} onClick={handleClick}>\n                Upgrade\n            </div>\n        </div>\n    )\n}\n\nexport default SettingsType","import React from 'react'\n\nfunction SettingsChaos(props) {\n    return (\n        <div className=\"draftSettingsDraft\">\n        </div>\n    )\n}\n\n/*\n            <label>Weighting: </label>\n            <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value={props.weighting} className=\"slider\" name=\"weighting\" onChange={handleChange}/>\n            <span className=\"sliderValue\">{props.weighting}</span>\n            <br />\n            <div className=\"description\">A weighting of 0 means all cards will be equally\n                likely.  A weighting of 1 means a card will be as \n                prevalent as it was when it was released, based on \n                card type and slot.\n            </div>\n*/\n\nexport default SettingsChaos","import React from 'react'\n\nfunction SettingsDraft(props) {\n\n    function handleChange(event) {\n        props.onChangeSetting(event.target.name, event.target.value)\n    }\n\n    return (\n        <div className=\"draftSettingsDraft\">\n            <label>Cards to select from:</label>\n            <input type=\"range\" min=\"2\" max=\"15\" step=\"1\" value={props.draftCount} className=\"slider\" name=\"draftCount1\" onChange={handleChange}/>\n            <span className=\"sliderValue\">{props.draftCount}</span>\n        </div>\n    )\n}\n\nexport default SettingsDraft","import React from 'react'\n\nfunction SettingsPhase(props) {\n    return (\n        <div className=\"draftPhase\">\n            <h4 style={{padding: \"0 0 5px 0\"}}>Stage {props.phase}</h4>\n            <label>Cards to select from:</label>\n            <input type=\"range\" min=\"1\" max=\"15\" value={props.draftCount} className=\"slider\" name=\"draftCount\" onChange={props.onChangeSetting}/>\n            <span className=\"sliderValue\">{props.draftCount}</span>\n            <br />\n            <label>Cards selected in this stage: </label>\n            <input type=\"range\" min=\"0\" max={props.maxCards} value={props.draftCards} className=\"slider\" name=\"draftCards\" onChange={props.onChangeSetting}/>\n            <span className=\"sliderValue\">{props.draftCards}</span>\n            <label>Include cards with limited deck slots:</label>\n            <input type=\"checkbox\" checked={props.draftUseLimited} name=\"draftUseLimited\" onChange={props.onChangeSetting}/>\n        </div>\n    )\n}\n\nexport default SettingsPhase","import React from 'react'\n\nimport SettingsPhase from './SettingsPhase'\n\nfunction SettingsPhasedDraft(props) {\n    let limit2 = props.deckSize - props.draftCards[0]\n    let limit3 = limit2 - props.draftCards[1]\n    let limit4 = limit3 - props.draftCards[2]\n\n    let warningText2 = null\n    let warningText3 = null\n    let warningStyle2 = {}\n    let warningStyle3 = {}\n    let warningStyle4 = {}\n\n    if (limit2 < props.draftCards[1]) {\n        if (limit2 > 0) warningText2 = \"Only \" + limit2\n        else warningText2 = \"No\"\n\n        warningStyle2 = {display: \"block\"}\n    } else {\n        warningStyle2 = {display: \"none\"}\n    }\n\n    if (limit3 < props.draftCards[2]) {\n        if (limit3 > 0) warningText3 = \"Only \" + limit3\n        else warningText3 = \"No\"\n\n        warningStyle3 = {display: \"block\"}\n        if (limit3 < 0) limit3 = 0;\n    } else {\n        warningStyle3 = {display: \"none\"}\n    }\n\n    if (limit4 > 0) {\n        warningStyle4 = {display: \"block\"}\n    } else {\n        warningStyle4 = {display: \"none\"}\n    }\n\n    function handleChange1(event) {\n        props.onChangeSetting(event.target.name + '1', event.target.value)\n    }\n\n    function handleChange2(event) {\n        props.onChangeSetting(event.target.name + '2', event.target.value)\n    }\n\n    function handleChange3(event) {\n        props.onChangeSetting(event.target.name + '3', event.target.value)\n    }\n\n    return (\n        <div className=\"draftSettingsDraft\">\n            <SettingsPhase phase=\"1\" draftCount={props.draftCount[0]} draftCards={props.draftCards[0]} draftUseLimited={props.draftUseLimited[0]} maxCards={props.deckSize} onChangeSetting={handleChange1} />\n            <SettingsPhase phase=\"2\" draftCount={props.draftCount[1]} draftCards={props.draftCards[1]} draftUseLimited={props.draftUseLimited[1]} maxCards={props.deckSize} onChangeSetting={handleChange2} />\n            <SettingsPhase phase=\"3\" draftCount={props.draftCount[2]} draftCards={props.draftCards[2]} draftUseLimited={props.draftUseLimited[2]} maxCards={props.deckSize} onChangeSetting={handleChange3} />\n            <div className=\"warning\" style={warningStyle2}>\n                <b>Warning:</b> {warningText2} cards will be drawn in Phase 2.\n            </div>\n            <div className=\"warning\" style={warningStyle3}>\n                <b>Warning:</b> {warningText3} cards will be drawn in Phase 3.\n            </div>\n            <div className=\"warning\" style={warningStyle4}>\n                <b>Warning:</b> The final {limit4} cards will be drawn at random.\n            </div>\n        </div>\n    )\n}\n\nexport default SettingsPhasedDraft\n","import React from 'react'\n\nimport SettingsChaos from './SettingsChaos'\nimport SettingsDraft from './SettingsDraft'\nimport SettingsPhasedDraft from './SettingsPhasedDraft'\n\nfunction SettingsBuild(props) {\n    function handleChange(event) {\n        props.onChangeSetting(event.target.name, event.target.value)\n    }\n\n    let draftSettings\n    let draftDescription\n\n    if (props.draftType === 'chaos') {\n        draftSettings = <SettingsChaos \n            onChangeSetting={props.onChangeSetting}\n        />\n        draftDescription = <div className=\"description\">\n            The original Ultimatum of Chaos rules from the 2017 Invocation Event.  A \n            full deck will be created completely randomly from all cards available to \n            the chosen investigator.\n        </div>\n    }\n    else if (props.draftType === 'draft') {\n        draftSettings = <SettingsDraft\n            draftCount={props.draftCount[0]} \n            onChangeSetting={props.onChangeSetting}\n        />\n        draftDescription = <div className=\"description\">\n            Select cards one by one from a random display of cards available to the \n            chosen investigator.  Each card will be selected from a number of cards \n            determined by the \"Cards to select from\" option.  \n        </div>\n    }\n    else if (props.draftType === 'phaseDraft') {\n        draftSettings = <SettingsPhasedDraft\n            draftCount={props.draftCount} \n            draftCards={props.draftCards}\n            draftUseLimited={props.draftUseLimited}\n            deckSize={props.deckSize} \n            onChangeSetting={props.onChangeSetting}\n        />\n        draftDescription = <div className=\"description\">\n            The draft will proceed through 3 distinct stages.  All stages will draft \n            from the full set of cards available to the chosen investigator.  Each stage \n            will draft a number of cards equal to \"Cards selected in this stage\", not \n            including Permanent cards.  Each will be selected from a number of cards \n            determined by the \"Cards to select from\" option.  This allows you to use \n            completely random selection for part of the deck, or use a wider range of \n            choices for part of the deck.\n        </div>\n    }\n\n    return (\n        <div className=\"offsetDiv\">\n            <label>Type:</label>\n            <select name=\"draftType\" value={props.draftType} onChange={handleChange}>\n                <option value=\"chaos\">Standard chaos</option>\n                <option value=\"draft\">Simple draft</option>\n                <option value=\"phaseDraft\">Draft in stages</option>\n            </select>\n            {draftSettings}\n            {draftDescription}\n        </div>\n    )\n}\n\nexport default SettingsBuild","import React from 'react'\n\nimport SettingsChaos from './SettingsChaos'\nimport SettingsDraft from './SettingsDraft'\n\nfunction SettingsUpgrade(props) {\n    function handleChange(event) {\n        props.onChangeSetting(event.target.name, event.target.value)\n    }\n\n    let draftSettings\n\n    if (props.draftType === 'chaos') draftSettings = <SettingsChaos \n            onChangeSetting={props.onChangeSetting}\n        />\n    else if (props.draftType === 'draft') draftSettings = <SettingsDraft\n            draftCount={props.draftCount[0]} \n            onChangeSetting={props.onChangeSetting}\n        />\n\n        return (\n/*\n            <div>\n                Unfinished.\n            </div>\n        )\n*/\n        <div className=\"offsetDiv\">\n            <label>Type:</label>\n            <select name=\"draftType\" value={props.draftType} onChange={handleChange}>\n                <option value=\"chaos\">Standard chaos</option>\n                <option value=\"draft\">Simple draft</option>\n            </select>\n            <label>Weighting:</label>\n            <select name=\"draftWeighting\" value={props.draftWeighting} onChange={handleChange}>\n                <option value=\"low\">Prefer low XP</option>\n                <option value=\"medium\">Default</option>\n                <option value=\"high\">Prefer high XP</option>\n            </select>\n            <label>XP:</label>\n            <input name=\"draftXP\" type=\"number\" value={props.draftXP} min=\"1\" onChange={handleChange}></input>\n            {draftSettings}\n        </div>\n        )\n}\n\nexport default SettingsUpgrade","import React from 'react'\n\nimport SettingsType from './SettingsType'\nimport SettingsBuild from './SettingsBuild'\nimport SettingsUpgrade from './SettingsUpgrade'\n\nfunction Settings(props) {\n    function handleStart(event) {\n        props.onChangeSetting('building', true)\n    }\n\n    const draftSettings = props.draftTab === 'Build Deck' ?\n        <SettingsBuild \n            draftType={props.draftType}\n            draftCount={props.draftCount}\n            draftCards={props.draftCards}\n            draftUseLimited={props.draftUseLimited}\n            deckSize={props.deckSize}\n            onChangeSetting={props.onChangeSetting}\n        /> :\n        <SettingsUpgrade \n            draftType={props.draftType}\n            draftWeighting={props.draftWeighting}\n            draftXP={props.draftXP}\n            draftCount={props.draftCount}\n            draftCards={props.draftCards}\n            deckSize={props.deckSize}\n            onChangeSetting={props.onChangeSetting}\n        />\n\n    const button = props.ready ?\n    <button className=\"button-ready\" onClick={handleStart}>Start</button> :\n    <button className=\"button-loading\">Loading...</button>\n\n    return (\n        <div className='settings'>\n            <SettingsType draftTab={props.draftTab} onChangeSetting={props.onChangeSetting}/>\n            <h3>Draft Options</h3>\n            <h5>{props.draftTab}</h5>\n            {draftSettings}\n            {button}\n        </div>\n    )\n}\n\n//{(props.draftTab === 'Build Deck') ? button : null}\n\nexport default Settings","import React from 'react'\n\nfunction CardList(props) {\n    const { cardList, cardData, updateCardOverlay } = props\n\n    let assetCount = 0\n    let eventCount = 0\n    let skillCount = 0\n    let otherCount = 0\n    const hand = []\n    const hand2 = []\n    const arcane = []\n    const arcane2 = []\n    const accessory = []\n    const body = []\n    const ally = []\n    const tarot = []\n    const otherasset = []\n    const permanent = []\n    const event = []\n    const skill = []\n    const other = []\n\n    cardList.forEach(item => {\n        if (item.type_code === 'event') {\n            event.push(item)\n            eventCount += item.count\n        }\n        else if (item.type_code === 'skill') {\n            skill.push(item)\n            skillCount += item.count\n        }\n        else if (item.type_code === 'asset') {\n            if (item.permanent) permanent.push(item)\n            else if (item.slot === 'Hand') hand.push(item)\n            else if (item.slot === 'Hand x2') hand2.push(item)\n            else if (item.slot === 'Arcane') arcane.push(item)\n            else if (item.slot === 'Arcane x2') arcane2.push(item)\n            else if (item.slot === 'Accessory') accessory.push(item)\n            else if (item.slot === 'Body') body.push(item)\n            else if (item.slot === 'Ally') ally.push(item)\n            else if (item.slot === 'Tarot') tarot.push(item)\n            else otherasset.push(item)\n            assetCount += item.count\n        }\n        else {\n            other.push(item)\n            otherCount += item.count\n        }\n    })\n\n    function onEnterCardLeft(event) {\n        const cardArray = cardData.filter(item => item.code === event.target.id)\n\n        if (cardArray && cardArray.length > 0) {\n            const imagesrc = \"http://www.arkhamdb.com\" + cardArray[0].imagesrc\n\n            updateCardOverlay(imagesrc, \"Right\")\n        }\n    }\n\n    function onEnterCardRight(event) {\n        const cardArray = cardData.filter(item => item.code === event.target.id)\n\n        if (cardArray && cardArray.length > 0) {\n            const imagesrc = \"http://www.arkhamdb.com\" + cardArray[0].imagesrc\n\n            updateCardOverlay(imagesrc, \"Left\")\n        }\n    }\n\n    function onLeaveCard(event) {\n        updateCardOverlay(null, \"Left\")\n    }\n\n    const assetHeader = assetCount > 0 ? <h4>Assets ({assetCount})</h4> : null\n    \n    const handHeader = hand.length > 0 ? <p className='slot-header'>Hand</p> : null\n    const handContents = hand.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const hand2Header = hand2.length > 0 ? <p className='slot-header'>Hand x2</p> : null\n    const hand2Contents = hand2.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const arcaneHeader = arcane.length > 0 ? <p className='slot-header'>Arcane</p> : null\n    const arcaneContents = arcane.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const arcane2Header = arcane2.length > 0 ? <p className='slot-header'>Arcane x2</p> : null\n    const arcane2Contents = arcane2.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const accessoryHeader = accessory.length > 0 ? <p className='slot-header'>Accessory</p> : null\n    const accessoryContents = accessory.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const bodyHeader = body.length > 0 ? <p className='slot-header'>Body</p> : null\n    const bodyContents = body.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const allyHeader = ally.length > 0 ? <p className='slot-header'>Ally</p> : null\n    const allyContents = ally.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const tarotHeader = tarot.length > 0 ? <p className='slot-header'>Tarot</p> : null\n    const tarotContents = tarot.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const otherassetHeader = otherasset.length > 0 ? <p className='slot-header'>Other</p> : null\n    const otherassetContents = otherasset.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const permanentHeader = permanent.length > 0 ? <p className='slot-header'>Permanent</p> : null\n    const permanentContents = permanent.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const eventHeader = eventCount > 0 ? <h4>Events ({eventCount})</h4> : null\n    const eventContents = event.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n        return <p id={item.key} onPointerEnter={onEnterCardRight} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const skillHeader = skillCount > 0 ? <h4>Skills ({skillCount})</h4> : null\n    const skillContents = skill.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardRight} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const otherHeader = otherCount > 0 ? <h4>Other ({otherCount})</h4> : null\n    const otherContents = other.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardRight} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    return (\n        <div className=\"settings\">\n            <h3 style={{marginBottom: \"-10px\"}}>Card List</h3>\n            <div className=\"cardContainer\">\n                <div className=\"col1\">\n                    {assetHeader}\n                    {handHeader}\n                    {handContents}\n                    {hand2Header}\n                    {hand2Contents}\n                    {arcaneHeader}\n                    {arcaneContents}\n                    {arcane2Header}\n                    {arcane2Contents}\n                    {accessoryHeader}\n                    {accessoryContents}\n                    {bodyHeader}\n                    {bodyContents}\n                    {allyHeader}\n                    {allyContents}\n                    {tarotHeader}\n                    {tarotContents}\n                    {otherassetHeader}\n                    {otherassetContents}\n                    {permanentHeader}\n                    {permanentContents}\n                </div>\n                <div className=\"col2\">\n                    {eventHeader}\n                    {eventContents}\n                    {skillHeader}\n                    {skillContents}\n                    {otherHeader}\n                    {otherContents}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CardList\n","import React from 'react'\n\nfunction DraftArea(props) {\n    const { draftCount, draftPool, draftCard, draftType, phase, cardList, updateCardList, updateDraftPool } = props\n\n    let newList = []\n    newList = newList.concat(cardList)\n\n    function handleClick(event) {\n        const index = draftPool.findIndex(item => {\n            return event.target.src.includes(item.imagesrc)\n        })\n\n        const updatedList = draftCard(draftPool[index], newList)\n\n        updateCardList(updatedList)\n        updateDraftPool([])\n    }\n\n    let images = []\n\n    for (let i = 0; i < draftCount; i++) {\n        const imageSrc = \"https://www.arkhamdb.com\" + draftPool[i].imagesrc\n        images.push(<div className=\"draft-card\" key={i}><img className=\"draft-image\" src={imageSrc} alt={draftPool[i].name} onClick={handleClick}/></div>)\n    }\n\n    const phaseText = draftType === 'phaseDraft' ? ' - Stage ' + phase : null\n\n    return (\n        <div className=\"settings\">\n            <h3>Draft{phaseText}</h3>\n            <div className='draft-container'>\n                {images}\n            </div>\n            <p>Click image to draft card</p>\n        </div>\n    )\n}\n\nexport default DraftArea","import React from 'react'\n\nimport CardList from './CardList'\nimport DraftArea from './DraftArea'\n\nfunction Draft(props) {\n    const { investigator, deckSize, draftTab, draftXP, draftCount, draftProgress, draftType, phase, cardList, draftPool, cardData, draftCard, updateCardList, updateDraftPool, resetApp, updateCardOverlay } = props\n\n    let investigatorCardImage = null\n    let investigatorCardImageBack = null\n\n    if (cardData) {\n        const investigatorID = Object.keys(cardData)\n        .filter(key => {\n            return  cardData[key].name === investigator\n        })[0]\n\n        const imagesrc = \"https://www.arkhamdb.com\" + cardData[investigatorID].imagesrc\n        const backimagesrc = \"https://www.arkhamdb.com\" + cardData[investigatorID].backimagesrc\n        investigatorCardImage = <img className=\"investigator-image\" src={imagesrc} alt={props.investigator} />\n        investigatorCardImageBack = <img className=\"investigator-image\" src={backimagesrc} alt={props.investigator + ' (back)'} />\n    }\n\n    let draftContent = null\n\n    if (draftPool.length > 0) {\n        draftContent = <DraftArea \n            draftCount={draftCount}\n            draftCard={draftCard}\n            phase={phase}\n            draftType={draftType}\n            draftPool={draftPool}\n            cardList={cardList}\n            updateCardList={updateCardList}\n            updateDraftPool={updateDraftPool}\n        />\n    }\n\n    const progress = draftTab === 'Build Deck' ? \n        <p><b>Cards: </b>{draftProgress}/{deckSize}</p> : \n        <p><b>XP: </b>{draftProgress}/{draftXP}</p>\n\n    return (\n        <div>\n            <div className=\"settings\">\n                <h2>{investigator}</h2>\n                <br />\n                {investigatorCardImage}\n                {investigatorCardImageBack}\n                {progress}\n            </div>\n            {draftContent}\n            <CardList \n                cardList={cardList}\n                cardData={cardData}\n                updateCardOverlay={updateCardOverlay}\n            />\n            <button onClick={resetApp}>Restart</button>\n        </div>\n    )\n}\n\nexport default Draft","import React, { useState } from 'react'\n\nimport './App.css';\n\nimport InvestigatorSettings from './components/InvestigatorSettings'\nimport Settings from './components/Settings'\n\nimport Draft from './components/Draft'\n\nfunction App(props) {\n    let contents = null\n\n    const [overlayImage, updateOverlayImage] = useState(null)\n    const [overlayPosition, updateOverlayPosition] = useState('Left\"')\n\n    function updateCardOverlay(image, position) {\n        updateOverlayImage(image)\n        updateOverlayPosition(position)\n    }\n\n    let overlay = null\n\n    if (overlayImage) {\n        overlay = <div className={\"floatingImage\"+overlayPosition}><img src={overlayImage} alt=\"\" /></div>\n    }\n\n    if (props.fetchError) {\n        contents = \n            <div>\n                Fetch error!\n            </div>\n    }\n    else if (props.building) {\n        contents = \n            <Draft\n                draftType={props.draftType}\n                draftTab={props.draftTab}\n                investigator={props.investigator} \n                secondaryClass={props.secondaryClass} \n                deckSize={props.deckSize}\n                draftXP={props.draftXP}\n                draftCount={props.draftCount[props.phase-1]}\n                draftCards={props.draftCards[props.phase-1]}\n                draftProgress={props.draftProgress}\n                phase={props.phase}\n                cardList={props.cardList}\n                cardData={props.cardData}\n                draftPool={props.draftPool}\n                draftCard={props.draftCard}\n                updateCardList={props.updateCardList}\n                updateDraftPool={props.updateDraftPool}\n                updateCardOverlay={updateCardOverlay}\n                resetApp={props.resetApp}\n            />\n    }\n    else {\n        contents = \n        <div>\n            <InvestigatorSettings \n                investigator={props.investigator}\n                secondaryClass={props.secondaryClass}\n                selectedDeckSize={props.selectedDeckSize}\n                deckSize={props.deckSize}\n                cardData={props.cardData}\n                onChangeSetting={props.handleChange}\n            />\n            <Settings\n                draftTab={props.draftTab}\n                draftType={props.draftType}\n                draftWeighting={props.draftWeighting}\n                draftXP={props.draftXP}\n                draftCount={props.draftCount}\n                draftCards={props.draftCards}\n                draftUseLimited={props.draftUseLimited}\n                deckSize={props.deckSize}\n                ready={props.ready}\n                onChangeSetting={props.handleChange}\n            />\n        </div>\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n            ArkhamDraft\n            </header>\n            {contents}\n            {overlay}\n        </div>\n    )\n}\n\nexport default App;\n","function DrawCard(cardData, draftPool) {\n    let legal = false\n    let randomCard = null\n\n    if (cardData.length == 0) return null\n\n    while (!legal) {\n        randomCard = cardData[Math.floor(Math.random() * cardData.length)]\n\n        const randomCode = randomCard.code\n        const existingIndex = (draftPool && draftPool.length > 0) ? draftPool.findIndex(item => item.code === randomCode) : -1\n        \n        if (existingIndex < 0) legal = true\n    }\n\n    return randomCard\n}\n\nexport default DrawCard","// card data:\n// pack_code\n// pack_name\n// type_code\n        // treachery\n        // investigator\n        // asset\n        // event\n        // skill\n        // enemy\n        // story\n        // location\n// type_name\n// subtype_code\n// faction_code\n// faction_name\n// position\n// exceptional\n// myriad\n// code\n// name\n// real_name\n// subname\n// text\n// real_text\n// quantity\n// skill_willpower\n// skill_intellect\n// skill_combat\n// skill_agility\n// clues_fixed\n// health\n// health_per_investigator\n// sanity\n// deck_limit\n// traits\n// real_traits\n// deck_requirements\n// deck_options\n// flavor\n// illustrator\n// is_unique\n// exile\n// hidden\n// permanent\n// double_sided\n// back_text\n// back_flavor\n// octgn_id\n// url\n// imagesrc\n// backimagesrc\n\n// slot\n    // Hand\n    // Accessory\n    // Ally\n    // Hand x2\n    // Arcane\n    // Body\n    // Tarot\n// restrictions\n// cost\n// xp\n\nfunction FilterCards(props) {\n    const { investigator, secondaryClass, cardData, cardList, deckSize, upgrade, draftUseLimited, draftXP } = props\n\n    const legalSets = { 'core': 1\n        ,'dwl': 1, 'tmm': 1, 'tece': 1, 'bota': 1, 'uau': 1, 'wda': 1, 'litas': 1\n        ,'ptc': 1, 'eotp': 1, 'tuo': 1, 'apot': 1, 'tpm': 1, 'bsr': 1, 'dca': 1\n        ,'tfa': 1, 'tof': 1, 'tbb': 1, 'hote': 1, 'tcoa': 1, 'tdoy': 1, 'sha': 1\n        ,'tcu': 1, 'tsn': 1, 'wos': 1, 'fgg': 1, 'uad': 1, 'icc': 1, 'bbt': 1\n        ,'tde': 1, 'sfk': 1, 'tsh': 1, 'dsm': 1, 'pnr': 1, 'wgd': 1, 'woc': 1\n        ,'rtnotz': 1, 'rtdwl': 1, 'rtptc': 1\n        ,'books' : 1 }\n\n    const investigatorID = Object.keys(cardData)\n    .filter(key => {\n        return cardData[key].name === investigator\n    })[0]\n\n    const deckOptions = cardData[investigatorID].deck_options\n\n    const filteredDeck = filterDeckForLimited(cardList, deckOptions)\n\n    // requirement trait: exclude if it doesn't pass a different option AND the requirement\n    let requirementOptions = null\n\n    if (investigator === 'Joe Diamond') {\n        const joeRequiredCards = cardList.filter(item => {\n            const cardTraits = item.traits\n\n            if (cardTraits && cardTraits.search(new RegExp('insight', \"i\")) >= 0)\n                return true\n\n            return false\n        })\n\n        if (deckSize - countDeck(cardList) + countDeck(joeRequiredCards) <= 10) {\n            requirementOptions = [{\n                requirement: 10,\n                trait: 'insight'\n            }]\n        }\n    }\n    else if (investigator === 'Lola Hayes') {\n        const lolaRequiredCards = ['guardian', 'seeker', 'rogue', 'mystic', 'survivor'].map(faction => {\n            return {\n                faction: faction,\n                count: countDeck(cardList.filter(item => {\n                    if (item.faction_code === faction) {\n                        return true\n                    }\n                    if (item.faction2_code === faction) {\n                        return true\n                    }\n\n                    return false\n                }))\n            }\n        }).sort((e1, e2) => e2.count - e1.count)\n\n        let count = 0\n        for (let i = 0; i < 3; i++) {\n            count += Math.min(7, lolaRequiredCards[i].count)\n        }\n\n        if (deckSize - countDeck(cardList) + count <= 21) {\n            const minCount = lolaRequiredCards[2].count\n\n            let factionRequirement = []\n            for (let i = 0; i < 5; i++) {\n                if (lolaRequiredCards[i].count < 7 && lolaRequiredCards[i].count >= minCount) factionRequirement.push(lolaRequiredCards[i].faction)\n            }\n\n            requirementOptions = [{\n                requirement: 7,\n                faction: factionRequirement\n            }]\n        }\n    }\n\n    let minLevel = 0\n    let maxLevel = 0\n\n    if (upgrade) {\n        minLevel = 1\n        maxLevel = draftXP\n    }\n//console.log('Filter : ' + props.draftXP)\n    const filteredData = cardData.filter(card => {\n        if (card.type_code === 'investigator') return false\n        if (card.type_code === 'story') return false\n        if (card.type_code === 'location') return false\n        if (card.type_code === 'enemy') return false\n        if (card.type_code === 'treachery') return false\n        if (card.bonded_to) return false\n        // currently means weakness\n        if (card.subtype_code) return false\n\n        let xp = 0\n        if (card.xp) xp = card.xp\n        if (card.exceptional) xp *= 2\n\n        if (xp < minLevel) return false\n        if (xp > maxLevel) return false\n\n//        arcane research!!!! oh no!!\n//        green man medallion as well\n\n        if (card.restrictions && card.restrictions.investigator) return false\n        if (!legalSets[card.pack_code]) return false\n\n        // this isn't right for upgrades yet\n        let legal = false\n        for (let i = 0; i < deckOptions.length; i++) {\n            if (deckOptions[i].requirement) continue\n\n            let optionLegal = false\n\n            if (testDeckOption(card, deckOptions[i])) {\n                optionLegal = true\n\n                if (deckOptions[i].not) {\n//console.log('Reject : ' + card.name)\n                    optionLegal = false\n                }\n                else if (deckOptions[i].limit) {\n                    if (!draftUseLimited) optionLegal = false\n                    else {\n                        const inDeck = countDeckLimited(filteredDeck, deckOptions[i])\n//console.log('In deck : ' + inDeck)\n                        if (inDeck >= deckOptions[i].limit) {\n//console.log('Over limit : ' + card.name)\n                            optionLegal = false\n                        }\n                    }\n                }\n            }\n\n            if (optionLegal) legal = true\n        }\n\n        if (!legal) return false\n\n        // check to see if there's already max in the deck\n        let limited = false\n        \n        cardList.forEach(item => {\n            if (item.name === card.name) {\n                if (item.count >= card.deck_limit) {\n//console.log(card.name + ' : Over the limit')\n                    limited = true\n                }\n            }\n        })\n\n        if (limited) return false\n\n        // check to see if it passes all required tests\n        if (requirementOptions) {\n            for (let i = 0; i < requirementOptions.length; i++) {\n                if (!testDeckOption(card, requirementOptions[i])) {\n                    return false\n                }\n            }\n        }\n\n        return true\n    })\n\n    function filterDeckForLimited(list, options) {\n        if (!list) return []\n\n        let filteredDeck = []\n\n        list.forEach(item => {\n            let legal = false\n\n            for (let i = 0; i < options.length; i++) {\n                if (options[i].limit) continue;\n\n                const optionLegal = testDeckOption(item, options[i])\n\n                if (optionLegal) legal = true\n            }\n\n            if (!legal) filteredDeck.push(item)\n        })\n\n        return filteredDeck\n    }\n    \n    function countDeck(list) {\n        let count = 0\n\n        if (list) {\n            list.forEach(item => {\n                if (!item.permanent) count += item.count\n            })\n        }\n\n        return count\n    }\n    \n    function countDeckLimited(list, option) {\n        let count = 0\n\n        if (list) {\n            list.forEach(item => {\n                if (testDeckOption(item, option)) {\n                    count += item.count\n                }\n            })\n        }\n\n        return count\n    }\n\n    function testDeckOption(card, option) {\n//console.log(option)\n        let level = true\n        let faction = true\n        let secondaryFaction = true\n        let trait = true\n        let uses = true\n        let type = true\n        let text = true\n\n        if (option.name === 'Secondary Class') {\n            secondaryFaction = false\n\n            if (card.faction_code === secondaryClass) {\n                secondaryFaction = true\n            }\n            if (card.faction2_code === secondaryClass) {\n                secondaryFaction = true\n            }\n        }\n\n        if (option.faction) {\n            faction = false\n\n            for (let f = 0; f < option.faction.length; f++) {\n                if (card.faction_code === option.faction[f]) {\n                    faction = true\n                }\n                if (card.faction2_code === option.faction[f]) {\n                    faction = true\n                }\n            }\n        } \n\n        if (option.level) {\n            level = false\n\n            const min = option.level.min\n            const max = option.level.max\n\n            const ixp = card.xp === undefined ? 0 : card.xp\n\n            if (ixp >= min && ixp <= max) level = true;\n        }\n\n        if (option.trait) {\n//console.log('Trait')\n//console.log(option.trait)\n            trait = false\n\n            const cardTraits = card.traits\n//console.log(cardTraits)\n            if (cardTraits && cardTraits.search(new RegExp(option.trait, \"i\")) >= 0)\n                trait = true\n        }\n//console.log(trait)\n        if (option.uses) {\n            uses = false\n\n            const cardText = card.text\n\n            if (cardText && cardText.search(new RegExp('Uses \\\\([0-9\\\\s]+' + option.uses[0] + '\\\\)', \"i\")) >= 0)\n                uses = true\n        }\n\n        if (option.type) {\n            type = false\n\n            const cardType = card.type_code\n\n            if (cardType && option.type.find(item => item === cardType))\n                type = true\n        }\n           \n        if (option.text) {\n            text = false\n            \n            if (card.text && card.text.search(new RegExp(option.text, \"i\")) >= 0)\n                text = true\n        }\n            \n//console.log(faction + ' ' + level + ' ' + trait + ' ' + uses + ' ' + type + ' ' + secondaryFaction)\n        return faction && level && trait && uses && type && secondaryFaction && text\n    }\n\n    return filteredData\n}\n\nexport default FilterCards\n\n/* odds research\n            // stat test\n            const setArray = [ 'core'\n                ,'dwl', 'tmm', 'tece', 'bota', 'uau', 'wda', 'litas'\n                ,'ptc', 'eotp', 'tuo', 'apot', 'tpm', 'bsr', 'dca'\n                ,'tfa', 'tof', 'tbb', 'hote', 'tcoa', 'tdoy', 'sha'\n                ,'tcu', 'tsn', 'wos', 'fgg', 'uad', 'icc', 'bbt'\n                ,'tde', 'sfk', 'tsh', 'dsm', 'pnr', 'wgd', 'woc'\n                ,'rtnotz', 'rtdwl', 'rtptc'\n            ]\n\n//            const assets = countCards('asset', setArray)\n//            const events = countCards('event', setArray)\n//            const skills = countCards('skill', setArray)\n\n            const hand = countCards('asset', 'Hand', setArray)\n            const hands2 = countCards('asset', 'Hand x2', setArray)\n            const ally = countCards('asset', 'Ally', setArray)\n            const accessory = countCards('asset', 'Accessory', setArray)\n            const arcane = countCards('asset', 'Arcane', setArray)\n            const body = countCards('asset', 'Body', setArray)\n            const tarot = countCards('asset', 'Tarot', setArray)\n\n//            console.log('Assets: ' + assets)\n//            console.log('Events: ' + events)\n//            console.log('Skills: ' + skills)\n\n            console.log('Hand: ' + hand)\n            console.log('Ally: ' + ally)\n            console.log('Arcane: ' + arcane)\n            console.log('2xHands: ' + hands2)\n            console.log('Accessory: ' + accessory)\n            console.log('Body: ' + body)\n            conso le.log('Tarot: ' + tarot)\n*/\n/* odds research\n    function countCards(cardType, cardSlot, sets) {\n        const filteredData = cardData.filter(card => {\n            // currently means weakness\n            if (card.type_code !== cardType) return false\n            if (card.subtype_code) return false\n            if (card.slot && card.slot !== cardSlot) return false\n            if (!card.slot) return false\n//            if (card.xp && card.xp > 0) return false            \n            if (card.restrictions && card.restrictions.investigator) return false\n    //        console.log(card.slot + ' <=> ' + cardSlot + ' (' + card.name + ')')\n    \n            let foundSet = false\n            for (let i = 0; i < sets.length; i++) {\n                if (card.pack_code === sets[i]) foundSet = true\n            }\n\n            return foundSet\n        })\n\n        return filteredData.length\n    }\n*/\n\n","import DrawCard from './DraftData'\nimport FilterCards from './DraftFilters'\n\nfunction StandardChaos(props) {\n    const { draftCards, draftCard, cardList, investigator } = props;\n    let newList = []\n\n    newList = newList.concat(cardList)\n\n    let draftProgress = 0;\n\n    while (draftProgress < draftCards) {\n        // generates all cards, sets cardList state\n        // need to do it each iteration for all investigators whose filter depends on the cards in the deck\n        props.cardList = newList\n        let filteredData = FilterCards(props)\n\n        const card = DrawCard(filteredData)\n\n        newList = draftCard(card, newList)\n\n//        if (card.traits && card.traits.search(new RegExp('insight', \"i\")) >= 0)\n\n        if (!card.permanent) draftProgress++\n\n        if (investigator === 'Joe Diamond' || investigator === 'Lola Hayes') {\n            props.cardList = newList\n            filteredData = FilterCards(props)\n        }\n    }\n\n    return newList\n}\n\nexport default StandardChaos","import DrawCard from './DraftData'\nimport FilterCards from './DraftFilters'\n\nfunction SimpleDraft(props) {\n    const { draftCount } = props\n\n    // generates draft cards\n    const filteredData = FilterCards(props)\n\n    let draftPool = []\n\n    for (let i = 0; i < draftCount; i++) {\n        const card = DrawCard(filteredData, draftPool)\n\n        draftPool.push(card)\n    }\n\n    return draftPool\n}\n\nexport default SimpleDraft","import React, { useState, useEffect } from 'react';\n\nimport App from './App';\nimport StandardChaos from './components/StandardChaos'\nimport SimpleDraft from './components/SimpleDraft'\n\nfunction AppContainer() {\n    const [investigator, changeInvestigator] = useState(\"Roland Banks\")\n    const [secondaryClass, changeSecondaryClass] = useState(null)\n    const [selectedDeckSize, changeSelectedDeckSize] = useState(null)\n    const [deckSize, changeDeckSize] = useState(\"30\")\n    const [draftTab, changeDraftTab] = useState(\"Build Deck\")\n    const [draftType, changeDraftType] = useState(\"draft\")\n    const [draftWeighting, changeDraftWeighting] = useState('medium')\n    const [draftXP, changeDraftXP] = useState(1)\n    const [draftCount, changeDraftCount] = useState([3, 3, 3])\n    const [draftCards, changeDraftCards] = useState([10, 10, 10])\n    const [draftUseLimited, changeDraftUseLimited] = useState([true, true, true])\n    const [building, changeBuilding] = useState(false)\n    const [newPhase, changeNewPhase] = useState(true)\n    const [fetching, changeFetching] = useState(false)\n    const [cardData, updateCardData] = useState(null)\n    const [fetchError, updateFetchError] = useState(false)\n    const [cardList, updateCardList] = useState([])\n    const [draftPool, updateDraftPool] = useState([])\n    const [phase, changePhase] = useState(1)\n    const [complete, changeComplete] = useState(false)\n\n    // card count for Build, xp for Upgrade\n    let draftProgressBuild = 0\n    let draftProgressUpgrade = 0\n\n    if (cardList) {\n        for (let item in cardList) {\n            // permanent don't count\n            if (!cardList[item].permanent) draftProgressBuild += cardList[item].count\n            draftProgressUpgrade += cardList[item].xp * cardList[item].count;\n        }\n    }\n\n    useEffect(() => fetchData(), [])\n\n    function fetchData() {\n        changeFetching(true)\n\n        fetch(\"https://cors-anywhere.herokuapp.com/https://arkhamdb.com/api/public/cards/\")\n//        fetch(\"https://arkhamdb.com/api/public/cards/\")\n        .then(res => {\n            return res.json()\n        })\n        .then(res => {\n            updateCardData(res)\n            changeFetching(false)\n        })\n        .catch(() => updateFetchError(true))\n    }\n\n    useEffect(() => {\n        if (building && !complete) {\n            const draftProgress = (draftTab === 'Build Deck') ? draftProgressBuild : draftProgressUpgrade\n            let draftTarget = 0\n\n            if (draftTab === 'Build Deck') {\n                if (draftType === 'phaseDraft') {\n                    if (phase > 3) draftTarget = deckSize\n                    else for (let i = 0; i < phase; i++) draftTarget += parseInt(draftCards[i], 10)\n                    \n                    if (draftTarget > deckSize) draftTarget = deckSize\n                }\n                else {\n                    draftTarget = deckSize\n                }\n            }\n            else\n            {\n                draftTarget = draftXP\n            }\n\n            if (newPhase) {\n                if (draftType === 'chaos') {\n                    // first (and only) time through\n                    const list = StandardChaos({\n                        investigator: investigator,\n                        secondaryClass: secondaryClass,\n                        deckSize: deckSize,\n                        draftCards: deckSize,\n                        draftXP: draftXP - draftProgress,\n                        upgrade: (draftTab === 'Upgrade'),\n                        cardList: cardList,\n                        cardData: cardData,\n                        draftCard: draftCard\n                    })\n        \n                    updateCardList(list)\n                    changeNewPhase(false)\n                    changeComplete(true)\n                }\n                else if (draftProgress < draftTarget) {\n                    if (draftCount[phase-1] == 1) {\n                        const list = StandardChaos({\n                            investigator: investigator,\n                            secondaryClass: secondaryClass,\n                            deckSize: deckSize,\n                            draftCards: draftTarget - draftProgress,\n                            draftXP: draftXP - draftProgress,\n                            upgrade: (draftTab === 'Upgrade'),\n                            cardList: cardList,\n                            cardData: cardData,\n                            draftCard: draftCard\n                        })    \n        \n                        updateCardList(list)\n                        changePhase(phase + 1)\n                    }\n                    else {\n                        const pool = SimpleDraft({\n                            investigator: investigator,\n                            secondaryClass: secondaryClass,\n                            deckSize: deckSize,\n                            draftCount: draftCount[phase-1],\n                            draftUseLimited: draftUseLimited[phase-1],\n                            draftXP: draftXP - draftProgress,\n                            upgrade: (draftTab === 'Upgrade'),\n                            cardList: cardList,\n                            cardData: cardData,\n                            draftCard: draftCard\n                            })\n    \n                        updateDraftPool(pool)    \n                        changeNewPhase(false)\n                    }\n                }\n            }\n            else {\n                if (draftPool.length < 1) {\n                    if (draftType === 'draft') {\n                        if (draftProgress < draftTarget) {\n                            const pool = SimpleDraft({\n                                investigator: investigator,\n                                secondaryClass: secondaryClass,\n                                deckSize: deckSize,\n                                draftCount: draftCount[phase-1],\n                                draftUseLimited: draftUseLimited[phase-1],\n                                draftXP: draftXP - draftProgress,\n                                upgrade: (draftTab === 'Upgrade'),\n                                cardList: cardList,\n                                cardData: cardData,\n                                draftCard: draftCard\n                            })\n        \n                            updateDraftPool(pool)\n                        }\n                        else {\n                            changeComplete(true)\n                        }\n                    }\n                    else {\n                        if (draftProgress < draftTarget) {\n                            const pool = SimpleDraft({\n                                investigator: investigator,\n                                secondaryClass: secondaryClass,\n                                deckSize: deckSize,\n                                draftCount: draftCount[phase-1],\n                                draftUseLimited: draftUseLimited[phase-1],\n                                draftXP: draftXP - draftProgress,\n                                upgrade: (draftTab === 'Upgrade'),\n                                cardList: cardList,\n                                cardData: cardData,\n                                draftCard: draftCard\n                            })\n    \n                            updateDraftPool(pool)\n                        }\n                        else {\n                            if (phase >= 3) {\n                                if (draftProgress < deckSize) {\n                                    const list = StandardChaos({\n                                        investigator: investigator,\n                                        secondaryClass: secondaryClass,\n                                        deckSize: deckSize,\n                                        draftCards: deckSize - draftProgress,\n                                        draftXP: draftXP - draftProgress,\n                                        upgrade: (draftTab === 'Upgrade'),\n                                        cardList: cardList,\n                                        cardData: cardData,\n                                        draftCard: draftCard\n                                    })    \n                \n                                    updateCardList(list)\n                                }\n                                \n                                changeComplete(true)\n                            }\n                            else {\n                                changePhase(phase + 1)\n                                changeNewPhase(true)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }, [building, complete, newPhase, draftType, draftProgressBuild, draftProgressUpgrade, deckSize, investigator, cardList, cardData, draftCount, draftUseLimited, phase, draftCards, draftPool, draftTab, draftXP])\n\n    function handleChange(name, value) {\n        if (name === 'investigator') {\n            changeInvestigator(value)\n\n            if (cardData && !selectedDeckSize) {\n                const investigatorID = Object.keys(cardData)\n                .filter(key => {\n                    return  cardData[key].name === value\n                })[0]\n\n                changeDeckSize(cardData[investigatorID].deck_requirements.size)\n\n                const classOptions = cardData[investigatorID].deck_options.filter(item => item.name === 'Secondary Class')\n\n                if (classOptions.length > 0) {\n                    changeSecondaryClass(classOptions[0].faction_select[0])\n                }\n            }\n        }\n        else if (name === 'secondaryClass') changeSecondaryClass(value)\n        else if (name === 'selectedDeckSize') {\n            changeSelectedDeckSize(value)\n            changeDeckSize(value)\n        }\n        else if (name === 'draftTab') changeDraftTab(value)\n        else if (name === 'draftType') changeDraftType(value)\n        else if (name === 'draftWeighting') changeDraftWeighting(value)\n        else if (name === 'draftXP') changeDraftXP(value)\n        else if (name === 'draftCount1') doChangeDraftCount(1, value)\n        else if (name === 'draftCount2') doChangeDraftCount(2, value)\n        else if (name === 'draftCount3') doChangeDraftCount(3, value)\n        else if (name === 'draftCards1') doChangeDraftCards(1, value)\n        else if (name === 'draftCards2') doChangeDraftCards(2, value)\n        else if (name === 'draftCards3') doChangeDraftCards(3, value)\n        else if (name === 'draftUseLimited1') doChangeDraftUseLimited(1, value)\n        else if (name === 'draftUseLimited2') doChangeDraftUseLimited(2, value)\n        else if (name === 'draftUseLimited3') doChangeDraftUseLimited(3, value)\n        else if (name === 'building') {\n            if (value == true && cardData) {\n                const investigatorID = Object.keys(cardData)\n                .filter(key => {\n                    return  cardData[key].name === investigator\n                })[0]\n\n                if (!selectedDeckSize) {\n                    changeDeckSize(cardData[investigatorID].deck_requirements.size)    \n                }\n\n                if (!secondaryClass) {\n                    const classOptions = cardData[investigatorID].deck_options.filter(item => item.name === 'Secondary Class')\n\n                    if (classOptions.length > 0) {\n                        changeSecondaryClass(classOptions[0].faction_select[0])\n                    }\n                }\n            }\n            changeBuilding(value)\n        }\n    }\n\n    function doChangeDraftCount(index, value) {\n        let newCount = []\n        newCount = newCount.concat(draftCount)\n        newCount[index-1] = value\n        changeDraftCount(newCount)\n    }\n\n    function doChangeDraftCards(index, value) {\n        let newCards = []\n        newCards = newCards.concat(draftCards)\n        newCards[index-1] = value\n        changeDraftCards(newCards)\n    }\n\n    function doChangeDraftUseLimited(index, value) {\n        let newUseLimited = []\n        newUseLimited = newUseLimited.concat(draftUseLimited)\n        newUseLimited[index-1] = !draftUseLimited[index-1]\n        changeDraftUseLimited(newUseLimited)\n    }\n\n    function draftCard(card, list) {\n        let cardXP = 0\n\n        if (card.xp) {\n            cardXP = card.xp\n            if (card.exceptional) cardXP *= 2\n        }\n\n        if (list) {\n            const existingIndex = list.length > 0 ? list.findIndex(item => item.key === card.code) : -1\n\n            if (existingIndex >= 0) {\n                list.map(item => {\n                    if (item.name === card.name) {\n                        item.count = item.count + 1\n                        return item\n                    }\n\n                    return item\n                })\n            }\n            else {\n                list.push({ name: card.name, key: card.code, type_code: card.type_code, slot: card.slot, faction_code: card.faction_code, faction2_code: card.faction2_code, traits: card.traits, xp: cardXP, permanent: card.permanent, count: 1 })\n            }\n        }\n        else {\n            list = [{ name: card.name, key: card.code, type_code: card.type_code, slot: card.slot, faction_code: card.faction_code, faction2_code: card.faction2_code, traits: card.traits, xp: cardXP, permanent: card.permanent, count: 1 }]\n        }\n\n        return list\n    }\n\n    function resetApp() {\n        changeBuilding(false)\n//        changeInitialized(false)\n        changeNewPhase(true)\n        updateCardList([])\n        updateDraftPool([])\n        changePhase(1)\n        changeComplete(false)\n    }\n\n    const ready = cardData && !fetching && !fetchError\n\n    return (\n        <App\n        investigator={investigator}\n        secondaryClass={secondaryClass}\n        selectedDeckSize={selectedDeckSize}\n        deckSize={deckSize}\n        draftTab={draftTab}\n        draftType={draftType}\n        draftWeighting={draftWeighting}\n        draftXP={draftXP}\n        draftCount={draftCount}\n        draftCards={draftCards}\n        draftUseLimited={draftUseLimited}\n        draftProgress={draftTab === 'Build Deck' ? draftProgressBuild : draftProgressUpgrade}\n        ready={ready}\n        building={building}\n        fetchError={fetchError}\n        phase={phase}\n        cardList={cardList}\n        draftPool={draftPool}\n        cardData={cardData}\n        handleChange={handleChange}\n        draftCard={draftCard}\n        updateCardList={updateCardList}\n        updateDraftPool={updateDraftPool}\n        resetApp={resetApp}\n        />\n    )\n}\n\nexport default AppContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from './AppContainer';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}