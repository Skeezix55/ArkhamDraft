{"version":3,"sources":["components/InvestigatorSettings.js","components/SettingsType.js","components/SettingsChaos.js","components/SettingsDraft.js","components/SettingsPhase.js","components/SettingsPhasedDraft.js","components/SettingsBuild.js","components/SettingsUpgrade.js","components/Settings.js","components/CardList.js","components/DraftArea.js","components/Draft.js","App.js","components/DraftData.js","components/DraftFilters.js","components/StandardChaos.js","components/SimpleDraft.js","AppContainer.js","index.js"],"names":["InvestigatorSettings","props","investigator","secondaryClass","selectedDeckSize","selectedTaboo","deckSize","cardData","tabooData","handleChange","event","onChangeSetting","target","name","value","secondaryFactionList","deckSizeList","tabooList","secondaryClassValue","deckSizeValue","investigatorID","Object","keys","filter","key","deckOptions","deck_options","i","length","faction_select","map","item","index","toUpperCase","slice","deck_size_select","code","date_start","unshift","tabooDiv","className","onChange","skidsName","skidsOption","secondaryClassDiv","deckSizeDiv","SettingsType","style1","style2","handleClick","attributes","nodeValue","draftTab","backgroundColor","borderLeft","borderBottom","borderRight","style","onClick","SettingsChaos","SettingsDraft","type","min","max","step","draftCount","SettingsPhase","padding","phase","maxCards","draftCards","checked","draftUseLimited","SettingsPhasedDraft","limit2","limit3","limit4","warningText2","warningText3","warningStyle2","warningStyle3","warningStyle4","display","SettingsBuild","draftSettings","draftDescription","draftType","SettingsUpgrade","draftWeighting","draftXP","Settings","button","ready","CardList","cardList","updateCardOverlay","assetCount","eventCount","skillCount","otherCount","hand","hand2","arcane","arcane2","accessory","body","ally","tarot","otherasset","permanent","skill","other","onEnterCardLeft","cardArray","id","imagesrc","onEnterCardRight","onLeaveCard","forEach","type_code","push","count","slot","assetHeader","handHeader","handContents","sort","a","b","countStr","onPointerEnter","onPointerLeave","hand2Header","hand2Contents","arcaneHeader","arcaneContents","arcane2Header","arcane2Contents","accessoryHeader","accessoryContents","bodyHeader","bodyContents","allyHeader","allyContents","tarotHeader","tarotContents","otherassetHeader","otherassetContents","permanentHeader","permanentContents","eventHeader","eventContents","skillHeader","skillContents","otherHeader","otherContents","marginBottom","DraftArea","draftPool","draftCard","updateCardList","updateDraftPool","newList","findIndex","src","includes","updatedList","concat","images","imageSrc","alt","phaseText","Draft","draftProgress","resetApp","investigatorCardImage","investigatorCardImageBack","backimagesrc","draftContent","progress","App","contents","useState","overlayImage","updateOverlayImage","overlayPosition","updateOverlayPosition","overlay","fetchError","building","image","position","boxSizing","DrawCard","legal","randomCard","randomCode","Math","floor","random","FilterCards","upgrade","legalSets","filteredDeck","list","options","limit","testDeckOption","filterDeckForLimited","requirementOptions","joeRequiredCards","cardTraits","traits","search","RegExp","countDeck","requirement","trait","lolaRequiredCards","faction","faction_code","faction2_code","e1","e2","minCount","factionRequirement","minLevel","maxLevel","countDeckLimited","option","card","level","secondaryFaction","uses","text","f","ixp","undefined","xp","cardText","cardType","find","bonded_to","subtype_code","tabooxp","exceptional","tabooexceptional","restrictions","pack_code","optionLegal","not","limited","deck_limit","StandardChaos","filteredData","SimpleDraft","AppContainer","changeInvestigator","changeSecondaryClass","changeSelectedDeckSize","changeSelectedTaboo","changeDeckSize","changeDraftTab","changeDraftType","changeDraftWeighting","changeDraftXP","changeDraftCount","changeDraftCards","changeDraftUseLimited","changeBuilding","newPhase","changeNewPhase","updateCardData","updateTabooData","updateFetchError","changePhase","complete","changeComplete","draftProgressBuild","draftProgressUpgrade","doChangeDraftCount","newCount","doChangeDraftCards","newCards","doChangeDraftUseLimited","newUseLimited","cardXP","useEffect","fetch","then","res","json","catch","cards","JSON","parse","item1","item2","draftTarget","parseInt","pool","deck_requirements","size","classOptions","tData","cData","tabooEntry","taboo","mergeTabooData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PA0IeA,MAxIf,SAA8BC,GAAQ,IAC1BC,EAAiGD,EAAjGC,aAAcC,EAAmFF,EAAnFE,eAAgBC,EAAmEH,EAAnEG,iBAAkBC,EAAiDJ,EAAjDI,cAAeC,EAAkCL,EAAlCK,SAAUC,EAAwBN,EAAxBM,SAAUC,EAAcP,EAAdO,UAE3F,SAASC,EAAaC,GAClBT,EAAMU,gBAAgBD,EAAME,OAAOC,KAAMH,EAAME,OAAOE,OAG1D,IAAIC,EAAuB,KACvBC,EAAe,KACfC,EAAY,KACZC,EAAsBf,EACtBgB,EAAgBf,GAAsCE,EAE1D,GAAIC,EAQA,IAPA,IAAMa,EAAiBC,OAAOC,KAAKf,GAClCgB,QAAO,SAAAC,GACJ,OAAQjB,EAASiB,GAAKX,OAASX,KAChC,GAEGuB,EAAclB,EAASa,GAAgBM,aAEpCC,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IAAK,CACzC,GAA4B,oBAAxBF,EAAYE,GAAGd,KAIfE,EAFaU,EAAYE,GAAGE,eAEAC,KAAI,SAACC,EAAMC,GACnC,OAAO,4BAAQlB,MAAOiB,EAAMP,IAAKQ,GAC5BD,EAAK,GAAGE,cAAgBF,EAAKG,MAAM,YAI3C,GAA4B,cAAxBT,EAAYE,GAAGd,KACxB,CAGIG,EAFaS,EAAYE,GAAGQ,iBAERL,KAAI,SAACC,EAAMC,GAC3B,OAAO,4BAAQlB,MAAOiB,EAAMP,IAAKQ,GAC5BD,OAOjBvB,IACAS,EAAYT,EAAUsB,KAAI,SAACC,EAAMC,GAC7B,OAAO,4BAAQlB,MAAOiB,EAAKK,KAAMZ,IAAKQ,GACjCD,EAAKM,gBAIJC,QAAQ,4BAAQxB,MAAM,OAAOU,IAAI,OACtC,SAIT,IAAMe,EAAW,6BACb,2BAAOC,UAAU,QAAQ1B,MAAOT,GAAhC,eACA,4BAAQmC,UAAU,QAAQ3B,KAAK,QAAQC,MAAOT,EAAeoC,SAAUhC,GAClEQ,IAILyB,EAAY,WAChBA,GAAwB,UACxB,IAAMC,EAAc,4BAAQ7B,MAAO4B,GAAYA,GAEzCE,EAAoB7B,EACtB,6BACI,2BAAOyB,UAAU,iBAAiB1B,MAAOI,GAAzC,oBACA,4BAAQsB,UAAU,iBAAiB3B,KAAK,iBAAiBC,MAAOI,EAAqBuB,SAAUhC,GAC1FM,IAIT,KAEM8B,EAAc7B,EACpB,6BACI,2BAAOwB,UAAU,WAAW1B,MAAOK,GAAnC,cACA,4BAAQqB,UAAU,WAAW3B,KAAK,mBAAmBC,MAAOK,EAAesB,SAAUhC,GAChFO,IAIT,KAEJ,OACI,yBAAKwB,UAAU,YACX,oDACA,gDACA,4BAAQ3B,KAAK,eAAeC,MAAOZ,EAAcuC,SAAUhC,GACvD,4BAAQK,MAAM,gBAAd,gBACA,4BAAQA,MAAM,gBAAd,gBACC6B,EACD,4BAAQ7B,MAAM,eAAd,eACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,mBAAd,mBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,kBAAd,kBACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,oBAAd,oBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,kBAAd,kBACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,iBAAd,iBACA,4BAAQA,MAAM,oBAAd,oBACA,4BAAQA,MAAM,kBAAd,kBACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,gBAAd,iBAEH8B,EACAC,EACAN,IC3FEO,MAxCf,SAAsB7C,GAClB,IAAI8C,EAAS,GACTC,EAAS,GAsBb,SAASC,EAAYvC,GACjBT,EAAMU,gBAAgBD,EAAME,OAAOsC,WAAWrC,KAAKsC,UAAWzC,EAAME,OAAOsC,WAAWpC,MAAMqC,WAGhG,MAxBuB,eAAnBlD,EAAMmD,UACNL,EAAS,CACLM,gBAAiB,WAErBL,EAAS,CACLK,gBAAiB,UACjBC,WAAY,kBACZC,aAAc,qBAGlBR,EAAS,CACLM,gBAAiB,UACjBG,YAAa,kBACbD,aAAc,mBAElBP,EAAS,CACLK,gBAAiB,YASrB,yBAAKb,UAAU,cACX,yBAAKA,UAAU,cAAc3B,KAAK,WAAWC,MAAM,aAAa2C,MAAOV,EAAQW,QAAST,GAAxF,cAGA,yBAAKT,UAAU,cAAc3B,KAAK,WAAWC,MAAM,UAAU2C,MAAOT,EAAQU,QAAST,GAArF,aCdGU,MAnBf,SAAuB1D,GACnB,OACI,yBAAKuC,UAAU,wBCaRoB,MAff,SAAuB3D,GAMnB,OACI,yBAAKuC,UAAU,sBACX,wDACA,2BAAOqB,KAAK,QAAQC,IAAI,IAAIC,IAAI,KAAKC,KAAK,IAAIlD,MAAOb,EAAMgE,WAAYzB,UAAU,SAAS3B,KAAK,cAAc4B,SAPrH,SAAsB/B,GAClBT,EAAMU,gBAAgBD,EAAME,OAAOC,KAAMH,EAAME,OAAOE,UAOlD,0BAAM0B,UAAU,eAAevC,EAAMgE,cCOlCC,MAjBf,SAAuBjE,GACnB,OACI,yBAAKuC,UAAU,cACX,wBAAIiB,MAAO,CAACU,QAAS,cAArB,SAA0ClE,EAAMmE,OAChD,wDACA,2BAAOP,KAAK,QAAQC,IAAI,IAAIC,IAAI,KAAKjD,MAAOb,EAAMgE,WAAYzB,UAAU,SAAS3B,KAAK,aAAa4B,SAAUxC,EAAMU,kBACnH,0BAAM6B,UAAU,eAAevC,EAAMgE,YACrC,6BACA,iEACA,2BAAOJ,KAAK,QAAQC,IAAI,IAAIC,IAAK9D,EAAMoE,SAAUvD,MAAOb,EAAMqE,WAAY9B,UAAU,SAAS3B,KAAK,aAAa4B,SAAUxC,EAAMU,kBAC/H,0BAAM6B,UAAU,eAAevC,EAAMqE,YACrC,yEACA,2BAAOT,KAAK,WAAWU,QAAStE,EAAMuE,gBAAiB3D,KAAK,kBAAkB2B,UAAU,WAAWC,SAAUxC,EAAMU,oBCwDhH8D,MAlEf,SAA6BxE,GACzB,IAAIyE,EAASzE,EAAMK,SAAWL,EAAMqE,WAAW,GAC3CK,EAASD,EAASzE,EAAMqE,WAAW,GACnCM,EAASD,EAAS1E,EAAMqE,WAAW,GAEnCO,EAAe,KACfC,EAAe,KACfC,EAAgB,GAChBC,EAAgB,GAChBC,EAAgB,GAuCpB,OArCIP,EAASzE,EAAMqE,WAAW,IACVO,EAAZH,EAAS,EAAkB,QAAUA,EACrB,KAEpBK,EAAgB,CAACG,QAAS,UAE1BH,EAAgB,CAACG,QAAS,QAG1BP,EAAS1E,EAAMqE,WAAW,IACVQ,EAAZH,EAAS,EAAkB,QAAUA,EACrB,KAEpBK,EAAgB,CAACE,QAAS,SACtBP,EAAS,IAAGA,EAAS,IAEzBK,EAAgB,CAACE,QAAS,QAI1BD,EADAL,EAAS,EACO,CAACM,QAAS,SAEV,CAACA,QAAS,QAgB1B,yBAAK1C,UAAU,sBACX,kBAAC,EAAD,CAAe4B,MAAM,IAAIH,WAAYhE,EAAMgE,WAAW,GAAIK,WAAYrE,EAAMqE,WAAW,GAAIE,gBAAiBvE,EAAMuE,gBAAgB,GAAIH,SAAUpE,EAAMK,SAAUK,gBAdxK,SAAuBD,GACnBT,EAAMU,gBAAgBD,EAAME,OAAOC,KAAO,IAAKH,EAAME,OAAOE,UAcxD,kBAAC,EAAD,CAAesD,MAAM,IAAIH,WAAYhE,EAAMgE,WAAW,GAAIK,WAAYrE,EAAMqE,WAAW,GAAIE,gBAAiBvE,EAAMuE,gBAAgB,GAAIH,SAAUpE,EAAMK,SAAUK,gBAXxK,SAAuBD,GACnBT,EAAMU,gBAAgBD,EAAME,OAAOC,KAAO,IAAKH,EAAME,OAAOE,UAWxD,kBAAC,EAAD,CAAesD,MAAM,IAAIH,WAAYhE,EAAMgE,WAAW,GAAIK,WAAYrE,EAAMqE,WAAW,GAAIE,gBAAiBvE,EAAMuE,gBAAgB,GAAIH,SAAUpE,EAAMK,SAAUK,gBARxK,SAAuBD,GACnBT,EAAMU,gBAAgBD,EAAME,OAAOC,KAAO,IAAKH,EAAME,OAAOE,UAQxD,yBAAK0B,UAAU,UAAUiB,MAAOsB,GAC5B,uCADJ,IACqBF,EADrB,oCAGA,yBAAKrC,UAAU,UAAUiB,MAAOuB,GAC5B,uCADJ,IACqBF,EADrB,oCAGA,yBAAKtC,UAAU,UAAUiB,MAAOwB,GAC5B,uCADJ,cAC+BL,EAD/B,qCCKGO,MA9Df,SAAuBlF,GAKnB,IAAImF,EACAC,EA0CJ,MAxCwB,UAApBpF,EAAMqF,WACNF,EAAgB,kBAAC,EAAD,CACZzE,gBAAiBV,EAAMU,kBAE3B0E,EAAmB,yBAAK7C,UAAU,eAAf,gLAMM,UAApBvC,EAAMqF,WACXF,EAAgB,kBAAC,EAAD,CACZnB,WAAYhE,EAAMgE,WAAW,GAC7BtD,gBAAiBV,EAAMU,kBAE3B0E,EAAmB,yBAAK7C,UAAU,eAAf,qMAMM,eAApBvC,EAAMqF,YACXF,EAAgB,kBAAC,EAAD,CACZnB,WAAYhE,EAAMgE,WAClBK,WAAYrE,EAAMqE,WAClBE,gBAAiBvE,EAAMuE,gBACvBlE,SAAUL,EAAMK,SAChBK,gBAAiBV,EAAMU,kBAE3B0E,EAAmB,yBAAK7C,UAAU,eAAf,8dAYnB,yBAAKA,UAAU,aACX,wCACA,4BAAQ3B,KAAK,YAAYC,MAAOb,EAAMqF,UAAW7C,SAlDzD,SAAsB/B,GAClBT,EAAMU,gBAAgBD,EAAME,OAAOC,KAAMH,EAAME,OAAOE,SAkD9C,4BAAQA,MAAM,SAAd,kBACA,4BAAQA,MAAM,SAAd,gBACA,4BAAQA,MAAM,cAAd,oBAEHsE,EACAC,ICjBEE,MAzCf,SAAyBtF,GACrB,SAASQ,EAAaC,GAClBT,EAAMU,gBAAgBD,EAAME,OAAOC,KAAMH,EAAME,OAAOE,OAG1D,IAAIsE,EAUA,MARoB,UAApBnF,EAAMqF,UAAuBF,EAAgB,kBAAC,EAAD,CACzCzE,gBAAiBV,EAAMU,kBAEF,UAApBV,EAAMqF,YAAuBF,EAAgB,kBAAC,EAAD,CAC9CnB,WAAYhE,EAAMgE,WAAW,GAC7BtD,gBAAiBV,EAAMU,mBAU3B,yBAAK6B,UAAU,aACX,wCACA,4BAAQ3B,KAAK,YAAYC,MAAOb,EAAMqF,UAAW7C,SAAUhC,GACvD,4BAAQK,MAAM,SAAd,kBACA,4BAAQA,MAAM,SAAd,iBAEJ,6CACA,4BAAQD,KAAK,iBAAiBC,MAAOb,EAAMuF,eAAgB/C,SAAUhC,GACjE,4BAAQK,MAAM,OAAd,iBACA,4BAAQA,MAAM,UAAd,WACA,4BAAQA,MAAM,QAAd,mBAEJ,sCACA,2BAAOD,KAAK,UAAUgD,KAAK,SAAS/C,MAAOb,EAAMwF,QAAS3B,IAAI,IAAIrB,SAAUhC,IAC3E2E,ICMEM,MAzCf,SAAkBzF,GAKd,IAAMmF,EAAmC,eAAnBnF,EAAMmD,SACxB,kBAAC,EAAD,CACIkC,UAAWrF,EAAMqF,UACjBrB,WAAYhE,EAAMgE,WAClBK,WAAYrE,EAAMqE,WAClBE,gBAAiBvE,EAAMuE,gBACvBlE,SAAUL,EAAMK,SAChBK,gBAAiBV,EAAMU,kBAE3B,kBAAC,EAAD,CACI2E,UAAWrF,EAAMqF,UACjBE,eAAgBvF,EAAMuF,eACtBC,QAASxF,EAAMwF,QACfxB,WAAYhE,EAAMgE,WAClBK,WAAYrE,EAAMqE,WAClBhE,SAAUL,EAAMK,SAChBK,gBAAiBV,EAAMU,kBAGzBgF,EAAS1F,EAAM2F,MACrB,4BAAQpD,UAAU,eAAekB,QAxBjC,SAAqBhD,GACjBT,EAAMU,gBAAgB,YAAY,KAuBtC,SACA,4BAAQ6B,UAAU,kBAAlB,cAEA,OACI,yBAAKA,UAAU,YACX,kBAAC,EAAD,CAAcY,SAAUnD,EAAMmD,SAAUzC,gBAAiBV,EAAMU,kBAC/D,6CACA,4BAAKV,EAAMmD,UACVgC,EACAO,ICuKEE,MA7Mf,SAAkB5F,GAAQ,IACd6F,EAA0C7F,EAA1C6F,SAAUvF,EAAgCN,EAAhCM,SAAUwF,EAAsB9F,EAAtB8F,kBAExBC,EAAa,EACbC,EAAa,EACbC,EAAa,EACbC,EAAa,EACXC,EAAO,GACPC,EAAQ,GACRC,EAAS,GACTC,EAAU,GACVC,EAAY,GACZC,EAAO,GACPC,EAAO,GACPC,EAAQ,GACRC,EAAa,GACbC,EAAY,GACZnG,EAAQ,GACRoG,EAAQ,GACRC,EAAQ,GA8Bd,SAASC,EAAgBtG,GACrB,IAAMuG,EAAY1G,EAASgB,QAAO,SAAAQ,GAAI,OAAIA,EAAKK,OAAS1B,EAAME,OAAOsG,MAErE,GAAID,GAAaA,EAAUrF,OAAS,EAAG,CACnC,IAAMuF,EAAW,0BAA4BF,EAAU,GAAGE,SAE1DpB,EAAkBoB,EAAU,UAIpC,SAASC,EAAiB1G,GACtB,IAAMuG,EAAY1G,EAASgB,QAAO,SAAAQ,GAAI,OAAIA,EAAKK,OAAS1B,EAAME,OAAOsG,MAErE,GAAID,GAAaA,EAAUrF,OAAS,EAAG,CACnC,IAAMuF,EAAW,0BAA4BF,EAAU,GAAGE,SAE1DpB,EAAkBoB,EAAU,SAIpC,SAASE,EAAY3G,GACjBqF,EAAkB,KAAM,QAjD5BD,EAASwB,SAAQ,SAAAvF,GACU,UAAnBA,EAAKwF,WACL7G,EAAM8G,KAAKzF,GACXkE,GAAclE,EAAK0F,OAEK,UAAnB1F,EAAKwF,WACVT,EAAMU,KAAKzF,GACXmE,GAAcnE,EAAK0F,OAEK,UAAnB1F,EAAKwF,WACNxF,EAAK8E,UAAWA,EAAUW,KAAKzF,GACZ,SAAdA,EAAK2F,KAAiBtB,EAAKoB,KAAKzF,GAClB,YAAdA,EAAK2F,KAAoBrB,EAAMmB,KAAKzF,GACtB,WAAdA,EAAK2F,KAAmBpB,EAAOkB,KAAKzF,GACtB,cAAdA,EAAK2F,KAAsBnB,EAAQiB,KAAKzF,GAC1B,cAAdA,EAAK2F,KAAsBlB,EAAUgB,KAAKzF,GAC5B,SAAdA,EAAK2F,KAAiBjB,EAAKe,KAAKzF,GAClB,SAAdA,EAAK2F,KAAiBhB,EAAKc,KAAKzF,GAClB,UAAdA,EAAK2F,KAAkBf,EAAMa,KAAKzF,GACtC6E,EAAWY,KAAKzF,GACrBiE,GAAcjE,EAAK0F,QAGnBV,EAAMS,KAAKzF,GACXoE,GAAcpE,EAAK0F,UA4B3B,IAAME,EAAc3B,EAAa,EAAI,uCAAaA,EAAb,KAAiC,KAEhE4B,EAAaxB,EAAKxE,OAAS,EAAI,uBAAGY,UAAU,eAAb,QAAsC,KACrEqF,EAAezB,EAAK0B,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAElH,KAAOmH,EAAEnH,KAAQ,GAAK,KAAGiB,KAAI,SAACC,EAAMC,GAC5E,IAAMiG,EAAWlG,EAAK0F,MAAQ,EAAI,KAAO1F,EAAK0F,MAAQ,KAEtD,OAAO,uBAAGP,GAAInF,EAAKP,IAAK0G,eAAgBlB,EAAiBmB,eAAgBd,EAAa7F,IAAKQ,GAAQD,EAAKlB,KAAMoH,MAG5GG,EAAc/B,EAAMzE,OAAS,EAAI,uBAAGY,UAAU,eAAb,WAAyC,KAC1E6F,EAAgBhC,EAAMyB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAElH,KAAOmH,EAAEnH,KAAQ,GAAK,KAAGiB,KAAI,SAACC,EAAMC,GAC9E,IAAMiG,EAAWlG,EAAK0F,MAAQ,EAAI,KAAO1F,EAAK0F,MAAQ,KAEtD,OAAO,uBAAGP,GAAInF,EAAKP,IAAK0G,eAAgBlB,EAAiBmB,eAAgBd,EAAa7F,IAAKQ,GAAQD,EAAKlB,KAAMoH,MAG5GK,EAAehC,EAAO1E,OAAS,EAAI,uBAAGY,UAAU,eAAb,UAAwC,KAC3E+F,EAAiBjC,EAAOwB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAElH,KAAOmH,EAAEnH,KAAQ,GAAK,KAAGiB,KAAI,SAACC,EAAMC,GAChF,IAAMiG,EAAWlG,EAAK0F,MAAQ,EAAI,KAAO1F,EAAK0F,MAAQ,KAEtD,OAAO,uBAAGP,GAAInF,EAAKP,IAAK0G,eAAgBlB,EAAiBmB,eAAgBd,EAAa7F,IAAKQ,GAAQD,EAAKlB,KAAMoH,MAG5GO,EAAgBjC,EAAQ3E,OAAS,EAAI,uBAAGY,UAAU,eAAb,aAA2C,KAChFiG,EAAkBlC,EAAQuB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAElH,KAAOmH,EAAEnH,KAAQ,GAAK,KAAGiB,KAAI,SAACC,EAAMC,GAClF,IAAMiG,EAAWlG,EAAK0F,MAAQ,EAAI,KAAO1F,EAAK0F,MAAQ,KAEtD,OAAO,uBAAGP,GAAInF,EAAKP,IAAK0G,eAAgBlB,EAAiBmB,eAAgBd,EAAa7F,IAAKQ,GAAQD,EAAKlB,KAAMoH,MAG5GS,EAAkBlC,EAAU5E,OAAS,EAAI,uBAAGY,UAAU,eAAb,aAA2C,KACpFmG,EAAoBnC,EAAUsB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAElH,KAAOmH,EAAEnH,KAAQ,GAAK,KAAGiB,KAAI,SAACC,EAAMC,GACtF,IAAMiG,EAAWlG,EAAK0F,MAAQ,EAAI,KAAO1F,EAAK0F,MAAQ,KAEtD,OAAO,uBAAGP,GAAInF,EAAKP,IAAK0G,eAAgBlB,EAAiBmB,eAAgBd,EAAa7F,IAAKQ,GAAQD,EAAKlB,KAAMoH,MAG5GW,EAAanC,EAAK7E,OAAS,EAAI,uBAAGY,UAAU,eAAb,QAAsC,KACrEqG,EAAepC,EAAKqB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAElH,KAAOmH,EAAEnH,KAAQ,GAAK,KAAGiB,KAAI,SAACC,EAAMC,GAC5E,IAAMiG,EAAWlG,EAAK0F,MAAQ,EAAI,KAAO1F,EAAK0F,MAAQ,KAEtD,OAAO,uBAAGP,GAAInF,EAAKP,IAAK0G,eAAgBlB,EAAiBmB,eAAgBd,EAAa7F,IAAKQ,GAAQD,EAAKlB,KAAMoH,MAG5Ga,EAAapC,EAAK9E,OAAS,EAAI,uBAAGY,UAAU,eAAb,QAAsC,KACrEuG,EAAerC,EAAKoB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAElH,KAAOmH,EAAEnH,KAAQ,GAAK,KAAGiB,KAAI,SAACC,EAAMC,GAC5E,IAAMiG,EAAWlG,EAAK0F,MAAQ,EAAI,KAAO1F,EAAK0F,MAAQ,KAEtD,OAAO,uBAAGP,GAAInF,EAAKP,IAAK0G,eAAgBlB,EAAiBmB,eAAgBd,EAAa7F,IAAKQ,GAAQD,EAAKlB,KAAMoH,MAG5Ge,EAAcrC,EAAM/E,OAAS,EAAI,uBAAGY,UAAU,eAAb,SAAuC,KACxEyG,EAAgBtC,EAAMmB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAElH,KAAOmH,EAAEnH,KAAQ,GAAK,KAAGiB,KAAI,SAACC,EAAMC,GAC9E,IAAMiG,EAAWlG,EAAK0F,MAAQ,EAAI,KAAO1F,EAAK0F,MAAQ,KAEtD,OAAO,uBAAGP,GAAInF,EAAKP,IAAK0G,eAAgBlB,EAAiBmB,eAAgBd,EAAa7F,IAAKQ,GAAQD,EAAKlB,KAAMoH,MAG5GiB,EAAmBtC,EAAWhF,OAAS,EAAI,uBAAGY,UAAU,eAAb,SAAuC,KAClF2G,EAAqBvC,EAAWkB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAElH,KAAOmH,EAAEnH,KAAQ,GAAK,KAAGiB,KAAI,SAACC,EAAMC,GACxF,IAAMiG,EAAWlG,EAAK0F,MAAQ,EAAI,KAAO1F,EAAK0F,MAAQ,KAEtD,OAAO,uBAAGP,GAAInF,EAAKP,IAAK0G,eAAgBlB,EAAiBmB,eAAgBd,EAAa7F,IAAKQ,GAAQD,EAAKlB,KAAMoH,MAG5GmB,EAAkBvC,EAAUjF,OAAS,EAAI,uBAAGY,UAAU,eAAb,aAA2C,KACpF6G,EAAoBxC,EAAUiB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAElH,KAAOmH,EAAEnH,KAAQ,GAAK,KAAGiB,KAAI,SAACC,EAAMC,GACtF,IAAMiG,EAAWlG,EAAK0F,MAAQ,EAAI,KAAO1F,EAAK0F,MAAQ,KAEtD,OAAO,uBAAGP,GAAInF,EAAKP,IAAK0G,eAAgBlB,EAAiBmB,eAAgBd,EAAa7F,IAAKQ,GAAQD,EAAKlB,KAAMoH,MAG5GqB,EAAcrD,EAAa,EAAI,uCAAaA,EAAb,KAAiC,KAChEsD,EAAgB7I,EAAMoH,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAElH,KAAOmH,EAAEnH,KAAQ,GAAK,KAAGiB,KAAI,SAACC,EAAMC,GAC9E,IAAMiG,EAAWlG,EAAK0F,MAAQ,EAAI,KAAO1F,EAAK0F,MAAQ,KACtD,OAAO,uBAAGP,GAAInF,EAAKP,IAAK0G,eAAgBd,EAAkBe,eAAgBd,EAAa7F,IAAKQ,GAAQD,EAAKlB,KAAMoH,MAG7GuB,EAActD,EAAa,EAAI,uCAAaA,EAAb,KAAiC,KAChEuD,EAAgB3C,EAAMgB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAElH,KAAOmH,EAAEnH,KAAQ,GAAK,KAAGiB,KAAI,SAACC,EAAMC,GAC9E,IAAMiG,EAAWlG,EAAK0F,MAAQ,EAAI,KAAO1F,EAAK0F,MAAQ,KAEtD,OAAO,uBAAGP,GAAInF,EAAKP,IAAK0G,eAAgBd,EAAkBe,eAAgBd,EAAa7F,IAAKQ,GAAQD,EAAKlB,KAAMoH,MAG7GyB,EAAcvD,EAAa,EAAI,sCAAYA,EAAZ,KAAgC,KAC/DwD,EAAgB5C,EAAMe,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAElH,KAAOmH,EAAEnH,KAAQ,GAAK,KAAGiB,KAAI,SAACC,EAAMC,GAC9E,IAAMiG,EAAWlG,EAAK0F,MAAQ,EAAI,KAAO1F,EAAK0F,MAAQ,KAEtD,OAAO,uBAAGP,GAAInF,EAAKP,IAAK0G,eAAgBd,EAAkBe,eAAgBd,EAAa7F,IAAKQ,GAAQD,EAAKlB,KAAMoH,MAGnH,OACI,yBAAKzF,UAAU,YACX,wBAAIiB,MAAO,CAACmG,aAAc,UAA1B,aACA,yBAAKpH,UAAU,iBACX,yBAAKA,UAAU,QACVmF,EACAC,EACAC,EACAO,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEL,yBAAK7G,UAAU,QACV8G,EACAC,EACAC,EACAC,EACAC,EACAC,MCjKNE,MArCf,SAAmB5J,GAAQ,IACfgE,EAAkGhE,EAAlGgE,WAAY6F,EAAsF7J,EAAtF6J,UAAWC,EAA2E9J,EAA3E8J,UAAWzE,EAAgErF,EAAhEqF,UAAWlB,EAAqDnE,EAArDmE,MAAO0B,EAA8C7F,EAA9C6F,SAAUkE,EAAoC/J,EAApC+J,eAAgBC,EAAoBhK,EAApBgK,gBAElFC,EAAU,GAGd,SAASjH,EAAYvC,GACjB,IAAMsB,EAAQ8H,EAAUK,WAAU,SAAApI,GAC9B,OAAOrB,EAAME,OAAOwJ,IAAIC,SAAStI,EAAKoF,aAGpCmD,EAAcP,EAAUD,EAAU9H,GAAQkI,GAEhDF,EAAeM,GACfL,EAAgB,IAVpBC,EAAUA,EAAQK,OAAOzE,GAezB,IAFA,IAAI0E,EAAS,GAEJ7I,EAAI,EAAGA,EAAIsC,EAAYtC,IAAK,CACjC,IAAM8I,EAAW,2BAA6BX,EAAUnI,GAAGwF,SAC3DqD,EAAOhD,KAAK,yBAAKhF,UAAU,aAAahB,IAAKG,GAAG,yBAAKa,UAAU,cAAc4H,IAAKK,EAAUC,IAAKZ,EAAUnI,GAAGd,KAAM6C,QAAST,MAGjI,IAAM0H,EAA0B,eAAdrF,EAA6B,YAAclB,EAAQ,KAErE,OACI,yBAAK5B,UAAU,YACX,oCAAUmI,GACV,yBAAKnI,UAAU,mBACVgI,GAEL,0DC4BGI,MAzDf,SAAe3K,GAAQ,IACXC,EAAmMD,EAAnMC,aAAcI,EAAqLL,EAArLK,SAAU8C,EAA2KnD,EAA3KmD,SAAUqC,EAAiKxF,EAAjKwF,QAASxB,EAAwJhE,EAAxJgE,WAAY4G,EAA4I5K,EAA5I4K,cAAevF,EAA6HrF,EAA7HqF,UAAWlB,EAAkHnE,EAAlHmE,MAAO0B,EAA2G7F,EAA3G6F,SAAUgE,EAAiG7J,EAAjG6J,UAAWvJ,EAAsFN,EAAtFM,SAAUwJ,EAA4E9J,EAA5E8J,UAAWC,EAAiE/J,EAAjE+J,eAAgBC,EAAiDhK,EAAjDgK,gBAAiBa,EAAgC7K,EAAhC6K,SAAU/E,EAAsB9F,EAAtB8F,kBAEjLgF,EAAwB,KACxBC,EAA4B,KAEhC,GAAIzK,EAAU,CACV,IAAMa,EAAiBC,OAAOC,KAAKf,GAClCgB,QAAO,SAAAC,GACJ,OAAQjB,EAASiB,GAAKX,OAASX,KAChC,GAEGiH,EAAW,2BAA6B5G,EAASa,GAAgB+F,SACjE8D,EAAe,2BAA6B1K,EAASa,GAAgB6J,aAC3EF,EAAwB,yBAAKvI,UAAU,qBAAqB4H,IAAKjD,EAAUuD,IAAKzK,EAAMC,eACtF8K,EAA4B,yBAAKxI,UAAU,qBAAqB4H,IAAKa,EAAcP,IAAKzK,EAAMC,aAAe,YAGjH,IAAIgL,EAAe,KAEfpB,EAAUlI,OAAS,IACnBsJ,EAAe,kBAAC,EAAD,CACXjH,WAAYA,EACZ8F,UAAWA,EACX3F,MAAOA,EACPkB,UAAWA,EACXwE,UAAWA,EACXhE,SAAUA,EACVkE,eAAgBA,EAChBC,gBAAiBA,KAIzB,IAAMkB,EAAwB,eAAb/H,EACb,2BAAG,sCAAeyH,EAAlB,IAAkCvK,GAClC,2BAAG,mCAAYuK,EAAf,IAA+BpF,GAEnC,OACI,6BACI,yBAAKjD,UAAU,YACX,4BAAKtC,GACL,6BACC6K,EACAC,EACAG,GAEJD,EACD,kBAAC,EAAD,CACIpF,SAAUA,EACVvF,SAAUA,EACVwF,kBAAmBA,IAEvB,4BAAQrC,QAASoH,GAAjB,aC8CGM,MA9Ff,SAAanL,GACT,IAAIoL,EAAW,KADC,EAG2BC,mBAAS,MAHpC,mBAGTC,EAHS,KAGKC,EAHL,OAIiCF,mBAAS,SAJ1C,mBAITG,EAJS,KAIQC,EAJR,KAWZC,EAAU,KAqEd,OAnEIJ,IACAI,EAAU,yBAAKnJ,UAAW,gBAAgBiJ,GAAiB,yBAAKrB,IAAKmB,EAAcb,IAAI,OAIvFW,EADApL,EAAM2L,WAEF,6CAIE3L,EAAMM,UAAaN,EAAMO,UAM1BP,EAAM4L,SAEP,kBAAC,EAAD,CACIvG,UAAWrF,EAAMqF,UACjBlC,SAAUnD,EAAMmD,SAChBlD,aAAcD,EAAMC,aACpBC,eAAgBF,EAAME,eACtBG,SAAUL,EAAMK,SAChBmF,QAASxF,EAAMwF,QACfxB,WAAYhE,EAAMgE,WAAWhE,EAAMmE,MAAM,GACzCE,WAAYrE,EAAMqE,WAAWrE,EAAMmE,MAAM,GACzCyG,cAAe5K,EAAM4K,cACrBzG,MAAOnE,EAAMmE,MACb0B,SAAU7F,EAAM6F,SAChBvF,SAAUN,EAAMM,SAChBuJ,UAAW7J,EAAM6J,UACjBC,UAAW9J,EAAM8J,UACjBC,eAAgB/J,EAAM+J,eACtBC,gBAAiBhK,EAAMgK,gBACvBlE,kBA1CZ,SAA2B+F,EAAOC,GAC9BP,EAAmBM,GACnBJ,EAAsBK,IAyCdjB,SAAU7K,EAAM6K,WAKxB,6BACI,kBAAC,EAAD,CACI5K,aAAcD,EAAMC,aACpBC,eAAgBF,EAAME,eACtBC,iBAAkBH,EAAMG,iBACxBC,cAAeJ,EAAMI,cACrBC,SAAUL,EAAMK,SAChBC,SAAUN,EAAMM,SAChBC,UAAWP,EAAMO,UACjBG,gBAAiBV,EAAMQ,eAE3B,kBAAC,EAAD,CACI2C,SAAUnD,EAAMmD,SAChBkC,UAAWrF,EAAMqF,UACjBE,eAAgBvF,EAAMuF,eACtBC,QAASxF,EAAMwF,QACfxB,WAAYhE,EAAMgE,WAClBK,WAAYrE,EAAMqE,WAClBE,gBAAiBvE,EAAMuE,gBACvBlE,SAAUL,EAAMK,SAChBsF,MAAO3F,EAAM2F,MACbjF,gBAAiBV,EAAMQ,gBAlD3B,yBAAKgD,MAAO,CAACmG,aAAc,SAA3B,cAwDJ,yBAAKpH,UAAU,OACX,4BAAQA,UAAU,cAAlB,eAGC6I,EACAM,EACD,yBAAKnJ,UAAU,YAAYiB,MAAO,CAACU,QAAS,MAAO6H,UAAW,eAA9D,sOC9EGC,MAlBf,SAAkB1L,EAAUuJ,GACxB,IAAIoC,GAAQ,EACRC,EAAa,KAEjB,GAAwB,IAApB5L,EAASqB,OAAc,OAAO,KAElC,IANmC,iBAS/B,IAAMwK,GAFND,EAAa5L,EAAS8L,KAAKC,MAAMD,KAAKE,SAAWhM,EAASqB,UAE5BQ,MACP0H,GAAaA,EAAUlI,OAAS,EAAKkI,EAAUK,WAAU,SAAApI,GAAI,OAAIA,EAAKK,OAASgK,MAAe,GAEjG,IAAGF,GAAQ,KAN3BA,GAAQ,IAShB,OAAOC,GCkWIK,MAhTf,SAAqBvM,GAAQ,IACjBC,EAA6GD,EAA7GC,aAAcC,EAA+FF,EAA/FE,eAAgBI,EAA+EN,EAA/EM,SAAqBuF,GAA0D7F,EAArEO,UAAqEP,EAA1D6F,UAAUxF,EAAgDL,EAAhDK,SAAUmM,EAAsCxM,EAAtCwM,QAASjI,EAA6BvE,EAA7BuE,gBAAiBiB,EAAYxF,EAAZwF,QAEnGiH,EAAY,CAAE,KAAQ,EACvB,IAAO,EAAG,IAAO,EAAG,KAAQ,EAAG,KAAQ,EAAG,IAAO,EAAG,IAAO,EAAG,MAAS,EACvE,IAAO,EAAG,KAAQ,EAAG,IAAO,EAAG,KAAQ,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EACrE,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,KAAQ,EAAG,KAAQ,EAAG,KAAQ,EAAG,IAAO,EACtE,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EACnE,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EACnE,OAAU,EAAG,MAAS,EAAG,MAAS,EAClC,MAAU,GAETtL,EAAiBC,OAAOC,KAAKf,GAClCgB,QAAO,SAAAC,GACJ,OAAOjB,EAASiB,GAAKX,OAASX,KAC/B,GAEGuB,EAAclB,EAASa,GAAgBM,aAEvCiL,EAqJN,SAA8BC,EAAMC,GAChC,IAAKD,EAAM,MAAO,GAElB,IAAID,EAAe,GAgBnB,OAdAC,EAAKtF,SAAQ,SAAAvF,GAGT,IAFA,IAAImK,GAAQ,EAEHvK,EAAI,EAAGA,EAAIkL,EAAQjL,OAAQD,IAAK,CACrC,IAAIkL,EAAQlL,GAAGmL,MAEKC,EAAehL,EAAM8K,EAAQlL,MAEhCuK,GAAQ,GAGxBA,GAAOS,EAAanF,KAAKzF,MAG3B4K,EAxKUK,CAAqBlH,EAAUrE,GAGhDwL,EAAqB,KAEzB,GAAqB,gBAAjB/M,EAAgC,CAChC,IAAMgN,EAAmBpH,EAASvE,QAAO,SAAAQ,GACrC,IAAMoL,EAAapL,EAAKqL,OAExB,SAAID,GAAcA,EAAWE,OAAO,IAAIC,OAAO,UAAW,OAAS,MAMnEhN,EAAWiN,EAAUzH,GAAYyH,EAAUL,IAAqB,KAChED,EAAqB,CAAC,CAClBO,YAAa,GACbC,MAAO,kBAId,GAAqB,eAAjBvN,EAA+B,CAkBpC,IAjBA,IAAMwN,EAAoB,CAAC,WAAY,SAAU,QAAS,SAAU,YAAY5L,KAAI,SAAA6L,GAChF,MAAO,CACHA,QAASA,EACTlG,MAAO8F,EAAUzH,EAASvE,QAAO,SAAAQ,GAC7B,OAAIA,EAAK6L,eAAiBD,GAGtB5L,EAAK8L,gBAAkBF,UAOpC7F,MAAK,SAACgG,EAAIC,GAAL,OAAYA,EAAGtG,MAAQqG,EAAGrG,SAE9BA,EAAQ,EACH9F,EAAI,EAAGA,EAAI,EAAGA,IACnB8F,GAAS4E,KAAKvI,IAAI,EAAG4J,EAAkB/L,GAAG8F,OAG9C,GAAInH,EAAWiN,EAAUzH,GAAY2B,GAAS,GAAI,CAI9C,IAHA,IAAMuG,EAAWN,EAAkB,GAAGjG,MAElCwG,EAAqB,GAChBtM,EAAI,EAAGA,EAAI,EAAGA,IACf+L,EAAkB/L,GAAG8F,MAAQ,GAAKiG,EAAkB/L,GAAG8F,OAASuG,GAAUC,EAAmBzG,KAAKkG,EAAkB/L,GAAGgM,SAG/HV,EAAqB,CAAC,CAClBO,YAAa,EACbG,QAASM,KAKrB,IAAIC,EAAW,EACXC,EAAW,EA+Gf,SAASZ,EAAUX,GACf,IAAInF,EAAQ,EAQZ,OANImF,GACAA,EAAKtF,SAAQ,SAAAvF,GACJA,EAAK8E,YAAWY,GAAS1F,EAAK0F,UAIpCA,EAGX,SAAS2G,EAAiBxB,EAAMyB,GAC5B,IAAI5G,EAAQ,EAUZ,OARImF,GACAA,EAAKtF,SAAQ,SAAAvF,GACLgL,EAAehL,EAAMsM,KACrB5G,GAAS1F,EAAK0F,UAKnBA,EAGX,SAASsF,EAAeuB,EAAMD,GAE1B,IAAIE,GAAQ,EACRZ,GAAU,EACVa,GAAmB,EACnBf,GAAQ,EACRgB,GAAO,EACP5K,GAAO,EACP6K,GAAO,EAaX,GAXoB,oBAAhBL,EAAOxN,OACP2N,GAAmB,EAEfF,EAAKV,eAAiBzN,IACtBqO,GAAmB,GAEnBF,EAAKT,gBAAkB1N,IACvBqO,GAAmB,IAIvBH,EAAOV,QAAS,CAChBA,GAAU,EAEV,IAAK,IAAIgB,EAAI,EAAGA,EAAIN,EAAOV,QAAQ/L,OAAQ+M,IACnCL,EAAKV,eAAiBS,EAAOV,QAAQgB,KACrChB,GAAU,GAEVW,EAAKT,gBAAkBQ,EAAOV,QAAQgB,KACtChB,GAAU,GAKtB,GAAIU,EAAOE,MAAO,CACdA,GAAQ,EAER,IAAMzK,EAAMuK,EAAOE,MAAMzK,IACnBC,EAAMsK,EAAOE,MAAMxK,IAEnB6K,OAAkBC,IAAZP,EAAKQ,GAAmB,EAAIR,EAAKQ,GAEzCF,GAAO9K,GAAO8K,GAAO7K,IAAKwK,GAAQ,GAG1C,GAAIF,EAAOZ,MAAO,CAGdA,GAAQ,EAER,IAAMN,EAAamB,EAAKlB,OAEpBD,GAAcA,EAAWE,OAAO,IAAIC,OAAOe,EAAOZ,MAAO,OAAS,IAClEA,GAAQ,GAGhB,GAAIY,EAAOI,KAAM,CACbA,GAAO,EAEP,IAAMM,EAAWT,EAAKI,KAElBK,GAAYA,EAAS1B,OAAO,IAAIC,OAAO,oBAAsBe,EAAOI,KAAK,GAAK,MAAO,OAAS,IAC9FA,GAAO,GAGf,GAAIJ,EAAOxK,KAAM,CACbA,GAAO,EAEP,IAAMmL,EAAWV,EAAK/G,UAElByH,GAAYX,EAAOxK,KAAKoL,MAAK,SAAAlN,GAAI,OAAIA,IAASiN,OAC9CnL,GAAO,GAWf,OARIwK,EAAOK,OACPA,GAAO,EAEHJ,EAAKI,MAAQJ,EAAKI,KAAKrB,OAAO,IAAIC,OAAOe,EAAOK,KAAM,OAAS,IAC/DA,GAAO,IAIRf,GAAWY,GAASd,GAASgB,GAAQ5K,GAAQ2K,GAAoBE,EAG5E,OA5NIjC,IACAyB,EAAW,EACXC,EAAW1I,GAGMlF,EAASgB,QAAO,SAAA+M,GACjC,GAAuB,iBAAnBA,EAAK/G,UAA8B,OAAO,EAC9C,GAAuB,UAAnB+G,EAAK/G,UAAuB,OAAO,EACvC,GAAuB,aAAnB+G,EAAK/G,UAA0B,OAAO,EAC1C,GAAuB,UAAnB+G,EAAK/G,UAAuB,OAAO,EACvC,GAAuB,cAAnB+G,EAAK/G,UAA2B,OAAO,EAC3C,GAAI+G,EAAKY,UAAW,OAAO,EAE3B,GAAIZ,EAAKa,aAAc,OAAO,EAE9B,IAAIL,EAAK,EAKT,GAJIR,EAAKQ,KAAIA,EAAKR,EAAKQ,IACnBR,EAAKc,UAASN,GAAMR,EAAKc,UACzBd,EAAKe,aAAef,EAAKgB,oBAAkBR,GAAM,GAEjDA,EAAKZ,EAAU,OAAO,EAC1B,GAAIY,EAAKX,EAAU,OAAO,EAK1B,GAAIG,EAAKiB,cAAgBjB,EAAKiB,aAAarP,aAAc,OAAO,EAChE,IAAKwM,EAAU4B,EAAKkB,WAAY,OAAO,EAIvC,IADA,IAAItD,GAAQ,EACHvK,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IACpC,IAAIF,EAAYE,GAAG6L,YAAnB,CAEA,IAAIiC,GAAc,EAElB,GAAI1C,EAAeuB,EAAM7M,EAAYE,IAGjC,GAFA8N,GAAc,EAEVhO,EAAYE,GAAG+N,IAEfD,GAAc,OAEb,GAAIhO,EAAYE,GAAGmL,MAAO,CAC3B,GAAKtI,EAEc4J,EAAiBzB,EAAclL,EAAYE,KAE5CF,EAAYE,GAAGmL,QAEzB2C,GAAc,QANAA,GAAc,EAYxCA,IAAavD,GAAQ,GAG7B,IAAKA,EAAO,OAAO,EAGnB,IAAIyD,GAAU,EAWd,GATA7J,EAASwB,SAAQ,SAAAvF,GACTA,EAAKlB,OAASyN,EAAKzN,MACfkB,EAAK0F,OAAS6G,EAAKsB,aAEnBD,GAAU,MAKlBA,EAAS,OAAO,EAGpB,GAAI1C,EACA,IAAK,IAAItL,EAAI,EAAGA,EAAIsL,EAAmBrL,OAAQD,IAC3C,IAAKoL,EAAeuB,EAAMrB,EAAmBtL,IACzC,OAAO,EAKnB,OAAO,MCpMAkO,MA/Bf,SAAuB5P,GAAQ,IACnBqE,EAAkDrE,EAAlDqE,WAAYyF,EAAsC9J,EAAtC8J,UAAWjE,EAA2B7F,EAA3B6F,SAAU5F,EAAiBD,EAAjBC,aACrCgK,EAAU,GAEdA,EAAUA,EAAQK,OAAOzE,GAIzB,IAFA,IAAI+E,EAAgB,EAEbA,EAAgBvG,GAAY,CAG/BrE,EAAM6F,SAAWoE,EACjB,IAAI4F,EAAetD,EAAYvM,GAEzBqO,EAAOrC,EAAS6D,GAEtB5F,EAAUH,EAAUuE,EAAMpE,GAIrBoE,EAAKzH,WAAWgE,IAEA,gBAAjB3K,GAAmD,eAAjBA,IAClCD,EAAM6F,SAAWoE,EACjB4F,EAAetD,EAAYvM,IAInC,OAAOiK,GCXI6F,MAjBf,SAAqB9P,GAQjB,IARyB,IACjBgE,EAAehE,EAAfgE,WAGF6L,EAAetD,EAAYvM,GAE7B6J,EAAY,GAEPnI,EAAI,EAAGA,EAAIsC,EAAYtC,IAAK,CACjC,IAAM2M,EAAOrC,EAAS6D,EAAchG,GAEpCA,EAAUtC,KAAK8G,GAGnB,OAAOxE,GC8YIkG,MAzZf,WAAyB,IAAD,EACuB1E,mBAAS,gBADhC,mBACbpL,EADa,KACC+P,EADD,OAE2B3E,mBAAS,MAFpC,mBAEbnL,EAFa,KAEG+P,EAFH,OAG+B5E,mBAAS,MAHxC,mBAGblL,EAHa,KAGK+P,EAHL,OAIyB7E,mBAAS,QAJlC,mBAIbjL,EAJa,KAIE+P,EAJF,OAKe9E,mBAAS,MALxB,mBAKbhL,EALa,KAKH+P,EALG,OAMe/E,mBAAS,cANxB,mBAMblI,EANa,KAMHkN,EANG,OAOiBhF,mBAAS,SAP1B,mBAObhG,EAPa,KAOFiL,EAPE,OAQ2BjF,mBAAS,UARpC,mBAQb9F,EARa,KAQGgL,EARH,OASalF,mBAAS,GATtB,mBASb7F,EATa,KASJgL,EATI,OAUmBnF,mBAAS,CAAC,EAAG,EAAG,IAVnC,mBAUbrH,EAVa,KAUDyM,EAVC,OAWmBpF,mBAAS,CAAC,GAAI,GAAI,KAXrC,mBAWbhH,EAXa,KAWDqM,EAXC,OAY6BrF,mBAAS,EAAC,GAAM,GAAM,IAZnD,mBAYb9G,EAZa,KAYIoM,EAZJ,QAaetF,oBAAS,GAbxB,qBAabO,GAba,MAaHgF,GAbG,SAcevF,oBAAS,GAdxB,qBAcbwF,GAda,MAcHC,GAdG,SAgBezF,mBAAS,MAhBxB,qBAgBb/K,GAhBa,MAgBHyQ,GAhBG,SAiBiB1F,mBAAS,MAjB1B,qBAiBb9K,GAjBa,MAiBFyQ,GAjBE,SAmBmB3F,oBAAS,GAnB5B,qBAmBbM,GAnBa,MAmBDsF,GAnBC,SAoBe5F,mBAAS,IApBxB,qBAoBbxF,GApBa,MAoBHkE,GApBG,SAqBiBsB,mBAAS,IArB1B,qBAqBbxB,GArBa,MAqBFG,GArBE,SAsBSqB,mBAAS,GAtBlB,qBAsBblH,GAtBa,MAsBN+M,GAtBM,SAuBe7F,oBAAS,GAvBxB,qBAuBb8F,GAvBa,MAuBHC,GAvBG,MA0BhBC,GAAqB,EACrBC,GAAuB,EAE3B,GAAIzL,GACA,IAAK,IAAI/D,MAAQ+D,GAERA,GAAS/D,IAAM8E,YAAWyK,IAAsBxL,GAAS/D,IAAM0F,OACpE8J,IAAwBzL,GAAS/D,IAAM+M,GAAKhJ,GAAS/D,IAAM0F,MAuRnE,SAAS+J,GAAmBxP,EAAOlB,GAC/B,IAAI2Q,EAAW,IACfA,EAAWA,EAASlH,OAAOtG,IAClBjC,EAAM,GAAKlB,EACpB4P,EAAiBe,GAGrB,SAASC,GAAmB1P,EAAOlB,GAC/B,IAAI6Q,EAAW,IACfA,EAAWA,EAASpH,OAAOjG,IAClBtC,EAAM,GAAKlB,EACpB6P,EAAiBgB,GAGrB,SAASC,GAAwB5P,EAAOlB,GACpC,IAAI+Q,EAAgB,IACpBA,EAAgBA,EAActH,OAAO/F,IACvBxC,EAAM,IAAMwC,EAAgBxC,EAAM,GAChD4O,EAAsBiB,GAG1B,SAAS9H,GAAUuE,EAAM1B,GACrB,IAAIkF,EAAS,GAETxD,EAAKQ,KACLgD,EAASxD,EAAKQ,GACVR,EAAKe,cAAayC,GAAU,IAGhClF,IACsBA,EAAKhL,OAAS,EAAIgL,EAAKzC,WAAU,SAAApI,GAAI,OAAIA,EAAKP,MAAQ8M,EAAKlM,SAAS,IAErE,EACjBwK,EAAK9K,KAAI,SAAAC,GACL,OAAIA,EAAKlB,OAASyN,EAAKzN,MACnBkB,EAAK0F,MAAQ1F,EAAK0F,MAAQ,EACnB1F,GAGJA,KAIX6K,EAAKpF,KAAK,CAAE3G,KAAMyN,EAAKzN,KAAMW,IAAK8M,EAAKlM,KAAMmF,UAAW+G,EAAK/G,UAAWG,KAAM4G,EAAK5G,KAAMkG,aAAcU,EAAKV,aAAcC,cAAeS,EAAKT,cAAeT,OAAQkB,EAAKlB,OAAQ0B,GAAIgD,EAAQjL,UAAWyH,EAAKzH,UAAWY,MAAO,IAIpOmF,EAAO,CAAC,CAAE/L,KAAMyN,EAAKzN,KAAMW,IAAK8M,EAAKlM,KAAMmF,UAAW+G,EAAK/G,UAAWG,KAAM4G,EAAK5G,KAAMkG,aAAcU,EAAKV,aAAcC,cAAeS,EAAKT,cAAeT,OAAQkB,EAAKlB,OAAQ0B,GAAIgD,EAAQjL,UAAWyH,EAAKzH,UAAWY,MAAO,IAGlO,OAAOmF,EArUXmF,qBAAU,WAMNC,MAAM,0CACLC,MAAK,SAAAC,GACF,OAAOA,EAAIC,UAEdF,MAAK,SAAAC,GACFlB,GAAekB,MAElBE,OAAM,kBAAMlB,IAAiB,QAbL,IAE7Ba,qBAAU,WAgBNC,MAAM,2CACLC,MAAK,SAAAC,GACF,OAAOA,EAAIC,UAEdF,MAAK,SAAAC,GACFA,EAAMA,EAAIpQ,KAAI,SAAAC,GAEV,OADAA,EAAKsQ,MAAQC,KAAKC,MAAMxQ,EAAKsQ,OACtBtQ,KACR+F,MAAK,SAAC0K,EAAOC,GAAR,OAAkBD,EAAMtL,GAAKuL,EAAMvL,GAAK,GAAK,KAErD+J,GAAgBiB,MAEnBE,OAAM,iBA5BmB,IAqD9BL,qBAAU,WACN,GAAIlG,KAAauF,GAAU,CACvB,IAAMvG,EAA8B,eAAbzH,EAA6BkO,GAAqBC,GACrEmB,EAAc,EAElB,GAAiB,eAAbtP,EACA,GAAkB,eAAdkC,EAA4B,CAC5B,GAAIlB,GAAQ,EAAGsO,EAAcpS,OACxB,IAAK,IAAIqB,EAAI,EAAGA,EAAIyC,GAAOzC,IAAK+Q,GAAeC,SAASrO,EAAW3C,GAAI,IAExE+Q,EAAcpS,IAAUoS,EAAcpS,QAG1CoS,EAAcpS,OAKlBoS,EAAcjN,EAGlB,GAAIqL,IACA,GAAkB,UAAdxL,EAAuB,CAEvB,IAAMsH,EAAOiD,EAAc,CACvB3P,aAAcA,EACdC,eAAgBA,EAEhBG,SAAUA,EACVgE,WAAYhE,EACZmF,QAASA,EAAUoF,EACnB4B,QAAuB,YAAbrJ,EACV0C,SAAUA,GAEVvF,SAAUA,GACVwJ,UAAWA,KAGfC,GAAe4C,GACfmE,IAAe,GACfM,IAAe,QAEd,GAAIxG,EAAgB6H,EACrB,GAA4B,IAAxBzO,EAAWG,GAAM,GAAU,CAC3B,IAAMwI,EAAOiD,EAAc,CACvB3P,aAAcA,EACdC,eAAgBA,EAChBG,SAAUA,EACVgE,WAAYoO,EAAc7H,EAC1BpF,QAASA,EAAUoF,EACnB4B,QAAuB,YAAbrJ,EACV0C,SAAUA,GACVvF,SAAUA,GAEVwJ,UAAWA,KAGfC,GAAe4C,GACfuE,GAAY/M,GAAQ,OAEnB,CACD,IAAMwO,EAAO7C,EAAY,CACrB7P,aAAcA,EACdC,eAAgBA,EAChBG,SAAUA,EACV2D,WAAYA,EAAWG,GAAM,GAC7BI,gBAAiBA,EAAgBJ,GAAM,GACvCqB,QAASA,EAAUoF,EACnB4B,QAAuB,YAAbrJ,EACV0C,SAAUA,GACVvF,SAAUA,GAEVwJ,UAAWA,KAGfE,GAAgB2I,GAChB7B,IAAe,SAKvB,GAAIjH,GAAUlI,OAAS,EACnB,GAAkB,UAAd0D,EACA,GAAIuF,EAAgB6H,EAAa,CAC7B,IAAME,EAAO7C,EAAY,CACrB7P,aAAcA,EACdC,eAAgBA,EAChBG,SAAUA,EACV2D,WAAYA,EAAWG,GAAM,GAC7BI,gBAAiBA,EAAgBJ,GAAM,GACvCqB,QAASA,EAAUoF,EACnB4B,QAAuB,YAAbrJ,EACV0C,SAAUA,GACVvF,SAAUA,GAEVwJ,UAAWA,KAGfE,GAAgB2I,QAGhBvB,IAAe,QAInB,GAAIxG,EAAgB6H,EAAa,CAC7B,IAAME,EAAO7C,EAAY,CACrB7P,aAAcA,EACdC,eAAgBA,EAChBG,SAAUA,EACV2D,WAAYA,EAAWG,GAAM,GAC7BI,gBAAiBA,EAAgBJ,GAAM,GACvCqB,QAASA,EAAUoF,EACnB4B,QAAuB,YAAbrJ,EACV0C,SAAUA,GACVvF,SAAUA,GAEVwJ,UAAWA,KAGfE,GAAgB2I,QAGhB,GAAIxO,IAAS,EAAG,CACZ,GAAIyG,EAAgBvK,EAAU,CAC1B,IAAMsM,EAAOiD,EAAc,CACvB3P,aAAcA,EACdC,eAAgBA,EAChBG,SAAUA,EACVgE,WAAYhE,EAAWuK,EACvBpF,QAASA,EAAUoF,EACnB4B,QAAuB,YAAbrJ,EACV0C,SAAUA,GACVvF,SAAUA,GAEVwJ,UAAWA,KAGfC,GAAe4C,GAGnByE,IAAe,QAGfF,GAAY/M,GAAQ,GACpB2M,IAAe,MAOxC,CAAClF,GAAUuF,GAAUN,GAAUxL,EAAWgM,GAAoBC,GAAsBjR,EAAUJ,EAAc4F,GAAUvF,GAAUC,GAAWyD,EAAYO,EAAiBJ,GAAOE,EAAYwF,GAAW1G,EAAUqC,EAAStF,IAmI5N,IAAMyF,GAAQrF,IAAYC,KAAcoL,GAExC,OACI,kBAAC,EAAD,CACA1L,aAAcA,EACdC,eAAgBA,EAChBC,iBAAkBA,EAClBC,cAAeA,EACfC,SAAUA,EACV8C,SAAUA,EACVkC,UAAWA,EACXE,eAAgBA,EAChBC,QAASA,EACTxB,WAAYA,EACZK,WAAYA,EACZE,gBAAiBA,EACjBqG,cAA4B,eAAbzH,EAA4BkO,GAAqBC,GAChE3L,MAAOA,GACPiG,SAAUA,GACVD,WAAYA,GACZxH,MAAOA,GACP0B,SAAUA,GACVgE,UAAWA,GACXvJ,SAAUA,GACVC,UAAWA,GACXC,aA1JJ,SAAsBI,EAAMC,GACxB,GAAa,iBAATD,GAGA,GAFAoP,EAAmBnP,GAEfP,KAAaH,EAAkB,CAC/B,IAAMgB,EAAiBC,OAAOC,KAAKf,IAClCgB,QAAO,SAAAC,GACJ,OAAQjB,GAASiB,GAAKX,OAASC,KAChC,GAEHuP,EAAe9P,GAASa,GAAgByR,kBAAkBC,MAE1D,IAAMC,EAAexS,GAASa,GAAgBM,aAAaH,QAAO,SAAAQ,GAAI,MAAkB,oBAAdA,EAAKlB,QAE3EkS,EAAanR,OAAS,GACtBsO,EAAqB6C,EAAa,GAAGlR,eAAe,UAI3D,GAAa,mBAAThB,EAA2BqP,EAAqBpP,QACpD,GAAa,qBAATD,EACLsP,EAAuBrP,GACvBuP,EAAevP,QAEd,GAAa,aAATD,EAAqByP,EAAexP,QACxC,GAAa,cAATD,EAAsB0P,EAAgBzP,QAC1C,GAAa,mBAATD,EAA2B2P,EAAqB1P,QACpD,GAAa,YAATD,EAAoB4P,EAAc3P,QACtC,GAAa,gBAATD,EAAwB2Q,GAAmB,EAAG1Q,QAClD,GAAa,gBAATD,EAAwB2Q,GAAmB,EAAG1Q,QAClD,GAAa,gBAATD,EAAwB2Q,GAAmB,EAAG1Q,QAClD,GAAa,gBAATD,EAAwB6Q,GAAmB,EAAG5Q,QAClD,GAAa,gBAATD,EAAwB6Q,GAAmB,EAAG5Q,QAClD,GAAa,gBAATD,EAAwB6Q,GAAmB,EAAG5Q,QAClD,GAAa,qBAATD,EAA6B+Q,GAAwB,EAAG9Q,QAC5D,GAAa,qBAATD,EAA6B+Q,GAAwB,EAAG9Q,QAC5D,GAAa,qBAATD,EAA6B+Q,GAAwB,EAAG9Q,QAC5D,GAAa,UAATD,EAAkBuP,EAAoBtP,QAC1C,GAAa,aAATD,EAAqB,CAC1B,IAAc,IAAVC,GAAkBP,IAAYC,GAAW,CAEzC,IAAMY,EAAiBC,OAAOC,KAAKf,IAClCgB,QAAO,SAAAC,GACJ,OAAQjB,GAASiB,GAAKX,OAASX,KAChC,GAMH,GAJKE,GACDiQ,EAAe9P,GAASa,GAAgByR,kBAAkBC,OAGzD3S,EAAgB,CACjB,IAAM4S,EAAexS,GAASa,GAAgBM,aAAaH,QAAO,SAAAQ,GAAI,MAAkB,oBAAdA,EAAKlB,QAE3EkS,EAAanR,OAAS,GACtBsO,EAAqB6C,EAAa,GAAGlR,eAAe,IAI5D,IAAImR,EAAQxS,GAAUe,QAAO,SAAAQ,GAAI,OAAIA,EAAKK,OAAS/B,KAEnD2Q,GA5OZ,SAAwBiC,EAAOD,GAmB3B,OAlBgBC,EAAMnR,KAAI,SAAAC,UACfA,EAAKqN,eACLrN,EAAKuN,iBAEZ,IAAI4D,EAAa,KAWjB,OATIF,EAAMpR,OAAS,IAAGsR,EAAaF,EAAM,GAAGX,MAAM9Q,QAAO,SAAA4R,GAAK,OAAIA,EAAM/Q,OAASL,EAAKK,SAElF8Q,GACAA,EAAW5L,SAAQ,SAAA6L,GACXA,EAAMrE,KAAI/M,EAAKqN,QAAU+D,EAAMrE,IAC/BqE,EAAM9D,cAAatN,EAAKuN,kBAAmB,MAIhDvN,KA4NYqR,CAAe7S,GAAUyS,IAE5CnC,GAAe/P,KA6FnBiJ,UAAWA,GACXC,eAAgBA,GAChBC,gBAAiBA,GACjBa,SAvCJ,WACI+F,IAAe,GAEfE,IAAe,GACf/G,GAAe,IACfC,GAAgB,IAChBkH,GAAY,GACZE,IAAe,OCpXvBgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.400f77a8.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction InvestigatorSettings(props) {\n    const { investigator, secondaryClass, selectedDeckSize, selectedTaboo, deckSize, cardData, tabooData } = props\n\n    function handleChange(event) {\n        props.onChangeSetting(event.target.name, event.target.value)\n    }\n\n    let secondaryFactionList = null\n    let deckSizeList = null\n    let tabooList = null\n    let secondaryClassValue = secondaryClass\n    let deckSizeValue = selectedDeckSize ? selectedDeckSize : deckSize\n\n    if (cardData) {\n        const investigatorID = Object.keys(cardData)\n        .filter(key => {\n            return  cardData[key].name === investigator\n        })[0]\n\n        const deckOptions = cardData[investigatorID].deck_options\n\n        for (let i = 0; i < deckOptions.length; i++) {\n            if (deckOptions[i].name === 'Secondary Class')\n            {\n                const list = deckOptions[i].faction_select\n\n                secondaryFactionList = list.map((item, index) => {\n                    return <option value={item} key={index}>\n                        {item[0].toUpperCase() + item.slice(1)}\n                        </option>\n                })\n            }\n            else if (deckOptions[i].name === 'Deck Size')\n            {\n                const list = deckOptions[i].deck_size_select\n\n                deckSizeList = list.map((item, index) => {\n                    return <option value={item} key={index}>\n                        {item}\n                        </option>\n                })\n            }\n        }\n    }\n\n    if (tabooData) {\n        tabooList = tabooData.map((item, index) => {\n            return <option value={item.code} key={index}>\n                {item.date_start}\n                </option>\n        })\n\n        tabooList.unshift(<option value=\"None\" key=\"100\">\n            {\"None\"}\n            </option>)\n    }\n\n    const tabooDiv = <div>\n        <label className=\"taboo\" value={selectedTaboo}>Taboo list:</label>\n        <select className=\"taboo\" name=\"taboo\" value={selectedTaboo} onChange={handleChange}>\n            {tabooList}\n        </select>\n    </div>\n\n    let skidsName = '\"Skids\" '\n    skidsName = skidsName + \"O'Toole\"\n    const skidsOption = <option value={skidsName}>{skidsName}</option>\n\n    const secondaryClassDiv = secondaryFactionList ?\n        <div>\n            <label className=\"secondaryClass\" value={secondaryClassValue}>Secondary class:</label>\n            <select className=\"secondaryClass\" name=\"secondaryClass\" value={secondaryClassValue} onChange={handleChange}>\n                {secondaryFactionList}\n            </select>\n        </div>\n        :\n        null\n\n        const deckSizeDiv = deckSizeList ?\n        <div>\n            <label className=\"deckSize\" value={deckSizeValue}>Deck size:</label>\n            <select className=\"deckSize\" name=\"selectedDeckSize\" value={deckSizeValue} onChange={handleChange}>\n                {deckSizeList}\n            </select>\n        </div>\n        :\n        null\n\n    return (\n        <div className=\"settings\">\n            <h3>Investigator Options</h3>\n            <label>Investigator:</label>\n            <select name=\"investigator\" value={investigator} onChange={handleChange}>\n                <option value=\"Roland Banks\">Roland Banks</option>\n                <option value=\"Daisy Walker\">Daisy Walker</option>\n                {skidsOption}\n                <option value=\"Agnes Baker\">Agnes Baker</option>\n                <option value=\"Wendy Adams\">Wendy Adams</option>\n                <option value=\"Zoey Samaras\">Zoey Samaras</option>\n                <option value=\"Rex Murphy\">Rex Murphy</option>\n                <option value=\"Jenny Barnes\">Jenny Barnes</option>\n                <option value=\"Jim Culver\">Jim Culver</option>\n                <option value='\"Ashcan\" Pete'>\"Ashcan\" Pete</option>\n                <option value=\"Mark Harrigan\">Mark Harrigan</option>\n                <option value=\"Minh Thi Phan\">Minh Thi Phan</option>\n                <option value=\"Sefina Rousseau\">Sefina Rousseau</option>\n                <option value=\"Akachi Onyele\">Akachi Onyele</option>\n                <option value=\"William Yorick\">William Yorick</option>\n                <option value=\"Lola Hayes\">Lola Hayes</option>\n                <option value=\"Leo Anderson\">Leo Anderson</option>\n                <option value=\"Ursula Downs\">Ursula Downs</option>\n                <option value=\"Finn Edwards\">Finn Edwards</option>\n                <option value=\"Father Mateo\">Father Mateo</option>\n                <option value=\"Calvin Wright\">Calvin Wright</option>\n                <option value=\"Carolyn Fern\">Carolyn Fern</option>\n                <option value=\"Joe Diamond\">Joe Diamond</option>\n                <option value=\"Preston Fairmont\">Preston Fairmont</option>\n                <option value=\"Diana Stanley\">Diana Stanley</option>\n                <option value=\"Rita Young\">Rita Young</option>\n                <option value=\"Marie Lambeau\">Marie Lambeau</option>\n                <option value=\"Tommy Muldoon\">Tommy Muldoon</option>\n                <option value=\"Mandy Thompson\">Mandy Thompson</option>\n                <option value=\"Tony Morgan\">Tony Morgan</option>\n                <option value=\"Luke Robinson\">Luke Robinson</option>\n                <option value=\"Patrice Hathaway\">Patrice Hathaway</option>\n                <option value=\"Norman Withers\">Norman Withers</option>\n                <option value=\"Silas Marsh\">Silas Marsh</option>\n                <option value=\"Dexter Drake\">Dexter Drake</option>\n            </select>\n            {secondaryClassDiv}\n            {deckSizeDiv}\n            {tabooDiv}\n        </div>\n    )\n}\n\nexport default InvestigatorSettings","import React from 'react'\n\nfunction SettingsType(props) {\n    let style1 = {}\n    let style2 = {}\n\n    if (props.draftTab === 'Build Deck') {\n        style1 = {\n            backgroundColor: \"#ebebeb\"\n        }\n        style2 = {\n            backgroundColor: \"#bababa\",\n            borderLeft: \"black 2px solid\",\n            borderBottom: \"black 2px solid\"\n        }\n    } else {\n        style1 = {\n            backgroundColor: \"#bababa\",\n            borderRight: \"black 2px solid\",\n            borderBottom: \"black 2px solid\"\n        }\n        style2 = {\n            backgroundColor: \"#ebebeb\"\n        }\n    }\n\n    function handleClick(event) {\n        props.onChangeSetting(event.target.attributes.name.nodeValue, event.target.attributes.value.nodeValue)\n    }\n\n    return (\n        <div className='draft-type'>\n            <div className='type-button' name='draftTab' value='Build Deck' style={style1} onClick={handleClick}>\n                Build Deck\n            </div>\n            <div className='type-button' name='draftTab' value='Upgrade' style={style2} onClick={handleClick}>\n                Upgrade\n            </div>\n        </div>\n    )\n}\n\nexport default SettingsType","import React from 'react'\n\nfunction SettingsChaos(props) {\n    return (\n        <div className=\"draftSettingsDraft\">\n        </div>\n    )\n}\n\n/*\n            <label>Weighting: </label>\n            <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value={props.weighting} className=\"slider\" name=\"weighting\" onChange={handleChange}/>\n            <span className=\"sliderValue\">{props.weighting}</span>\n            <br />\n            <div className=\"description\">A weighting of 0 means all cards will be equally\n                likely.  A weighting of 1 means a card will be as \n                prevalent as it was when it was released, based on \n                card type and slot.\n            </div>\n*/\n\nexport default SettingsChaos","import React from 'react'\n\nfunction SettingsDraft(props) {\n\n    function handleChange(event) {\n        props.onChangeSetting(event.target.name, event.target.value)\n    }\n\n    return (\n        <div className=\"draftSettingsDraft\">\n            <label>Cards to select from:</label>\n            <input type=\"range\" min=\"2\" max=\"15\" step=\"1\" value={props.draftCount} className=\"slider\" name=\"draftCount1\" onChange={handleChange}/>\n            <span className=\"sliderValue\">{props.draftCount}</span>\n        </div>\n    )\n}\n\nexport default SettingsDraft","import React from 'react'\n\nfunction SettingsPhase(props) {\n    return (\n        <div className=\"draftPhase\">\n            <h4 style={{padding: \"0 0 5px 0\"}}>Stage {props.phase}</h4>\n            <label>Cards to select from:</label>\n            <input type=\"range\" min=\"1\" max=\"15\" value={props.draftCount} className=\"slider\" name=\"draftCount\" onChange={props.onChangeSetting}/>\n            <span className=\"sliderValue\">{props.draftCount}</span>\n            <br />\n            <label>Cards selected in this stage: </label>\n            <input type=\"range\" min=\"0\" max={props.maxCards} value={props.draftCards} className=\"slider\" name=\"draftCards\" onChange={props.onChangeSetting}/>\n            <span className=\"sliderValue\">{props.draftCards}</span>\n            <label>Include cards with limited deck slots:</label>\n            <input type=\"checkbox\" checked={props.draftUseLimited} name=\"draftUseLimited\" className=\"checkbox\" onChange={props.onChangeSetting}/>\n        </div>\n    )\n}\n\nexport default SettingsPhase","import React from 'react'\n\nimport SettingsPhase from './SettingsPhase'\n\nfunction SettingsPhasedDraft(props) {\n    let limit2 = props.deckSize - props.draftCards[0]\n    let limit3 = limit2 - props.draftCards[1]\n    let limit4 = limit3 - props.draftCards[2]\n\n    let warningText2 = null\n    let warningText3 = null\n    let warningStyle2 = {}\n    let warningStyle3 = {}\n    let warningStyle4 = {}\n\n    if (limit2 < props.draftCards[1]) {\n        if (limit2 > 0) warningText2 = \"Only \" + limit2\n        else warningText2 = \"No\"\n\n        warningStyle2 = {display: \"block\"}\n    } else {\n        warningStyle2 = {display: \"none\"}\n    }\n\n    if (limit3 < props.draftCards[2]) {\n        if (limit3 > 0) warningText3 = \"Only \" + limit3\n        else warningText3 = \"No\"\n\n        warningStyle3 = {display: \"block\"}\n        if (limit3 < 0) limit3 = 0;\n    } else {\n        warningStyle3 = {display: \"none\"}\n    }\n\n    if (limit4 > 0) {\n        warningStyle4 = {display: \"block\"}\n    } else {\n        warningStyle4 = {display: \"none\"}\n    }\n\n    function handleChange1(event) {\n        props.onChangeSetting(event.target.name + '1', event.target.value)\n    }\n\n    function handleChange2(event) {\n        props.onChangeSetting(event.target.name + '2', event.target.value)\n    }\n\n    function handleChange3(event) {\n        props.onChangeSetting(event.target.name + '3', event.target.value)\n    }\n\n    return (\n        <div className=\"draftSettingsDraft\">\n            <SettingsPhase phase=\"1\" draftCount={props.draftCount[0]} draftCards={props.draftCards[0]} draftUseLimited={props.draftUseLimited[0]} maxCards={props.deckSize} onChangeSetting={handleChange1} />\n            <SettingsPhase phase=\"2\" draftCount={props.draftCount[1]} draftCards={props.draftCards[1]} draftUseLimited={props.draftUseLimited[1]} maxCards={props.deckSize} onChangeSetting={handleChange2} />\n            <SettingsPhase phase=\"3\" draftCount={props.draftCount[2]} draftCards={props.draftCards[2]} draftUseLimited={props.draftUseLimited[2]} maxCards={props.deckSize} onChangeSetting={handleChange3} />\n            <div className=\"warning\" style={warningStyle2}>\n                <b>Warning:</b> {warningText2} cards will be drawn in Phase 2.\n            </div>\n            <div className=\"warning\" style={warningStyle3}>\n                <b>Warning:</b> {warningText3} cards will be drawn in Phase 3.\n            </div>\n            <div className=\"warning\" style={warningStyle4}>\n                <b>Warning:</b> The final {limit4} cards will be drawn at random.\n            </div>\n        </div>\n    )\n}\n\nexport default SettingsPhasedDraft\n","import React from 'react'\n\nimport SettingsChaos from './SettingsChaos'\nimport SettingsDraft from './SettingsDraft'\nimport SettingsPhasedDraft from './SettingsPhasedDraft'\n\nfunction SettingsBuild(props) {\n    function handleChange(event) {\n        props.onChangeSetting(event.target.name, event.target.value)\n    }\n\n    let draftSettings\n    let draftDescription\n\n    if (props.draftType === 'chaos') {\n        draftSettings = <SettingsChaos \n            onChangeSetting={props.onChangeSetting}\n        />\n        draftDescription = <div className=\"description\">\n            The original Ultimatum of Chaos rules from the 2017 Invocation Event.  A \n            full deck will be created completely randomly from all cards available to \n            the chosen investigator.\n        </div>\n    }\n    else if (props.draftType === 'draft') {\n        draftSettings = <SettingsDraft\n            draftCount={props.draftCount[0]} \n            onChangeSetting={props.onChangeSetting}\n        />\n        draftDescription = <div className=\"description\">\n            Select cards one by one from a random display of cards available to the \n            chosen investigator.  Each card will be selected from a number of cards \n            determined by the \"Cards to select from\" option.  \n        </div>\n    }\n    else if (props.draftType === 'phaseDraft') {\n        draftSettings = <SettingsPhasedDraft\n            draftCount={props.draftCount} \n            draftCards={props.draftCards}\n            draftUseLimited={props.draftUseLimited}\n            deckSize={props.deckSize} \n            onChangeSetting={props.onChangeSetting}\n        />\n        draftDescription = <div className=\"description\">\n            The draft will proceed through 3 distinct stages.  All stages will draft \n            from the full set of cards available to the chosen investigator.  Each stage \n            will draft a number of cards equal to \"Cards selected in this stage\", not \n            including Permanent cards.  Each will be selected from a number of cards \n            determined by the \"Cards to select from\" option.  This allows you to use \n            completely random selection for part of the deck, or use a wider range of \n            choices for part of the deck.\n        </div>\n    }\n\n    return (\n        <div className=\"offsetDiv\">\n            <label>Type:</label>\n            <select name=\"draftType\" value={props.draftType} onChange={handleChange}>\n                <option value=\"chaos\">Standard chaos</option>\n                <option value=\"draft\">Simple draft</option>\n                <option value=\"phaseDraft\">Draft in stages</option>\n            </select>\n            {draftSettings}\n            {draftDescription}\n        </div>\n    )\n}\n\nexport default SettingsBuild","import React from 'react'\n\nimport SettingsChaos from './SettingsChaos'\nimport SettingsDraft from './SettingsDraft'\n\nfunction SettingsUpgrade(props) {\n    function handleChange(event) {\n        props.onChangeSetting(event.target.name, event.target.value)\n    }\n\n    let draftSettings\n\n    if (props.draftType === 'chaos') draftSettings = <SettingsChaos \n            onChangeSetting={props.onChangeSetting}\n        />\n    else if (props.draftType === 'draft') draftSettings = <SettingsDraft\n            draftCount={props.draftCount[0]} \n            onChangeSetting={props.onChangeSetting}\n        />\n\n        return (\n/*\n            <div>\n                Unfinished.\n            </div>\n        )\n*/\n        <div className=\"offsetDiv\">\n            <label>Type:</label>\n            <select name=\"draftType\" value={props.draftType} onChange={handleChange}>\n                <option value=\"chaos\">Standard chaos</option>\n                <option value=\"draft\">Simple draft</option>\n            </select>\n            <label>Weighting:</label>\n            <select name=\"draftWeighting\" value={props.draftWeighting} onChange={handleChange}>\n                <option value=\"low\">Prefer low XP</option>\n                <option value=\"medium\">Default</option>\n                <option value=\"high\">Prefer high XP</option>\n            </select>\n            <label>XP:</label>\n            <input name=\"draftXP\" type=\"number\" value={props.draftXP} min=\"1\" onChange={handleChange}></input>\n            {draftSettings}\n        </div>\n        )\n}\n\nexport default SettingsUpgrade","import React from 'react'\n\nimport SettingsType from './SettingsType'\nimport SettingsBuild from './SettingsBuild'\nimport SettingsUpgrade from './SettingsUpgrade'\n\nfunction Settings(props) {\n    function handleStart(event) {\n        props.onChangeSetting('building', true)\n    }\n\n    const draftSettings = props.draftTab === 'Build Deck' ?\n        <SettingsBuild \n            draftType={props.draftType}\n            draftCount={props.draftCount}\n            draftCards={props.draftCards}\n            draftUseLimited={props.draftUseLimited}\n            deckSize={props.deckSize}\n            onChangeSetting={props.onChangeSetting}\n        /> :\n        <SettingsUpgrade \n            draftType={props.draftType}\n            draftWeighting={props.draftWeighting}\n            draftXP={props.draftXP}\n            draftCount={props.draftCount}\n            draftCards={props.draftCards}\n            deckSize={props.deckSize}\n            onChangeSetting={props.onChangeSetting}\n        />\n\n    const button = props.ready ?\n    <button className=\"button-ready\" onClick={handleStart}>Start</button> :\n    <button className=\"button-loading\">Loading...</button>\n\n    return (\n        <div className='settings'>\n            <SettingsType draftTab={props.draftTab} onChangeSetting={props.onChangeSetting}/>\n            <h3>Draft Options</h3>\n            <h5>{props.draftTab}</h5>\n            {draftSettings}\n            {button}\n        </div>\n    )\n}\n\n//{(props.draftTab === 'Build Deck') ? button : null}\n\nexport default Settings","import React from 'react'\n\nfunction CardList(props) {\n    const { cardList, cardData, updateCardOverlay } = props\n\n    let assetCount = 0\n    let eventCount = 0\n    let skillCount = 0\n    let otherCount = 0\n    const hand = []\n    const hand2 = []\n    const arcane = []\n    const arcane2 = []\n    const accessory = []\n    const body = []\n    const ally = []\n    const tarot = []\n    const otherasset = []\n    const permanent = []\n    const event = []\n    const skill = []\n    const other = []\n\n    cardList.forEach(item => {\n        if (item.type_code === 'event') {\n            event.push(item)\n            eventCount += item.count\n        }\n        else if (item.type_code === 'skill') {\n            skill.push(item)\n            skillCount += item.count\n        }\n        else if (item.type_code === 'asset') {\n            if (item.permanent) permanent.push(item)\n            else if (item.slot === 'Hand') hand.push(item)\n            else if (item.slot === 'Hand x2') hand2.push(item)\n            else if (item.slot === 'Arcane') arcane.push(item)\n            else if (item.slot === 'Arcane x2') arcane2.push(item)\n            else if (item.slot === 'Accessory') accessory.push(item)\n            else if (item.slot === 'Body') body.push(item)\n            else if (item.slot === 'Ally') ally.push(item)\n            else if (item.slot === 'Tarot') tarot.push(item)\n            else otherasset.push(item)\n            assetCount += item.count\n        }\n        else {\n            other.push(item)\n            otherCount += item.count\n        }\n    })\n\n    function onEnterCardLeft(event) {\n        const cardArray = cardData.filter(item => item.code === event.target.id)\n\n        if (cardArray && cardArray.length > 0) {\n            const imagesrc = \"http://www.arkhamdb.com\" + cardArray[0].imagesrc\n\n            updateCardOverlay(imagesrc, \"Right\")\n        }\n    }\n\n    function onEnterCardRight(event) {\n        const cardArray = cardData.filter(item => item.code === event.target.id)\n\n        if (cardArray && cardArray.length > 0) {\n            const imagesrc = \"http://www.arkhamdb.com\" + cardArray[0].imagesrc\n\n            updateCardOverlay(imagesrc, \"Left\")\n        }\n    }\n\n    function onLeaveCard(event) {\n        updateCardOverlay(null, \"Left\")\n    }\n\n    const assetHeader = assetCount > 0 ? <h4>Assets ({assetCount})</h4> : null\n    \n    const handHeader = hand.length > 0 ? <p className='slot-header'>Hand</p> : null\n    const handContents = hand.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const hand2Header = hand2.length > 0 ? <p className='slot-header'>Hand x2</p> : null\n    const hand2Contents = hand2.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const arcaneHeader = arcane.length > 0 ? <p className='slot-header'>Arcane</p> : null\n    const arcaneContents = arcane.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const arcane2Header = arcane2.length > 0 ? <p className='slot-header'>Arcane x2</p> : null\n    const arcane2Contents = arcane2.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const accessoryHeader = accessory.length > 0 ? <p className='slot-header'>Accessory</p> : null\n    const accessoryContents = accessory.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const bodyHeader = body.length > 0 ? <p className='slot-header'>Body</p> : null\n    const bodyContents = body.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const allyHeader = ally.length > 0 ? <p className='slot-header'>Ally</p> : null\n    const allyContents = ally.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const tarotHeader = tarot.length > 0 ? <p className='slot-header'>Tarot</p> : null\n    const tarotContents = tarot.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const otherassetHeader = otherasset.length > 0 ? <p className='slot-header'>Other</p> : null\n    const otherassetContents = otherasset.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const permanentHeader = permanent.length > 0 ? <p className='slot-header'>Permanent</p> : null\n    const permanentContents = permanent.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const eventHeader = eventCount > 0 ? <h4>Events ({eventCount})</h4> : null\n    const eventContents = event.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n        return <p id={item.key} onPointerEnter={onEnterCardRight} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const skillHeader = skillCount > 0 ? <h4>Skills ({skillCount})</h4> : null\n    const skillContents = skill.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardRight} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const otherHeader = otherCount > 0 ? <h4>Other ({otherCount})</h4> : null\n    const otherContents = other.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardRight} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    return (\n        <div className=\"settings\">\n            <h3 style={{marginBottom: \"-10px\"}}>Card List</h3>\n            <div className=\"cardContainer\">\n                <div className=\"col1\">\n                    {assetHeader}\n                    {handHeader}\n                    {handContents}\n                    {hand2Header}\n                    {hand2Contents}\n                    {arcaneHeader}\n                    {arcaneContents}\n                    {arcane2Header}\n                    {arcane2Contents}\n                    {accessoryHeader}\n                    {accessoryContents}\n                    {bodyHeader}\n                    {bodyContents}\n                    {allyHeader}\n                    {allyContents}\n                    {tarotHeader}\n                    {tarotContents}\n                    {otherassetHeader}\n                    {otherassetContents}\n                    {permanentHeader}\n                    {permanentContents}\n                </div>\n                <div className=\"col2\">\n                    {eventHeader}\n                    {eventContents}\n                    {skillHeader}\n                    {skillContents}\n                    {otherHeader}\n                    {otherContents}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CardList\n","import React from 'react'\n\nfunction DraftArea(props) {\n    const { draftCount, draftPool, draftCard, draftType, phase, cardList, updateCardList, updateDraftPool } = props\n\n    let newList = []\n    newList = newList.concat(cardList)\n\n    function handleClick(event) {\n        const index = draftPool.findIndex(item => {\n            return event.target.src.includes(item.imagesrc)\n        })\n\n        const updatedList = draftCard(draftPool[index], newList)\n\n        updateCardList(updatedList)\n        updateDraftPool([])\n    }\n\n    let images = []\n\n    for (let i = 0; i < draftCount; i++) {\n        const imageSrc = \"https://www.arkhamdb.com\" + draftPool[i].imagesrc\n        images.push(<div className=\"draft-card\" key={i}><img className=\"draft-image\" src={imageSrc} alt={draftPool[i].name} onClick={handleClick}/></div>)\n    }\n\n    const phaseText = draftType === 'phaseDraft' ? ' - Stage ' + phase : null\n\n    return (\n        <div className=\"settings\">\n            <h3>Draft{phaseText}</h3>\n            <div className='draft-container'>\n                {images}\n            </div>\n            <p>Click image to draft card</p>\n        </div>\n    )\n}\n\nexport default DraftArea","import React from 'react'\n\nimport CardList from './CardList'\nimport DraftArea from './DraftArea'\n\nfunction Draft(props) {\n    const { investigator, deckSize, draftTab, draftXP, draftCount, draftProgress, draftType, phase, cardList, draftPool, cardData, draftCard, updateCardList, updateDraftPool, resetApp, updateCardOverlay } = props\n\n    let investigatorCardImage = null\n    let investigatorCardImageBack = null\n\n    if (cardData) {\n        const investigatorID = Object.keys(cardData)\n        .filter(key => {\n            return  cardData[key].name === investigator\n        })[0]\n\n        const imagesrc = \"https://www.arkhamdb.com\" + cardData[investigatorID].imagesrc\n        const backimagesrc = \"https://www.arkhamdb.com\" + cardData[investigatorID].backimagesrc\n        investigatorCardImage = <img className=\"investigator-image\" src={imagesrc} alt={props.investigator} />\n        investigatorCardImageBack = <img className=\"investigator-image\" src={backimagesrc} alt={props.investigator + ' (back)'} />\n    }\n\n    let draftContent = null\n\n    if (draftPool.length > 0) {\n        draftContent = <DraftArea \n            draftCount={draftCount}\n            draftCard={draftCard}\n            phase={phase}\n            draftType={draftType}\n            draftPool={draftPool}\n            cardList={cardList}\n            updateCardList={updateCardList}\n            updateDraftPool={updateDraftPool}\n        />\n    }\n\n    const progress = draftTab === 'Build Deck' ? \n        <p><b>Cards: </b>{draftProgress}/{deckSize}</p> : \n        <p><b>XP: </b>{draftProgress}/{draftXP}</p>\n\n    return (\n        <div>\n            <div className=\"settings\">\n                <h2>{investigator}</h2>\n                <br />\n                {investigatorCardImage}\n                {investigatorCardImageBack}\n                {progress}\n            </div>\n            {draftContent}\n            <CardList \n                cardList={cardList}\n                cardData={cardData}\n                updateCardOverlay={updateCardOverlay}\n            />\n            <button onClick={resetApp}>Restart</button>\n        </div>\n    )\n}\n\nexport default Draft","import React, { useState } from 'react'\n\nimport './App.css';\n\nimport InvestigatorSettings from './components/InvestigatorSettings'\nimport Settings from './components/Settings'\n\nimport Draft from './components/Draft'\n\nfunction App(props) {\n    let contents = null\n\n    const [overlayImage, updateOverlayImage] = useState(null)\n    const [overlayPosition, updateOverlayPosition] = useState('Left\"')\n\n    function updateCardOverlay(image, position) {\n        updateOverlayImage(image)\n        updateOverlayPosition(position)\n    }\n\n    let overlay = null\n\n    if (overlayImage) {\n        overlay = <div className={\"floatingImage\"+overlayPosition}><img src={overlayImage} alt=\"\" /></div>\n    }\n\n    if (props.fetchError) {\n        contents = \n            <div>\n                Fetch error!\n            </div>\n    }\n    else if (!props.cardData || !props.tabooData) {\n        contents =\n            <div style={{marginBottom: \"20px\"}}>\n                Loading...\n            </div>\n    }\n    else if (props.building) {\n        contents = \n            <Draft\n                draftType={props.draftType}\n                draftTab={props.draftTab}\n                investigator={props.investigator} \n                secondaryClass={props.secondaryClass} \n                deckSize={props.deckSize}\n                draftXP={props.draftXP}\n                draftCount={props.draftCount[props.phase-1]}\n                draftCards={props.draftCards[props.phase-1]}\n                draftProgress={props.draftProgress}\n                phase={props.phase}\n                cardList={props.cardList}\n                cardData={props.cardData}\n                draftPool={props.draftPool}\n                draftCard={props.draftCard}\n                updateCardList={props.updateCardList}\n                updateDraftPool={props.updateDraftPool}\n                updateCardOverlay={updateCardOverlay}\n                resetApp={props.resetApp}\n            />\n    }\n    else {\n        contents = \n        <div>\n            <InvestigatorSettings \n                investigator={props.investigator}\n                secondaryClass={props.secondaryClass}\n                selectedDeckSize={props.selectedDeckSize}\n                selectedTaboo={props.selectedTaboo}\n                deckSize={props.deckSize}\n                cardData={props.cardData}\n                tabooData={props.tabooData}\n                onChangeSetting={props.handleChange}\n            />\n            <Settings\n                draftTab={props.draftTab}\n                draftType={props.draftType}\n                draftWeighting={props.draftWeighting}\n                draftXP={props.draftXP}\n                draftCount={props.draftCount}\n                draftCards={props.draftCards}\n                draftUseLimited={props.draftUseLimited}\n                deckSize={props.deckSize}\n                ready={props.ready}\n                onChangeSetting={props.handleChange}\n            />\n        </div>\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n            ArkhamDraft\n            </header>\n            {contents}\n            {overlay}\n            <div className=\"copyright\" style={{padding: \"5px\", boxSizing: \"border-box\"}}>\n                Arkham Horror: The Card Game and all information presented here, both literal and graphical, is copyrighted by Fantasy Flight Games. This website is not produced, endorsed, supported, or affiliated with Fantasy Flight Games.\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","function DrawCard(cardData, draftPool) {\n    let legal = false\n    let randomCard = null\n\n    if (cardData.length === 0) return null\n\n    while (!legal) {\n        randomCard = cardData[Math.floor(Math.random() * cardData.length)]\n\n        const randomCode = randomCard.code\n        const existingIndex = (draftPool && draftPool.length > 0) ? draftPool.findIndex(item => item.code === randomCode) : -1\n        \n        if (existingIndex < 0) legal = true\n    }\n\n    return randomCard\n}\n\nexport default DrawCard","// card data:\n// pack_code\n// pack_name\n// type_code\n        // treachery\n        // investigator\n        // asset\n        // event\n        // skill\n        // enemy\n        // story\n        // location\n// type_name\n// subtype_code\n// faction_code\n// faction_name\n// position\n// exceptional\n// myriad\n// code\n// name\n// real_name\n// subname\n// text\n// real_text\n// quantity\n// skill_willpower\n// skill_intellect\n// skill_combat\n// skill_agility\n// clues_fixed\n// health\n// health_per_investigator\n// sanity\n// deck_limit\n// traits\n// real_traits\n// deck_requirements\n// deck_options\n// flavor\n// illustrator\n// is_unique\n// exile\n// hidden\n// permanent\n// double_sided\n// back_text\n// back_flavor\n// octgn_id\n// url\n// imagesrc\n// backimagesrc\n\n// slot\n    // Hand\n    // Accessory\n    // Ally\n    // Hand x2\n    // Arcane\n    // Body\n    // Tarot\n// restrictions\n// cost\n// xp\n\nfunction FilterCards(props) {\n    const { investigator, secondaryClass, cardData, tabooData, cardList, deckSize, upgrade, draftUseLimited, draftXP } = props\n\n    const legalSets = { 'core': 1\n        ,'dwl': 1, 'tmm': 1, 'tece': 1, 'bota': 1, 'uau': 1, 'wda': 1, 'litas': 1\n        ,'ptc': 1, 'eotp': 1, 'tuo': 1, 'apot': 1, 'tpm': 1, 'bsr': 1, 'dca': 1\n        ,'tfa': 1, 'tof': 1, 'tbb': 1, 'hote': 1, 'tcoa': 1, 'tdoy': 1, 'sha': 1\n        ,'tcu': 1, 'tsn': 1, 'wos': 1, 'fgg': 1, 'uad': 1, 'icc': 1, 'bbt': 1\n        ,'tde': 1, 'sfk': 1, 'tsh': 1, 'dsm': 1, 'pnr': 1, 'wgd': 1, 'woc': 1\n        ,'rtnotz': 1, 'rtdwl': 1, 'rtptc': 1\n        ,'books' : 1 }\n\n    const investigatorID = Object.keys(cardData)\n    .filter(key => {\n        return cardData[key].name === investigator\n    })[0]\n\n    const deckOptions = cardData[investigatorID].deck_options\n\n    const filteredDeck = filterDeckForLimited(cardList, deckOptions)\n\n    // requirement trait: exclude if it doesn't pass a different option AND the requirement\n    let requirementOptions = null\n\n    if (investigator === 'Joe Diamond') {\n        const joeRequiredCards = cardList.filter(item => {\n            const cardTraits = item.traits\n\n            if (cardTraits && cardTraits.search(new RegExp('insight', \"i\")) >= 0)\n                return true\n\n            return false\n        })\n\n        if (deckSize - countDeck(cardList) + countDeck(joeRequiredCards) <= 10) {\n            requirementOptions = [{\n                requirement: 10,\n                trait: 'insight'\n            }]\n        }\n    }\n    else if (investigator === 'Lola Hayes') {\n        const lolaRequiredCards = ['guardian', 'seeker', 'rogue', 'mystic', 'survivor'].map(faction => {\n            return {\n                faction: faction,\n                count: countDeck(cardList.filter(item => {\n                    if (item.faction_code === faction) {\n                        return true\n                    }\n                    if (item.faction2_code === faction) {\n                        return true\n                    }\n\n                    return false\n                }))\n            }\n        }).sort((e1, e2) => e2.count - e1.count)\n\n        let count = 0\n        for (let i = 0; i < 3; i++) {\n            count += Math.min(7, lolaRequiredCards[i].count)\n        }\n\n        if (deckSize - countDeck(cardList) + count <= 21) {\n            const minCount = lolaRequiredCards[2].count\n\n            let factionRequirement = []\n            for (let i = 0; i < 5; i++) {\n                if (lolaRequiredCards[i].count < 7 && lolaRequiredCards[i].count >= minCount) factionRequirement.push(lolaRequiredCards[i].faction)\n            }\n\n            requirementOptions = [{\n                requirement: 7,\n                faction: factionRequirement\n            }]\n        }\n    }\n\n    let minLevel = 0\n    let maxLevel = 0\n\n    if (upgrade) {\n        minLevel = 1\n        maxLevel = draftXP\n    }\n//console.log('Filter : ' + props.draftXP)\n    const filteredData = cardData.filter(card => {\n        if (card.type_code === 'investigator') return false\n        if (card.type_code === 'story') return false\n        if (card.type_code === 'location') return false\n        if (card.type_code === 'enemy') return false\n        if (card.type_code === 'treachery') return false\n        if (card.bonded_to) return false\n        // currently means weakness\n        if (card.subtype_code) return false\n\n        let xp = 0\n        if (card.xp) xp = card.xp\n        if (card.tabooxp) xp += card.tabooxp\n        if (card.exceptional || card.tabooexceptional) xp *= 2\n        \n        if (xp < minLevel) return false\n        if (xp > maxLevel) return false\n\n//        arcane research!!!! oh no!!\n//        green man medallion as well\n\n        if (card.restrictions && card.restrictions.investigator) return false\n        if (!legalSets[card.pack_code]) return false\n\n        // this isn't right for upgrades yet\n        let legal = false\n        for (let i = 0; i < deckOptions.length; i++) {\n            if (deckOptions[i].requirement) continue\n\n            let optionLegal = false\n\n            if (testDeckOption(card, deckOptions[i])) {\n                optionLegal = true\n\n                if (deckOptions[i].not) {\n//console.log('Reject : ' + card.name)\n                    optionLegal = false\n                }\n                else if (deckOptions[i].limit) {\n                    if (!draftUseLimited) optionLegal = false\n                    else {\n                        const inDeck = countDeckLimited(filteredDeck, deckOptions[i])\n//console.log('In deck : ' + inDeck)\n                        if (inDeck >= deckOptions[i].limit) {\n//console.log('Over limit : ' + card.name)\n                            optionLegal = false\n                        }\n                    }\n                }\n            }\n\n            if (optionLegal) legal = true\n        }\n\n        if (!legal) return false\n\n        // check to see if there's already max in the deck\n        let limited = false\n        \n        cardList.forEach(item => {\n            if (item.name === card.name) {\n                if (item.count >= card.deck_limit) {\n//console.log(card.name + ' : Over the limit')\n                    limited = true\n                }\n            }\n        })\n\n        if (limited) return false\n\n        // check to see if it passes all required tests\n        if (requirementOptions) {\n            for (let i = 0; i < requirementOptions.length; i++) {\n                if (!testDeckOption(card, requirementOptions[i])) {\n                    return false\n                }\n            }\n        }\n\n        return true\n    })\n\n    function filterDeckForLimited(list, options) {\n        if (!list) return []\n\n        let filteredDeck = []\n\n        list.forEach(item => {\n            let legal = false\n\n            for (let i = 0; i < options.length; i++) {\n                if (options[i].limit) continue;\n\n                const optionLegal = testDeckOption(item, options[i])\n\n                if (optionLegal) legal = true\n            }\n\n            if (!legal) filteredDeck.push(item)\n        })\n\n        return filteredDeck\n    }\n    \n    function countDeck(list) {\n        let count = 0\n\n        if (list) {\n            list.forEach(item => {\n                if (!item.permanent) count += item.count\n            })\n        }\n\n        return count\n    }\n    \n    function countDeckLimited(list, option) {\n        let count = 0\n\n        if (list) {\n            list.forEach(item => {\n                if (testDeckOption(item, option)) {\n                    count += item.count\n                }\n            })\n        }\n\n        return count\n    }\n\n    function testDeckOption(card, option) {\n//console.log(option)\n        let level = true\n        let faction = true\n        let secondaryFaction = true\n        let trait = true\n        let uses = true\n        let type = true\n        let text = true\n\n        if (option.name === 'Secondary Class') {\n            secondaryFaction = false\n\n            if (card.faction_code === secondaryClass) {\n                secondaryFaction = true\n            }\n            if (card.faction2_code === secondaryClass) {\n                secondaryFaction = true\n            }\n        }\n\n        if (option.faction) {\n            faction = false\n\n            for (let f = 0; f < option.faction.length; f++) {\n                if (card.faction_code === option.faction[f]) {\n                    faction = true\n                }\n                if (card.faction2_code === option.faction[f]) {\n                    faction = true\n                }\n            }\n        } \n\n        if (option.level) {\n            level = false\n\n            const min = option.level.min\n            const max = option.level.max\n\n            const ixp = card.xp === undefined ? 0 : card.xp\n\n            if (ixp >= min && ixp <= max) level = true;\n        }\n\n        if (option.trait) {\n//console.log('Trait')\n//console.log(option.trait)\n            trait = false\n\n            const cardTraits = card.traits\n//console.log(cardTraits)\n            if (cardTraits && cardTraits.search(new RegExp(option.trait, \"i\")) >= 0)\n                trait = true\n        }\n//console.log(trait)\n        if (option.uses) {\n            uses = false\n\n            const cardText = card.text\n\n            if (cardText && cardText.search(new RegExp('Uses \\\\([0-9\\\\s]+' + option.uses[0] + '\\\\)', \"i\")) >= 0)\n                uses = true\n        }\n\n        if (option.type) {\n            type = false\n\n            const cardType = card.type_code\n\n            if (cardType && option.type.find(item => item === cardType))\n                type = true\n        }\n           \n        if (option.text) {\n            text = false\n            \n            if (card.text && card.text.search(new RegExp(option.text, \"i\")) >= 0)\n                text = true\n        }\n            \n//console.log(faction + ' ' + level + ' ' + trait + ' ' + uses + ' ' + type + ' ' + secondaryFaction)\n        return faction && level && trait && uses && type && secondaryFaction && text\n    }\n\n    return filteredData\n}\n\nexport default FilterCards\n\n/* odds research\n            // stat test\n            const setArray = [ 'core'\n                ,'dwl', 'tmm', 'tece', 'bota', 'uau', 'wda', 'litas'\n                ,'ptc', 'eotp', 'tuo', 'apot', 'tpm', 'bsr', 'dca'\n                ,'tfa', 'tof', 'tbb', 'hote', 'tcoa', 'tdoy', 'sha'\n                ,'tcu', 'tsn', 'wos', 'fgg', 'uad', 'icc', 'bbt'\n                ,'tde', 'sfk', 'tsh', 'dsm', 'pnr', 'wgd', 'woc'\n                ,'rtnotz', 'rtdwl', 'rtptc'\n            ]\n\n//            const assets = countCards('asset', setArray)\n//            const events = countCards('event', setArray)\n//            const skills = countCards('skill', setArray)\n\n            const hand = countCards('asset', 'Hand', setArray)\n            const hands2 = countCards('asset', 'Hand x2', setArray)\n            const ally = countCards('asset', 'Ally', setArray)\n            const accessory = countCards('asset', 'Accessory', setArray)\n            const arcane = countCards('asset', 'Arcane', setArray)\n            const body = countCards('asset', 'Body', setArray)\n            const tarot = countCards('asset', 'Tarot', setArray)\n\n//            console.log('Assets: ' + assets)\n//            console.log('Events: ' + events)\n//            console.log('Skills: ' + skills)\n\n            console.log('Hand: ' + hand)\n            console.log('Ally: ' + ally)\n            console.log('Arcane: ' + arcane)\n            console.log('2xHands: ' + hands2)\n            console.log('Accessory: ' + accessory)\n            console.log('Body: ' + body)\n            conso le.log('Tarot: ' + tarot)\n*/\n/* odds research\n    function countCards(cardType, cardSlot, sets) {\n        const filteredData = cardData.filter(card => {\n            // currently means weakness\n            if (card.type_code !== cardType) return false\n            if (card.subtype_code) return false\n            if (card.slot && card.slot !== cardSlot) return false\n            if (!card.slot) return false\n//            if (card.xp && card.xp > 0) return false            \n            if (card.restrictions && card.restrictions.investigator) return false\n    //        console.log(card.slot + ' <=> ' + cardSlot + ' (' + card.name + ')')\n    \n            let foundSet = false\n            for (let i = 0; i < sets.length; i++) {\n                if (card.pack_code === sets[i]) foundSet = true\n            }\n\n            return foundSet\n        })\n\n        return filteredData.length\n    }\n*/\n\n","import DrawCard from './DraftData'\nimport FilterCards from './DraftFilters'\n\nfunction StandardChaos(props) {\n    const { draftCards, draftCard, cardList, investigator } = props;\n    let newList = []\n\n    newList = newList.concat(cardList)\n\n    let draftProgress = 0;\n\n    while (draftProgress < draftCards) {\n        // generates all cards, sets cardList state\n        // need to do it each iteration for all investigators whose filter depends on the cards in the deck\n        props.cardList = newList\n        let filteredData = FilterCards(props)\n\n        const card = DrawCard(filteredData)\n\n        newList = draftCard(card, newList)\n\n//        if (card.traits && card.traits.search(new RegExp('insight', \"i\")) >= 0)\n\n        if (!card.permanent) draftProgress++\n\n        if (investigator === 'Joe Diamond' || investigator === 'Lola Hayes') {\n            props.cardList = newList\n            filteredData = FilterCards(props)\n        }\n    }\n\n    return newList\n}\n\nexport default StandardChaos","import DrawCard from './DraftData'\nimport FilterCards from './DraftFilters'\n\nfunction SimpleDraft(props) {\n    const { draftCount } = props\n\n    // generates draft cards\n    const filteredData = FilterCards(props)\n\n    let draftPool = []\n\n    for (let i = 0; i < draftCount; i++) {\n        const card = DrawCard(filteredData, draftPool)\n\n        draftPool.push(card)\n    }\n\n    return draftPool\n}\n\nexport default SimpleDraft","import React, { useState, useEffect } from 'react';\n\nimport App from './App';\nimport StandardChaos from './components/StandardChaos'\nimport SimpleDraft from './components/SimpleDraft'\n\nfunction AppContainer() {\n    const [investigator, changeInvestigator] = useState(\"Roland Banks\")\n    const [secondaryClass, changeSecondaryClass] = useState(null)\n    const [selectedDeckSize, changeSelectedDeckSize] = useState(null)\n    const [selectedTaboo, changeSelectedTaboo] = useState('None')\n    const [deckSize, changeDeckSize] = useState(\"30\")\n    const [draftTab, changeDraftTab] = useState(\"Build Deck\")\n    const [draftType, changeDraftType] = useState(\"draft\")\n    const [draftWeighting, changeDraftWeighting] = useState('medium')\n    const [draftXP, changeDraftXP] = useState(1)\n    const [draftCount, changeDraftCount] = useState([3, 3, 3])\n    const [draftCards, changeDraftCards] = useState([10, 10, 10])\n    const [draftUseLimited, changeDraftUseLimited] = useState([true, true, true])\n    const [building, changeBuilding] = useState(false)\n    const [newPhase, changeNewPhase] = useState(true)\n//    const [fetching, changeFetching] = useState(false)\n    const [cardData, updateCardData] = useState(null)\n    const [tabooData, updateTabooData] = useState(null)\n//    const [tabooCardData, updateTabooCardData] = useState(null)\n    const [fetchError, updateFetchError] = useState(false)\n    const [cardList, updateCardList] = useState([])\n    const [draftPool, updateDraftPool] = useState([])\n    const [phase, changePhase] = useState(1)\n    const [complete, changeComplete] = useState(false)\n\n    // card count for Build, xp for Upgrade\n    let draftProgressBuild = 0\n    let draftProgressUpgrade = 0\n\n    if (cardList) {\n        for (let item in cardList) {\n            // permanent don't count\n            if (!cardList[item].permanent) draftProgressBuild += cardList[item].count\n            draftProgressUpgrade += cardList[item].xp * cardList[item].count;\n        }\n    }\n\n    useEffect(() => fetchData(), [])\n\n    useEffect(() => fetchTaboo(), [])\n\n    function fetchData() {\n//        fetch(\"https://cors-anywhere.herokuapp.com/https://arkhamdb.com/api/public/cards/\")\n        fetch(\"https://arkhamdb.com/api/public/cards/\")\n        .then(res => {\n            return res.json()\n        })\n        .then(res => {\n            updateCardData(res)\n        })\n        .catch(() => updateFetchError(true))\n    }\n\n    function fetchTaboo() {\n//        fetch(\"https://cors-anywhere.herokuapp.com/https://arkhamdb.com/api/public/cards/\")\n        fetch(\"https://arkhamdb.com/api/public/taboos/\")\n        .then(res => {\n            return res.json()\n        })\n        .then(res => {\n            res = res.map(item => {\n                item.cards = JSON.parse(item.cards)\n                return item\n            }).sort((item1, item2) => item1.id > item2.id ? 1 : -1)\n\n            updateTabooData(res)\n        })\n        .catch(() => {})\n    }\n\n    function mergeTabooData(cData, tData) {\n        var tCardData = cData.map(item => {\n            delete item.tabooxp\n            delete item.tabooexceptional\n\n            var tabooEntry = null\n            \n            if (tData.length > 0) tabooEntry = tData[0].cards.filter(taboo => taboo.code === item.code)\n\n            if (tabooEntry) {\n                tabooEntry.forEach(taboo => {\n                    if (taboo.xp) item.tabooxp = taboo.xp\n                    if (taboo.exceptional) item.tabooexceptional = true\n                })\n            }\n            \n            return item\n        })\n\n        return tCardData\n    }\n\n    useEffect(() => {\n        if (building && !complete) {\n            const draftProgress = (draftTab === 'Build Deck') ? draftProgressBuild : draftProgressUpgrade\n            let draftTarget = 0\n\n            if (draftTab === 'Build Deck') {\n                if (draftType === 'phaseDraft') {\n                    if (phase > 3) draftTarget = deckSize\n                    else for (let i = 0; i < phase; i++) draftTarget += parseInt(draftCards[i], 10)\n                    \n                    if (draftTarget > deckSize) draftTarget = deckSize\n                }\n                else {\n                    draftTarget = deckSize\n                }\n            }\n            else\n            {\n                draftTarget = draftXP\n            }\n\n            if (newPhase) {\n                if (draftType === 'chaos') {\n                    // first (and only) time through\n                    const list = StandardChaos({\n                        investigator: investigator,\n                        secondaryClass: secondaryClass,\n//                        selectedTaboo: tabooData.filter(item => item.code === selectedTaboo ? true : false),\n                        deckSize: deckSize,\n                        draftCards: deckSize,\n                        draftXP: draftXP - draftProgress,\n                        upgrade: (draftTab === 'Upgrade'),\n                        cardList: cardList,\n//                        tabooData: tabooData,\n                        cardData: cardData,\n                        draftCard: draftCard\n                    })\n        \n                    updateCardList(list)\n                    changeNewPhase(false)\n                    changeComplete(true)\n                }\n                else if (draftProgress < draftTarget) {\n                    if (draftCount[phase-1] === 1) {\n                        const list = StandardChaos({\n                            investigator: investigator,\n                            secondaryClass: secondaryClass,\n                            deckSize: deckSize,\n                            draftCards: draftTarget - draftProgress,\n                            draftXP: draftXP - draftProgress,\n                            upgrade: (draftTab === 'Upgrade'),\n                            cardList: cardList,\n                            cardData: cardData,\n//                            tabooData: tabooData.filter(item => item.code === selectedTaboo ? true : false),\n                            draftCard: draftCard\n                        })    \n        \n                        updateCardList(list)\n                        changePhase(phase + 1)\n                    }\n                    else {\n                        const pool = SimpleDraft({\n                            investigator: investigator,\n                            secondaryClass: secondaryClass,\n                            deckSize: deckSize,\n                            draftCount: draftCount[phase-1],\n                            draftUseLimited: draftUseLimited[phase-1],\n                            draftXP: draftXP - draftProgress,\n                            upgrade: (draftTab === 'Upgrade'),\n                            cardList: cardList,\n                            cardData: cardData,\n//                            tabooData: tabooData.filter(item => item.code === selectedTaboo ? true : false),\n                            draftCard: draftCard\n                            })\n    \n                        updateDraftPool(pool)    \n                        changeNewPhase(false)\n                    }\n                }\n            }\n            else {\n                if (draftPool.length < 1) {\n                    if (draftType === 'draft') {\n                        if (draftProgress < draftTarget) {\n                            const pool = SimpleDraft({\n                                investigator: investigator,\n                                secondaryClass: secondaryClass,\n                                deckSize: deckSize,\n                                draftCount: draftCount[phase-1],\n                                draftUseLimited: draftUseLimited[phase-1],\n                                draftXP: draftXP - draftProgress,\n                                upgrade: (draftTab === 'Upgrade'),\n                                cardList: cardList,\n                                cardData: cardData,\n//                                tabooData: tabooData.filter(item => item.code === selectedTaboo ? true : false),\n                                draftCard: draftCard\n                            })\n        \n                            updateDraftPool(pool)\n                        }\n                        else {\n                            changeComplete(true)\n                        }\n                    }\n                    else {\n                        if (draftProgress < draftTarget) {\n                            const pool = SimpleDraft({\n                                investigator: investigator,\n                                secondaryClass: secondaryClass,\n                                deckSize: deckSize,\n                                draftCount: draftCount[phase-1],\n                                draftUseLimited: draftUseLimited[phase-1],\n                                draftXP: draftXP - draftProgress,\n                                upgrade: (draftTab === 'Upgrade'),\n                                cardList: cardList,\n                                cardData: cardData,\n//                                tabooData: tabooData.filter(item => item.code === selectedTaboo ? true : false),\n                                draftCard: draftCard\n                            })\n    \n                            updateDraftPool(pool)\n                        }\n                        else {\n                            if (phase >= 3) {\n                                if (draftProgress < deckSize) {\n                                    const list = StandardChaos({\n                                        investigator: investigator,\n                                        secondaryClass: secondaryClass,\n                                        deckSize: deckSize,\n                                        draftCards: deckSize - draftProgress,\n                                        draftXP: draftXP - draftProgress,\n                                        upgrade: (draftTab === 'Upgrade'),\n                                        cardList: cardList,\n                                        cardData: cardData,\n//                                        tabooData: tabooData.filter(item => item.code === selectedTaboo ? true : false),\n                                        draftCard: draftCard\n                                    })    \n                \n                                    updateCardList(list)\n                                }\n                                \n                                changeComplete(true)\n                            }\n                            else {\n                                changePhase(phase + 1)\n                                changeNewPhase(true)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }, [building, complete, newPhase, draftType, draftProgressBuild, draftProgressUpgrade, deckSize, investigator, cardList, cardData, tabooData, draftCount, draftUseLimited, phase, draftCards, draftPool, draftTab, draftXP, secondaryClass])\n\n    function handleChange(name, value) {\n        if (name === 'investigator') {\n            changeInvestigator(value)\n\n            if (cardData && !selectedDeckSize) {\n                const investigatorID = Object.keys(cardData)\n                .filter(key => {\n                    return  cardData[key].name === value\n                })[0]\n\n                changeDeckSize(cardData[investigatorID].deck_requirements.size)\n\n                const classOptions = cardData[investigatorID].deck_options.filter(item => item.name === 'Secondary Class')\n\n                if (classOptions.length > 0) {\n                    changeSecondaryClass(classOptions[0].faction_select[0])\n                }\n            }\n        }\n        else if (name === 'secondaryClass') changeSecondaryClass(value)\n        else if (name === 'selectedDeckSize') {\n            changeSelectedDeckSize(value)\n            changeDeckSize(value)\n        }\n        else if (name === 'draftTab') changeDraftTab(value)\n        else if (name === 'draftType') changeDraftType(value)\n        else if (name === 'draftWeighting') changeDraftWeighting(value)\n        else if (name === 'draftXP') changeDraftXP(value)\n        else if (name === 'draftCount1') doChangeDraftCount(1, value)\n        else if (name === 'draftCount2') doChangeDraftCount(2, value)\n        else if (name === 'draftCount3') doChangeDraftCount(3, value)\n        else if (name === 'draftCards1') doChangeDraftCards(1, value)\n        else if (name === 'draftCards2') doChangeDraftCards(2, value)\n        else if (name === 'draftCards3') doChangeDraftCards(3, value)\n        else if (name === 'draftUseLimited1') doChangeDraftUseLimited(1, value)\n        else if (name === 'draftUseLimited2') doChangeDraftUseLimited(2, value)\n        else if (name === 'draftUseLimited3') doChangeDraftUseLimited(3, value)\n        else if (name === 'taboo') changeSelectedTaboo(value)\n        else if (name === 'building') {\n            if (value === true && cardData && tabooData) {\n//            if (value == true && cardData) {\n                const investigatorID = Object.keys(cardData)\n                .filter(key => {\n                    return  cardData[key].name === investigator\n                })[0]\n\n                if (!selectedDeckSize) {\n                    changeDeckSize(cardData[investigatorID].deck_requirements.size)    \n                }\n\n                if (!secondaryClass) {\n                    const classOptions = cardData[investigatorID].deck_options.filter(item => item.name === 'Secondary Class')\n\n                    if (classOptions.length > 0) {\n                        changeSecondaryClass(classOptions[0].faction_select[0])\n                    }\n                }\n\n                let tData = tabooData.filter(item => item.code === selectedTaboo ? true : false)\n\n                updateCardData(mergeTabooData(cardData, tData))\n            }\n            changeBuilding(value)\n        }\n    }\n\n    function doChangeDraftCount(index, value) {\n        let newCount = []\n        newCount = newCount.concat(draftCount)\n        newCount[index-1] = value\n        changeDraftCount(newCount)\n    }\n\n    function doChangeDraftCards(index, value) {\n        let newCards = []\n        newCards = newCards.concat(draftCards)\n        newCards[index-1] = value\n        changeDraftCards(newCards)\n    }\n\n    function doChangeDraftUseLimited(index, value) {\n        let newUseLimited = []\n        newUseLimited = newUseLimited.concat(draftUseLimited)\n        newUseLimited[index-1] = !draftUseLimited[index-1]\n        changeDraftUseLimited(newUseLimited)\n    }\n\n    function draftCard(card, list) {\n        let cardXP = 0\n\n        if (card.xp) {\n            cardXP = card.xp\n            if (card.exceptional) cardXP *= 2\n        }\n\n        if (list) {\n            const existingIndex = list.length > 0 ? list.findIndex(item => item.key === card.code) : -1\n\n            if (existingIndex >= 0) {\n                list.map(item => {\n                    if (item.name === card.name) {\n                        item.count = item.count + 1\n                        return item\n                    }\n\n                    return item\n                })\n            }\n            else {\n                list.push({ name: card.name, key: card.code, type_code: card.type_code, slot: card.slot, faction_code: card.faction_code, faction2_code: card.faction2_code, traits: card.traits, xp: cardXP, permanent: card.permanent, count: 1 })\n            }\n        }\n        else {\n            list = [{ name: card.name, key: card.code, type_code: card.type_code, slot: card.slot, faction_code: card.faction_code, faction2_code: card.faction2_code, traits: card.traits, xp: cardXP, permanent: card.permanent, count: 1 }]\n        }\n\n        return list\n    }\n\n    function resetApp() {\n        changeBuilding(false)\n//        changeInitialized(false)\n        changeNewPhase(true)\n        updateCardList([])\n        updateDraftPool([])\n        changePhase(1)\n        changeComplete(false)\n    }\n\n    const ready = cardData && tabooData && !fetchError\n\n    return (\n        <App\n        investigator={investigator}\n        secondaryClass={secondaryClass}\n        selectedDeckSize={selectedDeckSize}\n        selectedTaboo={selectedTaboo}\n        deckSize={deckSize}\n        draftTab={draftTab}\n        draftType={draftType}\n        draftWeighting={draftWeighting}\n        draftXP={draftXP}\n        draftCount={draftCount}\n        draftCards={draftCards}\n        draftUseLimited={draftUseLimited}\n        draftProgress={draftTab === 'Build Deck' ? draftProgressBuild : draftProgressUpgrade}\n        ready={ready}\n        building={building}\n        fetchError={fetchError}\n        phase={phase}\n        cardList={cardList}\n        draftPool={draftPool}\n        cardData={cardData}\n        tabooData={tabooData}\n        handleChange={handleChange}\n        draftCard={draftCard}\n        updateCardList={updateCardList}\n        updateDraftPool={updateDraftPool}\n        resetApp={resetApp}\n        />\n    )\n}\n\nexport default AppContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from './AppContainer';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}