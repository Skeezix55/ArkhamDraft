{"version":3,"sources":["components/InvestigatorSettings.js","components/SettingsType.js","components/SettingsChaos.js","components/SettingsDraft.js","components/SettingsPhase.js","components/SettingsPhasedDraft.js","components/SettingsBuild.js","components/SettingsUpgrade.js","components/Settings.js","components/CardList.js","components/DraftArea.js","components/Draft.js","App.js","components/DraftData.js","components/DraftFilters.js","components/StandardChaos.js","components/SimpleDraft.js","AppContainer.js","index.js"],"names":["InvestigatorSettings","props","handleChange","event","onChangeSetting","target","name","value","skidsName","skidsOption","className","investigator","onChange","style","display","secondaryClass","deckSize","SettingsType","style1","style2","handleClick","attributes","nodeValue","draftTab","backgroundColor","borderLeft","borderBottom","borderRight","onClick","SettingsChaos","SettingsDraft","type","min","max","step","draftCount","SettingsPhase","padding","phase","maxCards","draftCards","SettingsPhasedDraft","limit2","limit3","limit4","warningText2","warningText3","warningStyle2","warningStyle3","warningStyle4","SettingsBuild","draftSettings","draftDescription","draftType","SettingsUpgrade","Settings","draftWeighting","draftXP","button","ready","CardList","cardList","cardData","updateCardOverlay","assetCount","eventCount","skillCount","otherCount","hand","hand2","arcane","arcane2","accessory","body","ally","tarot","otherasset","permanent","skill","other","onEnterCardLeft","cardArray","filter","item","code","id","length","imagesrc","onEnterCardRight","onLeaveCard","forEach","push","count","slot","assetHeader","handHeader","handContents","sort","a","b","map","index","countStr","key","onPointerEnter","onPointerLeave","hand2Header","hand2Contents","arcaneHeader","arcaneContents","arcane2Header","arcane2Contents","accessoryHeader","accessoryContents","bodyHeader","bodyContents","allyHeader","allyContents","tarotHeader","tarotContents","otherassetHeader","otherassetContents","permanentHeader","permanentContents","eventHeader","eventContents","skillHeader","skillContents","otherHeader","otherContents","marginBottom","DraftArea","draftPool","draftCard","updateCardList","updateDraftPool","newList","findIndex","src","includes","updatedList","concat","images","i","imageSrc","alt","phaseText","Draft","draftProgress","resetApp","investigatorCardImage","investigatorCardImageBack","investigatorID","Object","keys","backimagesrc","draftContent","progress","App","contents","useState","overlayImage","updateOverlayImage","overlayPosition","updateOverlayPosition","overlay","fetchError","building","image","position","DrawCard","legal","randomCard","randomCode","Math","floor","random","FilterCards","upgrade","legalSets","deckOptions","deck_options","filteredDeck","list","options","limit","testDeckOption","filterDeckForLimited","minLevel","maxLevel","countDeckLimited","option","card","level","faction","trait","f","faction_code","faction2_code","ixp","undefined","xp","cardTraits","traits","search","RegExp","type_code","bonded_to","subtype_code","exceptional","restrictions","pack_code","optionLegal","not","limited","deck_limit","StandardChaos","filteredData","SimpleDraft","AppContainer","changeInvestigator","changeSecondaryClass","changeSelectedDeckSize","changeDeckSize","changeDraftTab","changeDraftType","changeDraftWeighting","changeDraftXP","changeDraftCount","changeDraftCards","changeBuilding","newPhase","changeNewPhase","fetching","changeFetching","updateCardData","updateFetchError","changePhase","complete","changeComplete","draftProgressBuild","draftProgressUpgrade","doChangeDraftCount","newCount","doChangeDraftCards","newCards","useEffect","fetch","then","res","json","catch","pool","targetCards","parseInt","deck_requirements","size","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04da28e6.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction InvestigatorSettings(props) {\n    function handleChange(event) {\n        props.onChangeSetting(event.target.name, event.target.value)\n    }\n\n    let skidsName = '\"Skids\" '\n    skidsName = skidsName + \"O'Toole\"\n    const skidsOption = <option value={skidsName}>{skidsName}</option>\n\n    return (\n        <div className=\"settings\">\n            <h3>Investigator Options</h3>\n            <label>Investigator:</label>\n            <select name=\"investigator\" value={props.investigator} onChange={handleChange}>\n                <option value=\"Roland Banks\">Roland Banks</option>\n                <option value=\"Daisy Walker\">Daisy Walker</option>\n                {skidsOption}\n                <option value=\"Agnes Baker\">Agnes Baker</option>\n                <option value=\"Wendy Adams\">Wendy Adams</option>\n                <option value=\"Zoey Samaras\">Zoey Samaras</option>\n                <option value=\"Rex Murphy\">Rex Murphy</option>\n                <option value=\"Jenny Barnes\">Jenny Barnes</option>\n                <option value=\"Jim Culver\">Jim Culver</option>\n                <option value='\"Ashcan\" Pete'>\"Ashcan\" Pete</option>\n                <option value=\"Mark Harrigan\">Mark Harrigan</option>\n                <option value=\"Minh Thi Phan\">Minh Thi Phan</option>\n                <option value=\"Sefina Rousseau\">Sefina Rousseau</option>\n                <option value=\"William Yorick\">William Yorick</option>\n                <option value=\"Leo Anderson\">Leo Anderson</option>\n                <option value=\"Ursula Downs\">Ursula Downs</option>\n                <option value=\"Finn Edwards\">Finn Edwards</option>\n                <option value=\"Father Mateo\">Father Mateo</option>\n                <option value=\"Calvin Wright\">Calvin Wright</option>\n                <option value=\"Preston Fairmont\">Preston Fairmont</option>\n                <option value=\"Diana Stanley\">Diana Stanley</option>\n                <option value=\"Rita Young\">Rita Young</option>\n                <option value=\"Marie Lambeau\">Marie Lambeau</option>\n                <option value=\"Tommy Muldoon\">Tommy Muldoon</option>\n                <option value=\"Luke Robinson\">Luke Robinson</option>\n                <option value=\"Patrice Hathaway\">Patrice Hathaway</option>\n            </select>\n            <br style={{display: \"none\"}}/>\n            <label style={{display: \"none\"}} className=\"secondaryClass\" value={props.secondaryClass}>Secondary class:</label>\n            <select style={{display: \"none\"}} className=\"secondaryClass\" name=\"secondaryClass\" value={props.secondaryClass} onChange={handleChange}>\n                <option value=\"guardian\">Guardian</option>\n                <option value=\"seeker\">Seeker</option>\n                <option value=\"rogue\">Rogue</option>\n                <option value=\"mystic\">Mystic</option>\n                <option value=\"survivor\">Survivor</option>\n            </select>\n            <br style={{display: \"none\"}}/>\n            <label style={{display: \"none\"}} className=\"deckSize\" value={props.deckSize}>Deck size:</label>\n            <select style={{display: \"none\"}} className=\"deckSize\" name=\"deckSize\" value={props.deckSize} onChange={handleChange}>\n                <option value=\"30\">30</option>\n                <option value=\"40\">40</option>\n                <option value=\"50\">50</option>\n            </select>\n        </div>\n    )\n}\n\nexport default InvestigatorSettings","import React from 'react'\n\nfunction SettingsType(props) {\n    let style1 = {}\n    let style2 = {}\n\n    if (props.draftTab === 'Build Deck') {\n        style1 = {\n            backgroundColor: \"#ebebeb\"\n        }\n        style2 = {\n            backgroundColor: \"#bababa\",\n            borderLeft: \"black 2px solid\",\n            borderBottom: \"black 2px solid\"\n        }\n    } else {\n        style1 = {\n            backgroundColor: \"#bababa\",\n            borderRight: \"black 2px solid\",\n            borderBottom: \"black 2px solid\"\n        }\n        style2 = {\n            backgroundColor: \"#ebebeb\"\n        }\n    }\n\n    function handleClick(event) {\n        props.onChangeSetting(event.target.attributes.name.nodeValue, event.target.attributes.value.nodeValue)\n    }\n\n    return (\n        <div className='draft-type'>\n            <div className='type-button' name='draftTab' value='Build Deck' style={style1} onClick={handleClick}>\n                Build Deck\n            </div>\n            <div className='type-button' name='draftTab' value='Upgrade' style={style2} onClick={handleClick}>\n                Upgrade\n            </div>\n        </div>\n    )\n}\n\nexport default SettingsType","import React from 'react'\n\nfunction SettingsChaos(props) {\n    return (\n        <div className=\"draftSettingsDraft\">\n        </div>\n    )\n}\n\n/*\n            <label>Weighting: </label>\n            <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value={props.weighting} className=\"slider\" name=\"weighting\" onChange={handleChange}/>\n            <span className=\"sliderValue\">{props.weighting}</span>\n            <br />\n            <div className=\"description\">A weighting of 0 means all cards will be equally\n                likely.  A weighting of 1 means a card will be as \n                prevalent as it was when it was released, based on \n                card type and slot.\n            </div>\n*/\n\nexport default SettingsChaos","import React from 'react'\n\nfunction SettingsDraft(props) {\n\n    function handleChange(event) {\n        props.onChangeSetting(event.target.name, event.target.value)\n    }\n\n    return (\n        <div className=\"draftSettingsDraft\">\n            <label>Cards to select from:</label>\n            <input type=\"range\" min=\"2\" max=\"9\" step=\"1\" value={props.draftCount} className=\"slider\" name=\"draftCount1\" onChange={handleChange}/>\n            <span className=\"sliderValue\">{props.draftCount}</span>\n        </div>\n    )\n}\n\nexport default SettingsDraft","import React from 'react'\n\nfunction SettingsPhase(props) {\n    return (\n        <div className=\"draftPhase\">\n            <h4 style={{padding: \"0 0 5px 0\"}}>Stage {props.phase}</h4>\n            <label>Cards to select from:</label>\n            <input type=\"range\" min=\"1\" max=\"9\" value={props.draftCount} className=\"slider\" name=\"draftCount\" onChange={props.onChangeSetting}/>\n            <span className=\"sliderValue\">{props.draftCount}</span>\n            <br />\n            <label>Cards selected in this stage: </label>\n            <input type=\"range\" min=\"0\" max={props.maxCards} value={props.draftCards} className=\"slider\" name=\"draftCards\" onChange={props.onChangeSetting}/>\n            <span className=\"sliderValue\">{props.draftCards}</span>\n        </div>\n    )\n}\n\nexport default SettingsPhase","import React from 'react'\n\nimport SettingsPhase from './SettingsPhase'\n\nfunction SettingsPhasedDraft(props) {\n    let limit2 = props.deckSize - props.draftCards[0]\n    let limit3 = limit2 - props.draftCards[1]\n    let limit4 = limit3 - props.draftCards[2]\n\n    let warningText2 = null\n    let warningText3 = null\n    let warningStyle2 = {}\n    let warningStyle3 = {}\n    let warningStyle4 = {}\n\n    if (limit2 < props.draftCards[1]) {\n        if (limit2 > 0) warningText2 = \"Only \" + limit2\n        else warningText2 = \"No\"\n\n        warningStyle2 = {display: \"block\"}\n    } else {\n        warningStyle2 = {display: \"none\"}\n    }\n\n    if (limit3 < props.draftCards[2]) {\n        if (limit3 > 0) warningText3 = \"Only \" + limit3\n        else warningText3 = \"No\"\n\n        warningStyle3 = {display: \"block\"}\n        if (limit3 < 0) limit3 = 0;\n    } else {\n        warningStyle3 = {display: \"none\"}\n    }\n\n    if (limit4 > 0) {\n        warningStyle4 = {display: \"block\"}\n    } else {\n        warningStyle4 = {display: \"none\"}\n    }\n\n    function handleChange1(event) {\n        props.onChangeSetting(event.target.name + '1', event.target.value)\n    }\n\n    function handleChange2(event) {\n        props.onChangeSetting(event.target.name + '2', event.target.value)\n    }\n\n    function handleChange3(event) {\n        props.onChangeSetting(event.target.name + '3', event.target.value)\n    }\n\n    return (\n        <div className=\"draftSettingsDraft\">\n            <SettingsPhase phase=\"1\" draftCount={props.draftCount[0]} draftCards={props.draftCards[0]} maxCards={props.deckSize} onChangeSetting={handleChange1} />\n            <SettingsPhase phase=\"2\" draftCount={props.draftCount[1]} draftCards={props.draftCards[1]} maxCards={props.deckSize} onChangeSetting={handleChange2} />\n            <SettingsPhase phase=\"3\" draftCount={props.draftCount[2]} draftCards={props.draftCards[2]} maxCards={props.deckSize} onChangeSetting={handleChange3} />\n            <div className=\"warning\" style={warningStyle2}>\n                <b>Warning:</b> {warningText2} cards will be drawn in Phase 2.\n            </div>\n            <div className=\"warning\" style={warningStyle3}>\n                <b>Warning:</b> {warningText3} cards will be drawn in Phase 3.\n            </div>\n            <div className=\"warning\" style={warningStyle4}>\n                <b>Warning:</b> The final {limit4} cards will be drawn at random.\n            </div>\n        </div>\n    )\n}\n\nexport default SettingsPhasedDraft\n","import React from 'react'\n\nimport SettingsChaos from './SettingsChaos'\nimport SettingsDraft from './SettingsDraft'\nimport SettingsPhasedDraft from './SettingsPhasedDraft'\n\nfunction SettingsBuild(props) {\n    function handleChange(event) {\n        props.onChangeSetting(event.target.name, event.target.value)\n    }\n\n    let draftSettings\n    let draftDescription\n\n    if (props.draftType === 'chaos') {\n        draftSettings = <SettingsChaos \n            onChangeSetting={props.onChangeSetting}\n        />\n        draftDescription = <div className=\"description\">\n            The original Ultimatum of Chaos rules from the 2017 Invocation Event.  A \n            full deck will be created completely randomly from all cards available to \n            the chosen investigator.\n        </div>\n    }\n    else if (props.draftType === 'draft') {\n        draftSettings = <SettingsDraft\n            draftCount={props.draftCount[0]} \n            onChangeSetting={props.onChangeSetting}\n        />\n        draftDescription = <div className=\"description\">\n            Select cards one by one from a random display of cards available to the \n            chosen investigator.  Each card will be selected from a number of cards \n            determined by the \"Cards to select from\" option.  \n        </div>\n    }\n    else if (props.draftType === 'phaseDraft') {\n        draftSettings = <SettingsPhasedDraft\n            draftCount={props.draftCount} \n            draftCards={props.draftCards} \n            deckSize={props.deckSize} \n            onChangeSetting={props.onChangeSetting}\n        />\n        draftDescription = <div className=\"description\">\n            The draft will proceed through 3 distinct stages.  All stages will draft \n            from the full set of cards available to the chosen investigator.  Each stage \n            will draft a number of cards equal to \"Cards selected in this stage\", not \n            including Permanent cards.  Each will be selected from a number of cards \n            determined by the \"Cards to select from\" option.  This allows you to use \n            completely random selection for part of the deck, or use a wider range of \n            choices for part of the deck.\n        </div>\n    }\n\n    return (\n        <div className=\"offsetDiv\">\n            <label>Type:</label>\n            <select name=\"draftType\" value={props.draftType} onChange={handleChange}>\n                <option value=\"chaos\">Standard chaos</option>\n                <option value=\"draft\">Simple draft</option>\n                <option value=\"phaseDraft\">Draft in stages</option>\n            </select>\n            {draftSettings}\n            {draftDescription}\n        </div>\n    )\n}\n\nexport default SettingsBuild","import React from 'react'\n\nimport SettingsChaos from './SettingsChaos'\nimport SettingsDraft from './SettingsDraft'\n\nfunction SettingsUpgrade(props) {\n    function handleChange(event) {\n        props.onChangeSetting(event.target.name, event.target.value)\n    }\n\n    let draftSettings\n\n    if (props.draftType === 'chaos') draftSettings = <SettingsChaos \n            onChangeSetting={props.onChangeSetting}\n        />\n    else if (props.draftType === 'draft') draftSettings = <SettingsDraft\n            draftCount={props.draftCount[0]} \n            onChangeSetting={props.onChangeSetting}\n        />\n\n        return (\n            <div>\n                Unfinished.\n            </div>\n        )\n/*\n        <div className=\"offsetDiv\">\n            <label>Type:</label>\n            <select name=\"draftType\" value={props.draftType} onChange={handleChange}>\n                <option value=\"chaos\">Standard chaos</option>\n                <option value=\"draft\">Simple draft</option>\n            </select>\n            <label>Weighting:</label>\n            <select name=\"draftWeighting\" value={props.draftWeighting} onChange={handleChange}>\n                <option value=\"low\">Prefer low XP</option>\n                <option value=\"medium\">Default</option>\n                <option value=\"high\">Prefer high XP</option>\n            </select>\n            <label>XP:</label>\n            <input name=\"draftXP\" type=\"number\" value={props.draftXP} min=\"1\" onChange={handleChange}></input>\n            {draftSettings}\n        </div>\n*/\n}\n\nexport default SettingsUpgrade","import React from 'react'\n\nimport SettingsType from './SettingsType'\nimport SettingsBuild from './SettingsBuild'\nimport SettingsUpgrade from './SettingsUpgrade'\n\nfunction Settings(props) {\n    function handleStart(event) {\n        props.onChangeSetting('building', true)\n    }\n\n    const draftSettings = props.draftTab === 'Build Deck' ?\n        <SettingsBuild \n            draftType={props.draftType}\n            draftCount={props.draftCount}\n            draftCards={props.draftCards}\n            deckSize={props.deckSize}\n            onChangeSetting={props.onChangeSetting}\n        /> :\n        <SettingsUpgrade \n            draftType={props.draftType}\n            draftWeighting={props.draftWeighting}\n            draftXP={props.draftXP}\n            draftCount={props.draftCount}\n            draftCards={props.draftCards}\n            deckSize={props.deckSize}\n            onChangeSetting={props.onChangeSetting}\n        />\n\n    const button = props.ready ?\n    <button className=\"button-ready\" onClick={handleStart}>Start</button> :\n    <button className=\"button-loading\">Loading...</button>\n\n    return (\n        <div className='settings'>\n            <SettingsType draftTab={props.draftTab} onChangeSetting={props.onChangeSetting}/>\n            <h3>Draft Options</h3>\n            <h5>{props.draftTab}</h5>\n            {draftSettings}\n            {(props.draftTab === 'Build Deck') ? button : null}\n        </div>\n    )\n}\n\nexport default Settings","import React from 'react'\n\nfunction CardList(props) {\n    const { cardList, cardData, updateCardOverlay } = props\n\n    let assetCount = 0\n    let eventCount = 0\n    let skillCount = 0\n    let otherCount = 0\n    const hand = []\n    const hand2 = []\n    const arcane = []\n    const arcane2 = []\n    const accessory = []\n    const body = []\n    const ally = []\n    const tarot = []\n    const otherasset = []\n    const permanent = []\n    const event = []\n    const skill = []\n    const other = []\n\n    cardList.forEach(item => {\n        if (item.type === 'event') {\n            event.push(item)\n            eventCount += item.count\n        }\n        else if (item.type === 'skill') {\n            skill.push(item)\n            skillCount += item.count\n        }\n        else if (item.type === 'asset') {\n            if (item.permanent) permanent.push(item)\n            else if (item.slot === 'Hand') hand.push(item)\n            else if (item.slot === 'Hand x2') hand2.push(item)\n            else if (item.slot === 'Arcane') arcane.push(item)\n            else if (item.slot === 'Arcane x2') arcane2.push(item)\n            else if (item.slot === 'Accessory') accessory.push(item)\n            else if (item.slot === 'Body') body.push(item)\n            else if (item.slot === 'Ally') ally.push(item)\n            else if (item.slot === 'Tarot') tarot.push(item)\n            else otherasset.push(item)\n            assetCount += item.count\n        }\n        else {\n            other.push(item)\n            otherCount += item.count\n        }\n    })\n\n    function onEnterCardLeft(event) {\n        const cardArray = cardData.filter(item => item.code === event.target.id)\n\n        if (cardArray && cardArray.length > 0) {\n            const imagesrc = \"http://www.arkhamdb.com\" + cardArray[0].imagesrc\n\n            updateCardOverlay(imagesrc, \"Right\")\n        }\n    }\n\n    function onEnterCardRight(event) {\n        const cardArray = cardData.filter(item => item.code === event.target.id)\n\n        if (cardArray && cardArray.length > 0) {\n            const imagesrc = \"http://www.arkhamdb.com\" + cardArray[0].imagesrc\n\n            updateCardOverlay(imagesrc, \"Left\")\n        }\n    }\n\n    function onLeaveCard(event) {\n        updateCardOverlay(null, \"Left\")\n    }\n\n    const assetHeader = assetCount > 0 ? <h4>Assets ({assetCount})</h4> : null\n    \n    const handHeader = hand.length > 0 ? <p className='slot-header'>Hand</p> : null\n    const handContents = hand.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const hand2Header = hand2.length > 0 ? <p className='slot-header'>Hand x2</p> : null\n    const hand2Contents = hand2.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const arcaneHeader = arcane.length > 0 ? <p className='slot-header'>Arcane</p> : null\n    const arcaneContents = arcane.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const arcane2Header = arcane2.length > 0 ? <p className='slot-header'>Arcane x2</p> : null\n    const arcane2Contents = arcane2.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const accessoryHeader = accessory.length > 0 ? <p className='slot-header'>Accessory</p> : null\n    const accessoryContents = accessory.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const bodyHeader = body.length > 0 ? <p className='slot-header'>Body</p> : null\n    const bodyContents = body.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const allyHeader = ally.length > 0 ? <p className='slot-header'>Ally</p> : null\n    const allyContents = ally.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const tarotHeader = tarot.length > 0 ? <p className='slot-header'>Tarot</p> : null\n    const tarotContents = tarot.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const otherassetHeader = otherasset.length > 0 ? <p className='slot-header'>Other</p> : null\n    const otherassetContents = otherasset.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const permanentHeader = permanent.length > 0 ? <p className='slot-header'>Permanent</p> : null\n    const permanentContents = permanent.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardLeft} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const eventHeader = eventCount > 0 ? <h4>Events ({eventCount})</h4> : null\n    const eventContents = event.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n        return <p id={item.key} onPointerEnter={onEnterCardRight} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const skillHeader = skillCount > 0 ? <h4>Skills ({skillCount})</h4> : null\n    const skillContents = skill.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardRight} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    const otherHeader = otherCount > 0 ? <h4>Other ({otherCount})</h4> : null\n    const otherContents = other.sort((a, b) => (a.name > b.name) ? 1 : -1).map((item, index) => {\n        const countStr = item.count > 1 ? ' x' + item.count : null\n//        return <p key={index}>{item.name}{countStr}</p>\n        return <p id={item.key} onPointerEnter={onEnterCardRight} onPointerLeave={onLeaveCard} key={index}>{item.name}{countStr}</p>\n    })\n\n    return (\n        <div className=\"settings\">\n            <h3 style={{marginBottom: \"-10px\"}}>Card List</h3>\n            <div className=\"cardContainer\">\n                <div className=\"col1\">\n                    {assetHeader}\n                    {handHeader}\n                    {handContents}\n                    {hand2Header}\n                    {hand2Contents}\n                    {arcaneHeader}\n                    {arcaneContents}\n                    {arcane2Header}\n                    {arcane2Contents}\n                    {accessoryHeader}\n                    {accessoryContents}\n                    {bodyHeader}\n                    {bodyContents}\n                    {allyHeader}\n                    {allyContents}\n                    {tarotHeader}\n                    {tarotContents}\n                    {otherassetHeader}\n                    {otherassetContents}\n                    {permanentHeader}\n                    {permanentContents}\n                </div>\n                <div className=\"col2\">\n                    {eventHeader}\n                    {eventContents}\n                    {skillHeader}\n                    {skillContents}\n                    {otherHeader}\n                    {otherContents}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CardList\n","import React from 'react'\n\nfunction DraftArea(props) {\n    const { draftCount, draftPool, draftCard, draftType, phase, cardList, updateCardList, updateDraftPool } = props\n\n    let newList = []\n    newList = newList.concat(cardList)\n\n    function handleClick(event) {\n        const index = draftPool.findIndex(item => {\n            return event.target.src.includes(item.imagesrc)\n        })\n\n        const updatedList = draftCard(draftPool[index], newList)\n\n        updateCardList(updatedList)\n        updateDraftPool([])\n    }\n\n    let images = []\n\n    for (let i = 0; i < draftCount; i++) {\n        const imageSrc = \"https://www.arkhamdb.com\" + draftPool[i].imagesrc\n        images.push(<div className=\"draft-card\" key={i}><img className=\"draft-image\" src={imageSrc} alt={draftPool[i].name} onClick={handleClick}/></div>)\n    }\n\n    const phaseText = draftType === 'phaseDraft' ? ' - Stage ' + phase : null\n\n    return (\n        <div className=\"settings\">\n            <h3>Draft{phaseText}</h3>\n            <div className='draft-container'>\n                {images}\n            </div>\n            <p>Click image to draft card</p>\n        </div>\n    )\n}\n\nexport default DraftArea","import React from 'react'\n\nimport CardList from './CardList'\nimport DraftArea from './DraftArea'\n\nfunction Draft(props) {\n    const { investigator, deckSize, draftTab, draftXP, draftCount, draftProgress, draftType, phase, cardList, draftPool, cardData, draftCard, updateCardList, updateDraftPool, resetApp, updateCardOverlay } = props\n\n    let investigatorCardImage = null\n    let investigatorCardImageBack = null\n\n    if (cardData) {\n        const investigatorID = Object.keys(cardData)\n        .filter(key => {\n            return  cardData[key].name === investigator\n        })[0]\n\n        const imagesrc = \"https://www.arkhamdb.com\" + cardData[investigatorID].imagesrc\n        const backimagesrc = \"https://www.arkhamdb.com\" + cardData[investigatorID].backimagesrc\n        investigatorCardImage = <img className=\"investigator-image\" src={imagesrc} alt={props.investigator} />\n        investigatorCardImageBack = <img className=\"investigator-image\" src={backimagesrc} alt={props.investigator + ' (back)'} />\n    }\n\n    let draftContent = null\n\n    if (draftPool.length > 0) {\n        draftContent = <DraftArea \n            draftCount={draftCount}\n            draftCard={draftCard}\n            phase={phase}\n            draftType={draftType}\n            draftPool={draftPool}\n            cardList={cardList}\n            updateCardList={updateCardList}\n            updateDraftPool={updateDraftPool}\n        />\n    }\n\n    const progress = draftTab === 'Build Deck' ? \n        <p><b>Cards: </b>{draftProgress}/{deckSize}</p> : \n        <p><b>XP: </b>{draftProgress}/{draftXP}</p>\n\n    return (\n        <div>\n            <div className=\"settings\">\n                <h2>{investigator}</h2>\n                <br />\n                {investigatorCardImage}\n                {investigatorCardImageBack}\n                {progress}\n            </div>\n            {draftContent}\n            <CardList \n                cardList={cardList}\n                cardData={cardData}\n                updateCardOverlay={updateCardOverlay}\n            />\n            <button onClick={resetApp}>Restart</button>\n        </div>\n    )\n}\n\nexport default Draft","import React, { useState } from 'react'\n\nimport './App.css';\n\nimport InvestigatorSettings from './components/InvestigatorSettings'\nimport Settings from './components/Settings'\n\nimport Draft from './components/Draft'\n\nfunction App(props) {\n    let contents = null\n\n    const [overlayImage, updateOverlayImage] = useState(null)\n    const [overlayPosition, updateOverlayPosition] = useState('Left\"')\n\n    function updateCardOverlay(image, position) {\n        updateOverlayImage(image)\n        updateOverlayPosition(position)\n    }\n\n    let overlay = null\n\n    if (overlayImage) {\n        overlay = <div className={\"floatingImage\"+overlayPosition}><img src={overlayImage} /></div>\n    }\n\n    if (props.fetchError) {\n        contents = \n            <div>\n                Fetch error!\n            </div>\n    }\n    else if (props.building) {\n        contents = \n            <Draft\n                draftType={props.draftType}\n                draftTab={props.draftTab}\n                investigator={props.investigator} \n                secondaryClass={props.secondaryClass} \n                deckSize={props.deckSize}\n                draftXP={props.draftXP}\n                draftCount={props.draftCount[props.phase-1]}\n                draftCards={props.draftCards[props.phase-1]}\n                draftProgress={props.draftProgress}\n                phase={props.phase}\n                cardList={props.cardList}\n                cardData={props.cardData}\n                draftPool={props.draftPool}\n                draftCard={props.draftCard}\n                updateCardList={props.updateCardList}\n                updateDraftPool={props.updateDraftPool}\n                updateCardOverlay={updateCardOverlay}\n                resetApp={props.resetApp}\n            />\n    }\n    else {\n        contents = \n        <div>\n            <InvestigatorSettings \n                investigator={props.investigator}\n                secondaryClass={props.secondaryClass}\n                deckSize={props.deckSize}\n                onChangeSetting={props.handleChange}\n            />\n            <Settings\n                draftTab={props.draftTab}\n                draftType={props.draftType}\n                draftWeighting={props.draftWeighting}\n                draftXP={props.draftXP}\n                draftCount={props.draftCount}\n                draftCards={props.draftCards}\n                deckSize={props.deckSize}\n                ready={props.ready}\n                onChangeSetting={props.handleChange}\n            />\n        </div>\n    }\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n            ArkhamDraft\n            </header>\n            {contents}\n            {overlay}\n        </div>\n    )\n}\n\nexport default App;\n","function DrawCard(cardData, draftPool) {\n    let legal = false\n    let randomCard = null\n\n    while (!legal) {\n        randomCard = cardData[Math.floor(Math.random() * cardData.length)]\n\n        const randomCode = randomCard.code\n        const existingIndex = (draftPool && draftPool.length > 0) ? draftPool.findIndex(item => item.code === randomCode) : -1\n        \n        if (existingIndex < 0) legal = true\n    }\n\n    return randomCard\n}\n\nexport default DrawCard","// card data:\n// pack_code\n// pack_name\n// type_code\n        // treachery\n        // investigator\n        // asset\n        // event\n        // skill\n        // enemy\n        // story\n        // location\n// type_name\n// subtype_code\n// faction_code\n// faction_name\n// position\n// exceptional\n// myriad\n// code\n// name\n// real_name\n// subname\n// text\n// real_text\n// quantity\n// skill_willpower\n// skill_intellect\n// skill_combat\n// skill_agility\n// clues_fixed\n// health\n// health_per_investigator\n// sanity\n// deck_limit\n// traits\n// real_traits\n// deck_requirements\n// deck_options\n// flavor\n// illustrator\n// is_unique\n// exile\n// hidden\n// permanent\n// double_sided\n// back_text\n// back_flavor\n// octgn_id\n// url\n// imagesrc\n// backimagesrc\n\n// slot\n    // Hand\n    // Accessory\n    // Ally\n    // Hand x2\n    // Arcane\n    // Body\n    // Tarot\n// restrictions\n// cost\n// xp\n\nfunction FilterCards(props) {\n    const { investigator, cardData, cardList, upgrade } = props\n\n    const legalSets = { 'core': 1\n        ,'dwl': 1, 'tmm': 1, 'tece': 1, 'bota': 1, 'uau': 1, 'wda': 1, 'litas': 1\n        ,'ptc': 1, 'eotp': 1, 'tuo': 1, 'apot': 1, 'tpm': 1, 'bsr': 1, 'dca': 1\n        ,'tfa': 1, 'tof': 1, 'tbb': 1, 'hote': 1, 'tcoa': 1, 'tdoy': 1, 'sha': 1\n        ,'tcu': 1, 'tsn': 1, 'wos': 1, 'fgg': 1, 'uad': 1, 'icc': 1, 'bbt': 1\n        ,'tde': 1, 'sfk': 1, 'tsh': 1, 'dsm': 1, 'pnr': 1, 'wgd': 1, 'woc': 1\n        ,'rtnotz': 1, 'rtdwl': 1, 'rtptc': 1 }\n\n    const investigatorID = Object.keys(cardData)\n    .filter(key => {\n        return cardData[key].name === investigator\n    })[0]\n\n    const deckOptions = cardData[investigatorID].deck_options\n\n    const filteredDeck = filterDeckForLimited(cardList, deckOptions)\n\n    let minLevel = 0\n    let maxLevel = 0\n\n    if (upgrade) {\n        minLevel = 1\n        maxLevel = 5\n    }\n//console.log('Filter : ' + props.draftXP)\n    const filteredData = cardData.filter(card => {\n        if (card.type_code === 'investigator') return false\n        if (card.type_code === 'story') return false\n        if (card.type_code === 'location') return false\n        if (card.type_code === 'enemy') return false\n        if (card.type_code === 'treachery') return false\n        if (card.bonded_to) return false\n        // currently means weakness\n        if (card.subtype_code) return false\n\n        let xp = 0\n        if (card.xp) xp = card.xp\n        if (card.exceptional) xp *= 2\n\n        if (xp < minLevel) return false\n        if (xp > maxLevel) return false\n\n//        arcane research!!!! oh no!!\n//        green man medallion as well\n\n        if (card.restrictions && card.restrictions.investigator) return false\n        if (!legalSets[card.pack_code]) return false\n\n        // this isn't right for upgrades yet\n        let legal = false\n        for (let i = 0; i < deckOptions.length; i++) {\n            let optionLegal = false\n\n            if (testDeckOption(card, deckOptions[i])) {\n                optionLegal = true\n\n                if (deckOptions[i].not) {\n                    optionLegal = false\n                }\n                else if (deckOptions[i].limit) {\n                    const inDeck = countDeckLimited(filteredDeck, deckOptions[i])\n\n                    if (inDeck >= deckOptions[i].limit) optionLegal = false\n                }\n            }\n\n            if (optionLegal) legal = true\n        }\n\n        if (!legal) return false\n\n        // check to see if there's already max in the deck\n        let limited = false\n        \n        cardList.forEach(item => {\n            if (item.name === card.name) {\n                if (item.count >= card.deck_limit) {\n//                    console.log(card.name + ' : Over the limit')\n                    limited = true\n                }\n            }\n        })\n\n        if (limited) return false\n\n        return true\n    })\n\n    function filterDeckForLimited(list, options) {\n        if (!list) return []\n\n        let filteredDeck = []\n\n        list.forEach(item => {\n            let legal = false\n\n            for (let i = 0; i < options.length; i++) {\n                if (options[i].limit) continue;\n\n                const optionLegal = testDeckOption(item, options[i])\n\n                if (optionLegal) legal = true\n            }\n\n            if (!legal) filteredDeck.push(item)\n        })\n\n        return filteredDeck\n    }\n\n    function countDeckLimited(list, option) {\n        let count = 0\n\n        if (list) {\n            list.forEach(item => {\n                if (testDeckOption(item, option)) count += item.count\n            })\n        }\n\n        return count\n    }\n\n    function testDeckOption(card, option) {\n        let level = true\n        let faction = true\n        let trait = true\n\n        if (option.faction) {\n            faction = false\n\n            for (let f = 0; f < option.faction.length; f++) {\n                if (card.faction_code === option.faction[f]) {\n                    faction = true\n                }\n                if (card.faction2_code === option.faction[f]) {\n                    faction = true\n                }\n            }\n        } \n\n        if (option.level) {\n            level = false\n\n            const min = option.level.min\n            const max = option.level.max\n\n            const ixp = card.xp === undefined ? 0 : card.xp\n\n            if (ixp >= min && ixp <= max) level = true;\n        }\n\n        if (option.trait) {\n            trait = false\n\n            const cardTraits = card.traits\n            \n            if (cardTraits && cardTraits.search(new RegExp(option.trait, \"i\")) >= 0)\n                trait = true\n        }\n\n        return faction && level && trait\n    }\n\n    return filteredData\n}\n\nexport default FilterCards\n\n/* odds research\n            // stat test\n            const setArray = [ 'core'\n                ,'dwl', 'tmm', 'tece', 'bota', 'uau', 'wda', 'litas'\n                ,'ptc', 'eotp', 'tuo', 'apot', 'tpm', 'bsr', 'dca'\n                ,'tfa', 'tof', 'tbb', 'hote', 'tcoa', 'tdoy', 'sha'\n                ,'tcu', 'tsn', 'wos', 'fgg', 'uad', 'icc', 'bbt'\n                ,'tde', 'sfk', 'tsh', 'dsm', 'pnr', 'wgd', 'woc'\n                ,'rtnotz', 'rtdwl', 'rtptc'\n            ]\n\n//            const assets = countCards('asset', setArray)\n//            const events = countCards('event', setArray)\n//            const skills = countCards('skill', setArray)\n\n            const hand = countCards('asset', 'Hand', setArray)\n            const hands2 = countCards('asset', 'Hand x2', setArray)\n            const ally = countCards('asset', 'Ally', setArray)\n            const accessory = countCards('asset', 'Accessory', setArray)\n            const arcane = countCards('asset', 'Arcane', setArray)\n            const body = countCards('asset', 'Body', setArray)\n            const tarot = countCards('asset', 'Tarot', setArray)\n\n//            console.log('Assets: ' + assets)\n//            console.log('Events: ' + events)\n//            console.log('Skills: ' + skills)\n\n            console.log('Hand: ' + hand)\n            console.log('Ally: ' + ally)\n            console.log('Arcane: ' + arcane)\n            console.log('2xHands: ' + hands2)\n            console.log('Accessory: ' + accessory)\n            console.log('Body: ' + body)\n            conso le.log('Tarot: ' + tarot)\n*/\n/* odds research\n    function countCards(cardType, cardSlot, sets) {\n        const filteredData = cardData.filter(card => {\n            // currently means weakness\n            if (card.type_code !== cardType) return false\n            if (card.subtype_code) return false\n            if (card.slot && card.slot !== cardSlot) return false\n            if (!card.slot) return false\n//            if (card.xp && card.xp > 0) return false            \n            if (card.restrictions && card.restrictions.investigator) return false\n    //        console.log(card.slot + ' <=> ' + cardSlot + ' (' + card.name + ')')\n    \n            let foundSet = false\n            for (let i = 0; i < sets.length; i++) {\n                if (card.pack_code === sets[i]) foundSet = true\n            }\n\n            return foundSet\n        })\n\n        return filteredData.length\n    }\n*/\n\n","import DrawCard from './DraftData'\nimport FilterCards from './DraftFilters'\n\nfunction StandardChaos(props) {\n    const { draftCards, draftCard, cardList } = props;\n    let newList = []\n\n    newList = newList.concat(cardList)\n\n    // generates all cards, sets cardList state\n    const filteredData = FilterCards(props)\n\n    let draftProgress = 0;\n\n    while (draftProgress < draftCards) {\n        const card = DrawCard(filteredData)\n        newList = draftCard(card, newList)\n\n        if (!card.permanent) draftProgress++\n    }\n\n    return newList\n}\n\nexport default StandardChaos","import DrawCard from './DraftData'\nimport FilterCards from './DraftFilters'\n\nfunction SimpleDraft(props) {\n    const { draftCount } = props\n\n    // generates draft cards\n    const filteredData = FilterCards(props)\n\n    let draftPool = []\n\n    for (let i = 0; i < draftCount; i++) {\n        const card = DrawCard(filteredData, draftPool)\n\n        draftPool.push(card)\n    }\n\n    return draftPool\n}\n\nexport default SimpleDraft","import React, { useState, useEffect } from 'react';\n\nimport App from './App';\nimport StandardChaos from './components/StandardChaos'\nimport SimpleDraft from './components/SimpleDraft'\n\nfunction AppContainer() {\n    const [investigator, changeInvestigator] = useState(\"Roland Banks\")\n    const [secondaryClass, changeSecondaryClass] = useState(\"guardian\")\n    const [selectedDeckSize, changeSelectedDeckSize] = useState(\"30\")\n    const [deckSize, changeDeckSize] = useState(\"30\")\n    const [draftTab, changeDraftTab] = useState(\"Build Deck\")\n    const [draftType, changeDraftType] = useState(\"draft\")\n    const [draftWeighting, changeDraftWeighting] = useState('medium')\n    const [draftXP, changeDraftXP] = useState(1)\n    const [draftCount, changeDraftCount] = useState([3, 3, 3])\n    const [draftCards, changeDraftCards] = useState([10, 10, 10])\n    const [building, changeBuilding] = useState(false)\n//    const [initialized, changeInitialized] = useState(false)\n    const [newPhase, changeNewPhase] = useState(true)\n    const [fetching, changeFetching] = useState(false)\n    const [cardData, updateCardData] = useState(null)\n    const [fetchError, updateFetchError] = useState(false)\n    const [cardList, updateCardList] = useState([])\n    const [draftPool, updateDraftPool] = useState([])\n    const [phase, changePhase] = useState(1)\n    const [complete, changeComplete] = useState(false)\n\n    // card count for Build, xp for Upgrade\n    let draftProgressBuild = 0\n    let draftProgressUpgrade = 0\n\n    if (cardList) {\n        for (let item in cardList) {\n            // permanent don't count\n            if (!cardList[item].permanent) draftProgressBuild += cardList[item].count\n            draftProgressUpgrade += cardList[item].xp * cardList[item].count;\n        }\n    }\n\n    useEffect(() => fetchData(), [])\n\n    function fetchData() {\n        changeFetching(true)\n\n        fetch(\"https://cors-anywhere.herokuapp.com/https://arkhamdb.com/api/public/cards/\")\n        .then(res => {\n            return res.json()\n        })\n        .then(res => {\n            updateCardData(res)\n            changeFetching(false)\n        })\n        .catch(() => updateFetchError(true))\n    }\n\n    useEffect(() => {\n        if (building && !complete) {\n            const draftProgress = (draftTab === 'Build Deck') ? draftProgressBuild : draftProgressUpgrade\n\n            if (newPhase) {\n                if (draftType === 'chaos') {\n                    // first (and only) time through\n                    const list = StandardChaos({\n                        investigator: investigator,\n                        draftCards: deckSize,\n                        draftXP: draftXP,\n                        upgrade: (draftTab === 'Upgrade'),\n                        cardList: cardList,\n                        cardData: cardData,\n                        draftCard: draftCard\n                    })\n        \n                    updateCardList(list)\n                    changeNewPhase(false)\n                    changeComplete(true)\n                }\n                else if (draftProgress < deckSize) {\n                    if (draftCount[phase-1] == 1) {\n                        const list = StandardChaos({\n                            investigator: investigator,\n                            draftCards: draftCards[phase-1],\n                            draftXP: draftXP,\n                            upgrade: (draftTab === 'Upgrade'),\n                            cardList: cardList,\n                            cardData: cardData,\n                            draftCard: draftCard\n                        })    \n        \n                        updateCardList(list)\n                        changePhase(phase + 1)\n                    }\n                    else {\n                        const pool = SimpleDraft({\n                            investigator: investigator,\n                            draftCount: draftCount[phase-1],\n                            draftXP: draftXP,\n                            upgrade: (draftTab === 'Upgrade'),\n                            cardList: cardList,\n                            cardData: cardData,\n                            draftCard: draftCard\n                            })\n    \n                        updateDraftPool(pool)    \n                        changeNewPhase(false)\n                    }\n                }\n            }\n            else {\n                if (draftPool.length < 1) {\n                    if (draftType === 'draft') {\n                        if (draftProgress < deckSize) {\n                            const pool = SimpleDraft({\n                                investigator: investigator,\n                                draftCount: draftCount[phase-1],\n                                draftXP: draftXP,\n                                upgrade: (draftTab === 'Upgrade'),\n                                cardList: cardList,\n                                cardData: cardData,\n                                draftCard: draftCard\n                            })\n        \n                            updateDraftPool(pool)\n                        }\n                        else {\n                            changeComplete(true)\n                        }\n                    }\n                    else {\n                        let targetCards = 0\n                        for (let i = 0; i < phase; i++) targetCards += parseInt(draftCards[i], 10)\n                        if (targetCards > deckSize) targetCards = deckSize\n\n                        if (draftProgress < targetCards) {\n                            const pool = SimpleDraft({\n                                investigator: investigator,\n                                draftCount: draftCount[phase-1],\n                                draftXP: draftXP,\n                                upgrade: (draftTab === 'Upgrade'),\n                                cardList: cardList,\n                                cardData: cardData,\n                                draftCard: draftCard\n                            })\n    \n                            updateDraftPool(pool)\n                        }\n                        else {\n                            if (phase >= 3) {\n                                if (draftProgress < deckSize) {\n                                    const list = StandardChaos({\n                                        investigator: investigator,\n                                        draftCards: deckSize - draftProgress,\n                                        draftXP: draftXP,\n                                        upgrade: (draftTab === 'Upgrade'),\n                                        cardList: cardList,\n                                        cardData: cardData,\n                                        draftCard: draftCard\n                                    })    \n                \n                                    updateCardList(list)\n                                }\n                                \n                                changeComplete(true)\n                            }\n                            else {\n                                changePhase(phase + 1)\n                                changeNewPhase(true)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }, [building, complete, newPhase, draftType, draftProgressBuild, draftProgressUpgrade, deckSize, investigator, cardList, cardData, draftCount, phase, draftCards, draftPool, draftTab])\n\n    function handleChange(name, value) {\n        if (name === 'investigator') {\n            changeInvestigator(value)\n\n            const investigatorID = Object.keys(cardData)\n            .filter(key => {\n                return  cardData[key].name === value\n            })[0]\n\n            changeDeckSize(cardData[investigatorID].deck_requirements.size)\n        }\n        else if (name === 'secondaryClass') changeSecondaryClass(value)\n        else if (name === 'deckSize') {\n            changeSelectedDeckSize(value)\n            changeDeckSize(value)\n        }\n        else if (name === 'draftTab') changeDraftTab(value)\n        else if (name === 'draftType') changeDraftType(value)\n        else if (name === 'draftWeighting') changeDraftWeighting(value)\n        else if (name === 'draftXP') changeDraftXP(value)\n        else if (name === 'draftCount1') doChangeDraftCount(1, value)\n        else if (name === 'draftCount2') doChangeDraftCount(2, value)\n        else if (name === 'draftCount3') doChangeDraftCount(3, value)\n        else if (name === 'draftCards1') doChangeDraftCards(1, value)\n        else if (name === 'draftCards2') doChangeDraftCards(2, value)\n        else if (name === 'draftCards3') doChangeDraftCards(3, value)\n        else if (name === 'building') changeBuilding(value)\n    }\n\n    function doChangeDraftCount(index, value) {\n        let newCount = []\n        newCount = newCount.concat(draftCount)\n        newCount[index-1] = value\n        changeDraftCount(newCount)\n    }\n\n    function doChangeDraftCards(index, value) {\n        let newCards = []\n        newCards = newCards.concat(draftCards)\n        newCards[index-1] = value\n        changeDraftCards(newCards)\n    }\n\n    function draftCard(card, list) {\n        if (list) {\n            const existingIndex = list.length > 0 ? list.findIndex(item => item.key === card.code) : -1\n\n            if (existingIndex >= 0) {\n                list.map(item => {\n                    if (item.name === card.name) {\n                        item.count = item.count + 1\n                        return item\n                    }\n\n                    return item\n                })\n            }\n            else {\n                list.push({ name: card.name, key: card.code, type: card.type_code, slot: card.slot, faction_code: card.faction_code, faction2_code: card.faction2_code, xp: card.xp, permanent: card.permanent, count: 1 })\n            }\n        }\n        else {\n            list = [{ name: card.name, key: card.code, type: card.type_code, slot: card.slot, faction_code: card.faction_code, faction2_code: card.faction2_code, xp: card.xp, permanent: card.permanent, count: 1 }]\n        }\n\n        return list\n    }\n\n    function resetApp() {\n        changeBuilding(false)\n//        changeInitialized(false)\n        changeNewPhase(true)\n        updateCardList([])\n        updateDraftPool([])\n        changePhase(1)\n        changeComplete(false)\n    }\n\n    const ready = cardData && !fetching && !fetchError\n\n    return (\n        <App\n        investigator={investigator}\n        secondaryClass={secondaryClass}\n        deckSize={deckSize}\n        draftTab={draftTab}\n        draftType={draftType}\n        draftWeighting={draftWeighting}\n        draftXP={draftXP}\n        draftCount={draftCount}\n        draftCards={draftCards}\n        draftProgress={draftTab === 'Build Deck' ? draftProgressBuild : draftProgressUpgrade}\n        ready={ready}\n        building={building}\n        fetchError={fetchError}\n        phase={phase}\n        cardList={cardList}\n        draftPool={draftPool}\n        cardData={cardData}\n        handleChange={handleChange}\n        draftCard={draftCard}\n        updateCardList={updateCardList}\n        updateDraftPool={updateDraftPool}\n        resetApp={resetApp}\n        />\n    )\n}\n\nexport default AppContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from './AppContainer';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}